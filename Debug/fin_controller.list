
fin_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005264  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f4  080055f4  0000707c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055fc  080055fc  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055fc  080055fc  000065fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005600  08005600  00006600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005604  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000707c  2**0
                  CONTENTS
 10 .bss          00000290  2000007c  2000007c  0000707c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  0000707c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d79a  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e34  00000000  00000000  00014846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00016680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a21  00000000  00000000  00017378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cd1  00000000  00000000  00017d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea0c  00000000  00000000  00039a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd210  00000000  00000000  00048476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115686  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a8  00000000  00000000  001156cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00119774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053dc 	.word	0x080053dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080053dc 	.word	0x080053dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <update_servos>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void update_servos()
{
 800059c:	b480      	push	{r7}
 800059e:	b089      	sub	sp, #36	@ 0x24
 80005a0:	af00      	add	r7, sp, #0
    int setpoint_x = 320;
 80005a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80005a6:	61fb      	str	r3, [r7, #28]
    int setpoint_y = 240;
 80005a8:	23f0      	movs	r3, #240	@ 0xf0
 80005aa:	61bb      	str	r3, [r7, #24]

    int error_x = setpoint_x - bbox_center_x;
 80005ac:	4bac      	ldr	r3, [pc, #688]	@ (8000860 <update_servos+0x2c4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	69fa      	ldr	r2, [r7, #28]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	617b      	str	r3, [r7, #20]
    int error_y = setpoint_y - bbox_center_y;
 80005b6:	4bab      	ldr	r3, [pc, #684]	@ (8000864 <update_servos+0x2c8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	69ba      	ldr	r2, [r7, #24]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	613b      	str	r3, [r7, #16]

    // Integrator update
    integral_x += error_x * DT;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	ee07 3a90 	vmov	s15, r3
 80005c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ca:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8000868 <update_servos+0x2cc>
 80005ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005d2:	4ba6      	ldr	r3, [pc, #664]	@ (800086c <update_servos+0x2d0>)
 80005d4:	edd3 7a00 	vldr	s15, [r3]
 80005d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005dc:	4ba3      	ldr	r3, [pc, #652]	@ (800086c <update_servos+0x2d0>)
 80005de:	edc3 7a00 	vstr	s15, [r3]
    integral_y += error_y * DT;
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	ee07 3a90 	vmov	s15, r3
 80005e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ec:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8000868 <update_servos+0x2cc>
 80005f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005f4:	4b9e      	ldr	r3, [pc, #632]	@ (8000870 <update_servos+0x2d4>)
 80005f6:	edd3 7a00 	vldr	s15, [r3]
 80005fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005fe:	4b9c      	ldr	r3, [pc, #624]	@ (8000870 <update_servos+0x2d4>)
 8000600:	edc3 7a00 	vstr	s15, [r3]

    integral_x = CLAMP(integral_x, INTEGRAL_MIN, INTEGRAL_MAX);
 8000604:	4b99      	ldr	r3, [pc, #612]	@ (800086c <update_servos+0x2d0>)
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8000874 <update_servos+0x2d8>
 800060e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000616:	d501      	bpl.n	800061c <update_servos+0x80>
 8000618:	4b97      	ldr	r3, [pc, #604]	@ (8000878 <update_servos+0x2dc>)
 800061a:	e00d      	b.n	8000638 <update_servos+0x9c>
 800061c:	4b93      	ldr	r3, [pc, #588]	@ (800086c <update_servos+0x2d0>)
 800061e:	edd3 7a00 	vldr	s15, [r3]
 8000622:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800087c <update_servos+0x2e0>
 8000626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800062e:	dd01      	ble.n	8000634 <update_servos+0x98>
 8000630:	4b93      	ldr	r3, [pc, #588]	@ (8000880 <update_servos+0x2e4>)
 8000632:	e001      	b.n	8000638 <update_servos+0x9c>
 8000634:	4b8d      	ldr	r3, [pc, #564]	@ (800086c <update_servos+0x2d0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a8c      	ldr	r2, [pc, #560]	@ (800086c <update_servos+0x2d0>)
 800063a:	6013      	str	r3, [r2, #0]
    integral_y = CLAMP(integral_y, INTEGRAL_MIN, INTEGRAL_MAX);
 800063c:	4b8c      	ldr	r3, [pc, #560]	@ (8000870 <update_servos+0x2d4>)
 800063e:	edd3 7a00 	vldr	s15, [r3]
 8000642:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000874 <update_servos+0x2d8>
 8000646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800064e:	d501      	bpl.n	8000654 <update_servos+0xb8>
 8000650:	4b89      	ldr	r3, [pc, #548]	@ (8000878 <update_servos+0x2dc>)
 8000652:	e00d      	b.n	8000670 <update_servos+0xd4>
 8000654:	4b86      	ldr	r3, [pc, #536]	@ (8000870 <update_servos+0x2d4>)
 8000656:	edd3 7a00 	vldr	s15, [r3]
 800065a:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800087c <update_servos+0x2e0>
 800065e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000666:	dd01      	ble.n	800066c <update_servos+0xd0>
 8000668:	4b85      	ldr	r3, [pc, #532]	@ (8000880 <update_servos+0x2e4>)
 800066a:	e001      	b.n	8000670 <update_servos+0xd4>
 800066c:	4b80      	ldr	r3, [pc, #512]	@ (8000870 <update_servos+0x2d4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a7f      	ldr	r2, [pc, #508]	@ (8000870 <update_servos+0x2d4>)
 8000672:	6013      	str	r3, [r2, #0]

    // Derivative
    float derivative_x = (error_x - prev_error_x) / DT;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	ee07 3a90 	vmov	s15, r3
 800067a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800067e:	4b81      	ldr	r3, [pc, #516]	@ (8000884 <update_servos+0x2e8>)
 8000680:	edd3 7a00 	vldr	s15, [r3]
 8000684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000688:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8000868 <update_servos+0x2cc>
 800068c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000690:	edc7 7a03 	vstr	s15, [r7, #12]
    float derivative_y = (error_y - prev_error_y) / DT;
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	ee07 3a90 	vmov	s15, r3
 800069a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800069e:	4b7a      	ldr	r3, [pc, #488]	@ (8000888 <update_servos+0x2ec>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80006a8:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8000868 <update_servos+0x2cc>
 80006ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b0:	edc7 7a02 	vstr	s15, [r7, #8]

    // PID output
    float control_x = Kp_X * error_x + Ki_X * integral_x + Kd_X * derivative_x;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006be:	4b73      	ldr	r3, [pc, #460]	@ (800088c <update_servos+0x2f0>)
 80006c0:	edd3 7a00 	vldr	s15, [r3]
 80006c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006c8:	4b71      	ldr	r3, [pc, #452]	@ (8000890 <update_servos+0x2f4>)
 80006ca:	edd3 6a00 	vldr	s13, [r3]
 80006ce:	4b67      	ldr	r3, [pc, #412]	@ (800086c <update_servos+0x2d0>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006dc:	4b6d      	ldr	r3, [pc, #436]	@ (8000894 <update_servos+0x2f8>)
 80006de:	edd3 6a00 	vldr	s13, [r3]
 80006e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80006e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ee:	edc7 7a01 	vstr	s15, [r7, #4]
    float control_y = Kp_Y * error_y + Ki_Y * integral_y + Kd_Y * derivative_y;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	ee07 3a90 	vmov	s15, r3
 80006f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006fc:	4b66      	ldr	r3, [pc, #408]	@ (8000898 <update_servos+0x2fc>)
 80006fe:	edd3 7a00 	vldr	s15, [r3]
 8000702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000706:	4b65      	ldr	r3, [pc, #404]	@ (800089c <update_servos+0x300>)
 8000708:	edd3 6a00 	vldr	s13, [r3]
 800070c:	4b58      	ldr	r3, [pc, #352]	@ (8000870 <update_servos+0x2d4>)
 800070e:	edd3 7a00 	vldr	s15, [r3]
 8000712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000716:	ee37 7a27 	vadd.f32	s14, s14, s15
 800071a:	4b61      	ldr	r3, [pc, #388]	@ (80008a0 <update_servos+0x304>)
 800071c:	edd3 6a00 	vldr	s13, [r3]
 8000720:	edd7 7a02 	vldr	s15, [r7, #8]
 8000724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800072c:	edc7 7a00 	vstr	s15, [r7]

    control_x = CLAMP(control_x, CONTROL_MIN, CONTROL_MAX);
 8000730:	edd7 7a01 	vldr	s15, [r7, #4]
 8000734:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 8000738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000740:	d501      	bpl.n	8000746 <update_servos+0x1aa>
 8000742:	4b58      	ldr	r3, [pc, #352]	@ (80008a4 <update_servos+0x308>)
 8000744:	e00b      	b.n	800075e <update_servos+0x1c2>
 8000746:	edd7 7a01 	vldr	s15, [r7, #4]
 800074a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800074e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000756:	dd01      	ble.n	800075c <update_servos+0x1c0>
 8000758:	4b53      	ldr	r3, [pc, #332]	@ (80008a8 <update_servos+0x30c>)
 800075a:	e000      	b.n	800075e <update_servos+0x1c2>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	607b      	str	r3, [r7, #4]
    control_y = CLAMP(control_y, CONTROL_MIN, CONTROL_MAX);
 8000760:	edd7 7a00 	vldr	s15, [r7]
 8000764:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 8000768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000770:	d501      	bpl.n	8000776 <update_servos+0x1da>
 8000772:	4b4c      	ldr	r3, [pc, #304]	@ (80008a4 <update_servos+0x308>)
 8000774:	e00b      	b.n	800078e <update_servos+0x1f2>
 8000776:	edd7 7a00 	vldr	s15, [r7]
 800077a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800077e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000786:	dd01      	ble.n	800078c <update_servos+0x1f0>
 8000788:	4b47      	ldr	r3, [pc, #284]	@ (80008a8 <update_servos+0x30c>)
 800078a:	e000      	b.n	800078e <update_servos+0x1f2>
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	603b      	str	r3, [r7, #0]

    prev_error_x = error_x;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	ee07 3a90 	vmov	s15, r3
 8000796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800079a:	4b3a      	ldr	r3, [pc, #232]	@ (8000884 <update_servos+0x2e8>)
 800079c:	edc3 7a00 	vstr	s15, [r3]
    prev_error_y = error_y;
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007aa:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <update_servos+0x2ec>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]

    // Servo PWM hesapla
    pwm_pitch_left  = PWM_CENTER + (int)control_x;
 80007b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80007b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007b8:	ee17 3a90 	vmov	r3, s15
 80007bc:	334b      	adds	r3, #75	@ 0x4b
 80007be:	4a3b      	ldr	r2, [pc, #236]	@ (80008ac <update_servos+0x310>)
 80007c0:	6013      	str	r3, [r2, #0]
    pwm_pitch_right = PWM_CENTER - (int)control_x;
 80007c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80007c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ca:	ee17 3a90 	vmov	r3, s15
 80007ce:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 80007d2:	4a37      	ldr	r2, [pc, #220]	@ (80008b0 <update_servos+0x314>)
 80007d4:	6013      	str	r3, [r2, #0]
    pwm_roll_up     = PWM_CENTER + (int)control_y;
 80007d6:	edd7 7a00 	vldr	s15, [r7]
 80007da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007de:	ee17 3a90 	vmov	r3, s15
 80007e2:	334b      	adds	r3, #75	@ 0x4b
 80007e4:	4a33      	ldr	r2, [pc, #204]	@ (80008b4 <update_servos+0x318>)
 80007e6:	6013      	str	r3, [r2, #0]
    pwm_roll_down   = PWM_CENTER - (int)control_y;
 80007e8:	edd7 7a00 	vldr	s15, [r7]
 80007ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007f0:	ee17 3a90 	vmov	r3, s15
 80007f4:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 80007f8:	4a2f      	ldr	r2, [pc, #188]	@ (80008b8 <update_servos+0x31c>)
 80007fa:	6013      	str	r3, [r2, #0]

    pwm_pitch_left  = CLAMP(pwm_pitch_left,  PWM_MIN, PWM_MAX);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <update_servos+0x310>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b31      	cmp	r3, #49	@ 0x31
 8000802:	dd05      	ble.n	8000810 <update_servos+0x274>
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <update_servos+0x310>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b64      	cmp	r3, #100	@ 0x64
 800080a:	bfa8      	it	ge
 800080c:	2364      	movge	r3, #100	@ 0x64
 800080e:	e000      	b.n	8000812 <update_servos+0x276>
 8000810:	2332      	movs	r3, #50	@ 0x32
 8000812:	4a26      	ldr	r2, [pc, #152]	@ (80008ac <update_servos+0x310>)
 8000814:	6013      	str	r3, [r2, #0]
    pwm_pitch_right = CLAMP(pwm_pitch_right, PWM_MIN, PWM_MAX);
 8000816:	4b26      	ldr	r3, [pc, #152]	@ (80008b0 <update_servos+0x314>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b31      	cmp	r3, #49	@ 0x31
 800081c:	dd05      	ble.n	800082a <update_servos+0x28e>
 800081e:	4b24      	ldr	r3, [pc, #144]	@ (80008b0 <update_servos+0x314>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b64      	cmp	r3, #100	@ 0x64
 8000824:	bfa8      	it	ge
 8000826:	2364      	movge	r3, #100	@ 0x64
 8000828:	e000      	b.n	800082c <update_servos+0x290>
 800082a:	2332      	movs	r3, #50	@ 0x32
 800082c:	4a20      	ldr	r2, [pc, #128]	@ (80008b0 <update_servos+0x314>)
 800082e:	6013      	str	r3, [r2, #0]
    pwm_roll_up     = CLAMP(pwm_roll_up,     PWM_MIN, PWM_MAX);
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <update_servos+0x318>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b31      	cmp	r3, #49	@ 0x31
 8000836:	dd05      	ble.n	8000844 <update_servos+0x2a8>
 8000838:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <update_servos+0x318>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b64      	cmp	r3, #100	@ 0x64
 800083e:	bfa8      	it	ge
 8000840:	2364      	movge	r3, #100	@ 0x64
 8000842:	e000      	b.n	8000846 <update_servos+0x2aa>
 8000844:	2332      	movs	r3, #50	@ 0x32
 8000846:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <update_servos+0x318>)
 8000848:	6013      	str	r3, [r2, #0]
    pwm_roll_down   = CLAMP(pwm_roll_down,   PWM_MIN, PWM_MAX);
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <update_servos+0x31c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b31      	cmp	r3, #49	@ 0x31
 8000850:	dd34      	ble.n	80008bc <update_servos+0x320>
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <update_servos+0x31c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b64      	cmp	r3, #100	@ 0x64
 8000858:	bfa8      	it	ge
 800085a:	2364      	movge	r3, #100	@ 0x64
 800085c:	e02f      	b.n	80008be <update_servos+0x322>
 800085e:	bf00      	nop
 8000860:	20000190 	.word	0x20000190
 8000864:	20000194 	.word	0x20000194
 8000868:	3d4ccccd 	.word	0x3d4ccccd
 800086c:	200001a8 	.word	0x200001a8
 8000870:	200001b0 	.word	0x200001b0
 8000874:	c3fa0000 	.word	0xc3fa0000
 8000878:	c3fa0000 	.word	0xc3fa0000
 800087c:	43fa0000 	.word	0x43fa0000
 8000880:	43fa0000 	.word	0x43fa0000
 8000884:	200001ac 	.word	0x200001ac
 8000888:	200001b4 	.word	0x200001b4
 800088c:	20000000 	.word	0x20000000
 8000890:	20000098 	.word	0x20000098
 8000894:	2000009c 	.word	0x2000009c
 8000898:	20000004 	.word	0x20000004
 800089c:	200000a0 	.word	0x200000a0
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	c1c80000 	.word	0xc1c80000
 80008a8:	41c80000 	.word	0x41c80000
 80008ac:	20000198 	.word	0x20000198
 80008b0:	2000019c 	.word	0x2000019c
 80008b4:	200001a0 	.word	0x200001a0
 80008b8:	200001a4 	.word	0x200001a4
 80008bc:	2332      	movs	r3, #50	@ 0x32
 80008be:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <update_servos+0x35c>)
 80008c0:	6013      	str	r3, [r2, #0]

    // PWM çıkışı gönder
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_pitch_left);
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <update_servos+0x360>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <update_servos+0x364>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_pitch_right);
 80008cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <update_servos+0x368>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <update_servos+0x364>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_roll_up);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <update_servos+0x36c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <update_servos+0x364>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm_roll_down);
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <update_servos+0x35c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <update_servos+0x364>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80008ea:	bf00      	nop
 80008ec:	3724      	adds	r7, #36	@ 0x24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	200001a4 	.word	0x200001a4
 80008fc:	20000198 	.word	0x20000198
 8000900:	200000a8 	.word	0x200000a8
 8000904:	2000019c 	.word	0x2000019c
 8000908:	200001a0 	.word	0x200001a0

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fc3c 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f830 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 f95a 	bl	8000bd0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800091c:	f000 f896 	bl	8000a4c <MX_TIM2_Init>
  MX_UART4_Init();
 8000920:	f000 f92c 	bl	8000b7c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000924:	2100      	movs	r1, #0
 8000926:	4810      	ldr	r0, [pc, #64]	@ (8000968 <main+0x5c>)
 8000928:	f001 fd60 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800092c:	2104      	movs	r1, #4
 800092e:	480e      	ldr	r0, [pc, #56]	@ (8000968 <main+0x5c>)
 8000930:	f001 fd5c 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000934:	2108      	movs	r1, #8
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <main+0x5c>)
 8000938:	f001 fd58 	bl	80023ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800093c:	210c      	movs	r1, #12
 800093e:	480a      	ldr	r0, [pc, #40]	@ (8000968 <main+0x5c>)
 8000940:	f001 fd54 	bl	80023ec <HAL_TIM_PWM_Start>
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 75);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 120);

  HAL_UART_Receive_IT(&huart4, rx_data, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	4909      	ldr	r1, [pc, #36]	@ (800096c <main+0x60>)
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <main+0x64>)
 800094a:	f002 fd4a 	bl	80033e2 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_servos();
 800094e:	f7ff fe25 	bl	800059c <update_servos>
	  HAL_UART_Transmit(&huart4, tx_buffer, 10, 10);
 8000952:	230a      	movs	r3, #10
 8000954:	220a      	movs	r2, #10
 8000956:	4907      	ldr	r1, [pc, #28]	@ (8000974 <main+0x68>)
 8000958:	4805      	ldr	r0, [pc, #20]	@ (8000970 <main+0x64>)
 800095a:	f002 fcb7 	bl	80032cc <HAL_UART_Transmit>
	  HAL_Delay(50);
 800095e:	2032      	movs	r0, #50	@ 0x32
 8000960:	f000 fc86 	bl	8001270 <HAL_Delay>
	  update_servos();
 8000964:	bf00      	nop
 8000966:	e7f2      	b.n	800094e <main+0x42>
 8000968:	200000a8 	.word	0x200000a8
 800096c:	20000138 	.word	0x20000138
 8000970:	200000f0 	.word	0x200000f0
 8000974:	20000008 	.word	0x20000008

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	@ 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f003 fe33 	bl	80045f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	4a27      	ldr	r2, [pc, #156]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ac:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ec:	23a8      	movs	r3, #168	@ 0xa8
 80009ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 ffb5 	bl	800196c <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a08:	f000 f99e 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2105      	movs	r1, #5
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fa16 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a36:	f000 f987 	bl	8000d48 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	@ 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	@ 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 8000a84:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000a86:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000a92:	4b39      	ldr	r3, [pc, #228]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000a94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9a:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa6:	4834      	ldr	r0, [pc, #208]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000aa8:	f001 fbf8 	bl	800229c <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ab2:	f000 f949 	bl	8000d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482d      	ldr	r0, [pc, #180]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000ac4:	f001 ff0c 	bl	80028e0 <HAL_TIM_ConfigClockSource>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ace:	f000 f93b 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad2:	4829      	ldr	r0, [pc, #164]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000ad4:	f001 fc31 	bl	800233a <HAL_TIM_PWM_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000ade:	f000 f933 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	4619      	mov	r1, r3
 8000af0:	4821      	ldr	r0, [pc, #132]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000af2:	f002 fb0b 	bl	800310c <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000afc:	f000 f924 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b00:	2360      	movs	r3, #96	@ 0x60
 8000b02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4818      	ldr	r0, [pc, #96]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000b18:	f001 fe20 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b22:	f000 f911 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000b2e:	f001 fe15 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000b38:	f000 f906 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000b44:	f001 fe0a 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000b4e:	f000 f8fb 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	220c      	movs	r2, #12
 8000b56:	4619      	mov	r1, r3
 8000b58:	4807      	ldr	r0, [pc, #28]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000b5a:	f001 fdff 	bl	800275c <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000b64:	f000 f8f0 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM2_Init+0x12c>)
 8000b6a:	f000 f941 	bl	8000df0 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3738      	adds	r7, #56	@ 0x38
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000a8 	.word	0x200000a8

08000b7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <MX_UART4_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_UART4_Init+0x4c>)
 8000bb4:	f002 fb3a 	bl	800322c <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f8c3 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000f0 	.word	0x200000f0
 8000bcc:	40004c00 	.word	0x40004c00

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a26      	ldr	r2, [pc, #152]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_GPIO_Init+0xb8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <MX_GPIO_Init+0xbc>)
 8000c5e:	f000 fe6b 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c62:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_GPIO_Init+0xbc>)
 8000c7c:	f000 fcc0 	bl	8001600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	@ 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020c00 	.word	0x40020c00

08000c90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <HAL_UART_RxCpltCallback+0x98>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d13e      	bne.n	8000d20 <HAL_UART_RxCpltCallback+0x90>
        char c = rx_data[0];  // tek karakter alıyoruz
 8000ca2:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <HAL_UART_RxCpltCallback+0x9c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	73fb      	strb	r3, [r7, #15]

        if (c == '\n') {
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d125      	bne.n	8000cfa <HAL_UART_RxCpltCallback+0x6a>
            uart_buffer[uart_pos] = '\0';  // string sonu
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_UART_RxCpltCallback+0xa0>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <HAL_UART_RxCpltCallback+0xa4>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	5499      	strb	r1, [r3, r2]
            uart_pos = 0;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <HAL_UART_RxCpltCallback+0xa0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]

            // Şimdi buffer'ı parse edelim
            char *token;
            token = strtok(uart_buffer, ",");
 8000cc0:	491d      	ldr	r1, [pc, #116]	@ (8000d38 <HAL_UART_RxCpltCallback+0xa8>)
 8000cc2:	481c      	ldr	r0, [pc, #112]	@ (8000d34 <HAL_UART_RxCpltCallback+0xa4>)
 8000cc4:	f003 fc9e 	bl	8004604 <strtok>
 8000cc8:	60b8      	str	r0, [r7, #8]
            if (token != NULL) {
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d022      	beq.n	8000d16 <HAL_UART_RxCpltCallback+0x86>
                bbox_center_x = atoi(token);
 8000cd0:	68b8      	ldr	r0, [r7, #8]
 8000cd2:	f003 fb01 	bl	80042d8 <atoi>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <HAL_UART_RxCpltCallback+0xac>)
 8000cda:	6013      	str	r3, [r2, #0]
                token = strtok(NULL, ",");
 8000cdc:	4916      	ldr	r1, [pc, #88]	@ (8000d38 <HAL_UART_RxCpltCallback+0xa8>)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f003 fc90 	bl	8004604 <strtok>
 8000ce4:	60b8      	str	r0, [r7, #8]
                if (token != NULL) {
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d014      	beq.n	8000d16 <HAL_UART_RxCpltCallback+0x86>
                    bbox_center_y = atoi(token);
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f003 faf3 	bl	80042d8 <atoi>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <HAL_UART_RxCpltCallback+0xb0>)
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	e00d      	b.n	8000d16 <HAL_UART_RxCpltCallback+0x86>
            }

            // NOT: Raspberry'e geri bir şey göndermiyoruz, burası boş
        }
        else {
            if (uart_pos < RX_BUFFER_SIZE - 1) {
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_UART_RxCpltCallback+0xa0>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d00:	d809      	bhi.n	8000d16 <HAL_UART_RxCpltCallback+0x86>
                uart_buffer[uart_pos++] = c;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <HAL_UART_RxCpltCallback+0xa0>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	b2d1      	uxtb	r1, r2
 8000d0a:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <HAL_UART_RxCpltCallback+0xa0>)
 8000d0c:	7011      	strb	r1, [r2, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4a08      	ldr	r2, [pc, #32]	@ (8000d34 <HAL_UART_RxCpltCallback+0xa4>)
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	5453      	strb	r3, [r2, r1]
            }
        }

        // Sonraki karakter için interrupt’ı tekrar başlat
        HAL_UART_Receive_IT(&huart4, rx_data, 1);
 8000d16:	2201      	movs	r2, #1
 8000d18:	4904      	ldr	r1, [pc, #16]	@ (8000d2c <HAL_UART_RxCpltCallback+0x9c>)
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <HAL_UART_RxCpltCallback+0xb4>)
 8000d1c:	f002 fb61 	bl	80033e2 <HAL_UART_Receive_IT>
    }
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40004c00 	.word	0x40004c00
 8000d2c:	20000138 	.word	0x20000138
 8000d30:	2000018c 	.word	0x2000018c
 8000d34:	2000014c 	.word	0x2000014c
 8000d38:	080053f4 	.word	0x080053f4
 8000d3c:	20000190 	.word	0x20000190
 8000d40:	20000194 	.word	0x20000194
 8000d44:	200000f0 	.word	0x200000f0

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <Error_Handler+0x8>

08000d54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db4:	d115      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc6:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_TIM_Base_MspInit+0x48>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	201c      	movs	r0, #28
 8000dd8:	f000 fb49 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f000 fb62 	bl	80014a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e10:	d11d      	bne.n	8000e4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_TIM_MspPostInit+0x68>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <HAL_TIM_MspPostInit+0x68>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_TIM_MspPostInit+0x68>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e2e:	230f      	movs	r3, #15
 8000e30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <HAL_TIM_MspPostInit+0x6c>)
 8000e4a:	f000 fbd9 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_UART_MspInit+0x94>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d134      	bne.n	8000eec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <HAL_UART_MspInit+0x98>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef8 <HAL_UART_MspInit+0x98>)
 8000e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_UART_MspInit+0x98>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_UART_MspInit+0x98>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <HAL_UART_MspInit+0x98>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_UART_MspInit+0x98>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4809      	ldr	r0, [pc, #36]	@ (8000efc <HAL_UART_MspInit+0x9c>)
 8000ed8:	f000 fb92 	bl	8001600 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2034      	movs	r0, #52	@ 0x34
 8000ee2:	f000 fac4 	bl	800146e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ee6:	2034      	movs	r0, #52	@ 0x34
 8000ee8:	f000 fadd 	bl	80014a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	@ 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40004c00 	.word	0x40004c00
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020800 	.word	0x40020800

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f56:	f000 f96b 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f64:	4802      	ldr	r0, [pc, #8]	@ (8000f70 <TIM2_IRQHandler+0x10>)
 8000f66:	f001 fb09 	bl	800257c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000a8 	.word	0x200000a8

08000f74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <UART4_IRQHandler+0x10>)
 8000f7a:	f002 fa57 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000f0 	.word	0x200000f0

08000f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return 1;
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_kill>:

int _kill(int pid, int sig)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fa2:	f003 fbd1 	bl	8004748 <__errno>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2216      	movs	r2, #22
 8000faa:	601a      	str	r2, [r3, #0]
  return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_exit>:

void _exit (int status)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffe7 	bl	8000f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fca:	bf00      	nop
 8000fcc:	e7fd      	b.n	8000fca <_exit+0x12>

08000fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e00a      	b.n	8000ff6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe0:	f3af 8000 	nop.w
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	60ba      	str	r2, [r7, #8]
 8000fec:	b2ca      	uxtb	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf0      	blt.n	8000fe0 <_read+0x12>
  }

  return len;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e009      	b.n	800102e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	60ba      	str	r2, [r7, #8]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbf1      	blt.n	800101a <_write+0x12>
  }
  return len;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_close>:

int _close(int file)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001068:	605a      	str	r2, [r3, #4]
  return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_isatty>:

int _isatty(int file)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 fb36 	bl	8004748 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20020000 	.word	0x20020000
 8001108:	00000400 	.word	0x00000400
 800110c:	200001b8 	.word	0x200001b8
 8001110:	20000310 	.word	0x20000310

08001114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001170 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f003 faf5 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116a:	f7ff fbcf 	bl	800090c <main>
  bx  lr    
 800116e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800117c:	08005604 	.word	0x08005604
  ldr r2, =_sbss
 8001180:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001184:	2000030c 	.word	0x2000030c

08001188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <HAL_Init+0x40>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <HAL_Init+0x40>)
 80011a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_Init+0x40>)
 80011ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f94f 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fdc8 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023c00 	.word	0x40023c00

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f967 	bl	80014c2 <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f92f 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	@ (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000014 	.word	0x20000014
 8001228:	2000001c 	.word	0x2000001c
 800122c:	20000018 	.word	0x20000018

08001230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x20>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x24>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <HAL_IncTick+0x24>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000001c 	.word	0x2000001c
 8001254:	200001bc 	.word	0x200001bc

08001258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return uwTick;
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <HAL_GetTick+0x14>)
 800125e:	681b      	ldr	r3, [r3, #0]
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200001bc 	.word	0x200001bc

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff ffee 	bl	8001258 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffde 	bl	8001258 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000001c 	.word	0x2000001c

080012b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c8:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d4:	4013      	ands	r3, r2
 80012d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ea:	4a04      	ldr	r2, [pc, #16]	@ (80012fc <__NVIC_SetPriorityGrouping+0x44>)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	60d3      	str	r3, [r2, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001304:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <__NVIC_GetPriorityGrouping+0x18>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	f003 0307 	and.w	r3, r3, #7
}
 800130e:	4618      	mov	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db0b      	blt.n	8001346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f003 021f 	and.w	r2, r3, #31
 8001334:	4907      	ldr	r1, [pc, #28]	@ (8001354 <__NVIC_EnableIRQ+0x38>)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	095b      	lsrs	r3, r3, #5
 800133c:	2001      	movs	r0, #1
 800133e:	fa00 f202 	lsl.w	r2, r0, r2
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100

08001358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	6039      	str	r1, [r7, #0]
 8001362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	db0a      	blt.n	8001382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b2da      	uxtb	r2, r3
 8001370:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <__NVIC_SetPriority+0x4c>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	440b      	add	r3, r1
 800137c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001380:	e00a      	b.n	8001398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <__NVIC_SetPriority+0x50>)
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	3b04      	subs	r3, #4
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	440b      	add	r3, r1
 8001396:	761a      	strb	r2, [r3, #24]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f1c3 0307 	rsb	r3, r3, #7
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	bf28      	it	cs
 80013ca:	2304      	movcs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3304      	adds	r3, #4
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d902      	bls.n	80013dc <NVIC_EncodePriority+0x30>
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3b03      	subs	r3, #3
 80013da:	e000      	b.n	80013de <NVIC_EncodePriority+0x32>
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	401a      	ands	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	f04f 31ff 	mov.w	r1, #4294967295
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	43d9      	mvns	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	4313      	orrs	r3, r2
         );
}
 8001406:	4618      	mov	r0, r3
 8001408:	3724      	adds	r7, #36	@ 0x24
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff8e 	bl	8001358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff29 	bl	80012b8 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff3e 	bl	8001300 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff8e 	bl	80013ac <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5d 	bl	8001358 <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff31 	bl	800131c <__NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffa2 	bl	8001414 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff feb6 	bl	8001258 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d008      	beq.n	800150c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e052      	b.n	80015b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0216 	bic.w	r2, r2, #22
 800151a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800152a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <HAL_DMA_Abort+0x62>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0208 	bic.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155c:	e013      	b.n	8001586 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800155e:	f7ff fe7b 	bl	8001258 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b05      	cmp	r3, #5
 800156a:	d90c      	bls.n	8001586 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2220      	movs	r2, #32
 8001570:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e015      	b.n	80015b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e4      	bne.n	800155e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	223f      	movs	r2, #63	@ 0x3f
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d004      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2280      	movs	r2, #128	@ 0x80
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e00c      	b.n	80015f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2205      	movs	r2, #5
 80015dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0201 	bic.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e16b      	b.n	80018f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 815a 	bne.w	80018ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d005      	beq.n	8001652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164e:	2b02      	cmp	r3, #2
 8001650:	d130      	bne.n	80016b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 0201 	and.w	r2, r3, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d017      	beq.n	80016f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80b4 	beq.w	80018ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b60      	ldr	r3, [pc, #384]	@ (800190c <HAL_GPIO_Init+0x30c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	4a5f      	ldr	r2, [pc, #380]	@ (800190c <HAL_GPIO_Init+0x30c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001794:	6453      	str	r3, [r2, #68]	@ 0x44
 8001796:	4b5d      	ldr	r3, [pc, #372]	@ (800190c <HAL_GPIO_Init+0x30c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001910 <HAL_GPIO_Init+0x310>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a52      	ldr	r2, [pc, #328]	@ (8001914 <HAL_GPIO_Init+0x314>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x226>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a51      	ldr	r2, [pc, #324]	@ (8001918 <HAL_GPIO_Init+0x318>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x222>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a50      	ldr	r2, [pc, #320]	@ (800191c <HAL_GPIO_Init+0x31c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x21e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001920 <HAL_GPIO_Init+0x320>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001924 <HAL_GPIO_Init+0x324>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x216>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001928 <HAL_GPIO_Init+0x328>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x212>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	@ (800192c <HAL_GPIO_Init+0x32c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4b      	ldr	r2, [pc, #300]	@ (8001930 <HAL_GPIO_Init+0x330>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x20a>
 8001806:	2307      	movs	r3, #7
 8001808:	e00e      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180a:	2308      	movs	r3, #8
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180e:	2306      	movs	r3, #6
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	@ (8001910 <HAL_GPIO_Init+0x310>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_GPIO_Init+0x334>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186a:	4a32      	ldr	r2, [pc, #200]	@ (8001934 <HAL_GPIO_Init+0x334>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001870:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <HAL_GPIO_Init+0x334>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001894:	4a27      	ldr	r2, [pc, #156]	@ (8001934 <HAL_GPIO_Init+0x334>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189a:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <HAL_GPIO_Init+0x334>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018be:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <HAL_GPIO_Init+0x334>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_GPIO_Init+0x334>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <HAL_GPIO_Init+0x334>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f ae90 	bls.w	800161c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	@ 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40021400 	.word	0x40021400
 800192c:	40021800 	.word	0x40021800
 8001930:	40021c00 	.word	0x40021c00
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e267      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d075      	beq.n	8001a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800198a:	4b88      	ldr	r3, [pc, #544]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d00c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b85      	ldr	r3, [pc, #532]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b82      	ldr	r3, [pc, #520]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b7e      	ldr	r3, [pc, #504]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d05b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d157      	bne.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e242      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x74>
 80019d2:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b70      	ldr	r3, [pc, #448]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6f      	ldr	r2, [pc, #444]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b6d      	ldr	r3, [pc, #436]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a6c      	ldr	r2, [pc, #432]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 8001a04:	4b69      	ldr	r3, [pc, #420]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a68      	ldr	r2, [pc, #416]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b66      	ldr	r3, [pc, #408]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a65      	ldr	r2, [pc, #404]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc18 	bl	8001258 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fc14 	bl	8001258 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e207      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fc04 	bl	8001258 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff fc00 	bl	8001258 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1f3      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	4b51      	ldr	r3, [pc, #324]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a82:	4b4a      	ldr	r3, [pc, #296]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b44      	ldr	r3, [pc, #272]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1c7      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4937      	ldr	r1, [pc, #220]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b34      	ldr	r3, [pc, #208]	@ (8001bb0 <HAL_RCC_OscConfig+0x244>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fbb9 	bl	8001258 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fbb5 	bl	8001258 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1a8      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4925      	ldr	r1, [pc, #148]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_RCC_OscConfig+0x244>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb98 	bl	8001258 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fb94 	bl	8001258 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e187      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d036      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_RCC_OscConfig+0x248>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb78 	bl	8001258 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fb74 	bl	8001258 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e167      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_OscConfig+0x240>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x200>
 8001b8a:	e01b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x248>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb61 	bl	8001258 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e00e      	b.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fb5d 	bl	8001258 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d907      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e150      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	42470000 	.word	0x42470000
 8001bb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb8:	4b88      	ldr	r3, [pc, #544]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ea      	bne.n	8001b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8097 	beq.w	8001d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd6:	4b81      	ldr	r3, [pc, #516]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10f      	bne.n	8001c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b7d      	ldr	r3, [pc, #500]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	4a7c      	ldr	r2, [pc, #496]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf2:	4b7a      	ldr	r3, [pc, #488]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b77      	ldr	r3, [pc, #476]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b74      	ldr	r3, [pc, #464]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a73      	ldr	r2, [pc, #460]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fb1d 	bl	8001258 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff fb19 	bl	8001258 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e10c      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b6a      	ldr	r3, [pc, #424]	@ (8001de0 <HAL_RCC_OscConfig+0x474>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2ea>
 8001c48:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4c:	4a63      	ldr	r2, [pc, #396]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x324>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x30c>
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	4a5e      	ldr	r2, [pc, #376]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0x324>
 8001c78:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7c:	4a57      	ldr	r2, [pc, #348]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c84:	4b55      	ldr	r3, [pc, #340]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a54      	ldr	r2, [pc, #336]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d015      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff fade 	bl	8001258 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fada 	bl	8001258 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0cb      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb6:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ee      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x334>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fac8 	bl	8001258 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fac4 	bl	8001258 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e0b5      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ee      	bne.n	8001ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	4a38      	ldr	r2, [pc, #224]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a1 	beq.w	8001e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0a:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d05c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d141      	bne.n	8001da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fa98 	bl	8001258 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2c:	f7ff fa94 	bl	8001258 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e087      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	4b27      	ldr	r3, [pc, #156]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d58:	019b      	lsls	r3, r3, #6
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	3b01      	subs	r3, #1
 8001d64:	041b      	lsls	r3, r3, #16
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	491b      	ldr	r1, [pc, #108]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fa6d 	bl	8001258 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff fa69 	bl	8001258 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e05c      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x416>
 8001da0:	e054      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_RCC_OscConfig+0x478>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fa56 	bl	8001258 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff fa52 	bl	8001258 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e045      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_OscConfig+0x470>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x444>
 8001dce:	e03d      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e038      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d028      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d121      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11a      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e18:	4013      	ands	r3, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d111      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	3b01      	subs	r3, #1
 8001e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0cc      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d90c      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b63      	ldr	r3, [pc, #396]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0b8      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001eba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec8:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	494d      	ldr	r1, [pc, #308]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d044      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d119      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e067      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b37      	ldr	r3, [pc, #220]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4934      	ldr	r1, [pc, #208]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff f984 	bl	8001258 <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7ff f980 	bl	8001258 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e04f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d20c      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e032      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4916      	ldr	r1, [pc, #88]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fce:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	490e      	ldr	r1, [pc, #56]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe2:	f000 f821 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	490a      	ldr	r1, [pc, #40]	@ (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	@ (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f8e4 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00
 8002018:	40023800 	.word	0x40023800
 800201c:	080053f8 	.word	0x080053f8
 8002020:	20000014 	.word	0x20000014
 8002024:	20000018 	.word	0x20000018

08002028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800202c:	b094      	sub	sp, #80	@ 0x50
 800202e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002034:	2300      	movs	r3, #0
 8002036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002040:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d00d      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x40>
 800204c:	2b08      	cmp	r3, #8
 800204e:	f200 80e1 	bhi.w	8002214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x34>
 8002056:	2b04      	cmp	r3, #4
 8002058:	d003      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x3a>
 800205a:	e0db      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b73      	ldr	r3, [pc, #460]	@ (800222c <HAL_RCC_GetSysClockFreq+0x204>)
 800205e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002060:	e0db      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002062:	4b73      	ldr	r3, [pc, #460]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x208>)
 8002064:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002066:	e0d8      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002068:	4b6f      	ldr	r3, [pc, #444]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002070:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002072:	4b6d      	ldr	r3, [pc, #436]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d063      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b6a      	ldr	r3, [pc, #424]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	2200      	movs	r2, #0
 8002086:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002088:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800208a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002090:	633b      	str	r3, [r7, #48]	@ 0x30
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
 8002096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800209a:	4622      	mov	r2, r4
 800209c:	462b      	mov	r3, r5
 800209e:	f04f 0000 	mov.w	r0, #0
 80020a2:	f04f 0100 	mov.w	r1, #0
 80020a6:	0159      	lsls	r1, r3, #5
 80020a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ac:	0150      	lsls	r0, r2, #5
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4621      	mov	r1, r4
 80020b4:	1a51      	subs	r1, r2, r1
 80020b6:	6139      	str	r1, [r7, #16]
 80020b8:	4629      	mov	r1, r5
 80020ba:	eb63 0301 	sbc.w	r3, r3, r1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020cc:	4659      	mov	r1, fp
 80020ce:	018b      	lsls	r3, r1, #6
 80020d0:	4651      	mov	r1, sl
 80020d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d6:	4651      	mov	r1, sl
 80020d8:	018a      	lsls	r2, r1, #6
 80020da:	4651      	mov	r1, sl
 80020dc:	ebb2 0801 	subs.w	r8, r2, r1
 80020e0:	4659      	mov	r1, fp
 80020e2:	eb63 0901 	sbc.w	r9, r3, r1
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020fa:	4690      	mov	r8, r2
 80020fc:	4699      	mov	r9, r3
 80020fe:	4623      	mov	r3, r4
 8002100:	eb18 0303 	adds.w	r3, r8, r3
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	462b      	mov	r3, r5
 8002108:	eb49 0303 	adc.w	r3, r9, r3
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800211a:	4629      	mov	r1, r5
 800211c:	024b      	lsls	r3, r1, #9
 800211e:	4621      	mov	r1, r4
 8002120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002124:	4621      	mov	r1, r4
 8002126:	024a      	lsls	r2, r1, #9
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800212e:	2200      	movs	r2, #0
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002132:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002138:	f7fe f89a 	bl	8000270 <__aeabi_uldivmod>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4613      	mov	r3, r2
 8002142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002144:	e058      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	2200      	movs	r2, #0
 800214e:	4618      	mov	r0, r3
 8002150:	4611      	mov	r1, r2
 8002152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
 800215c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	f04f 0000 	mov.w	r0, #0
 8002168:	f04f 0100 	mov.w	r1, #0
 800216c:	0159      	lsls	r1, r3, #5
 800216e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002172:	0150      	lsls	r0, r2, #5
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4641      	mov	r1, r8
 800217a:	ebb2 0a01 	subs.w	sl, r2, r1
 800217e:	4649      	mov	r1, r9
 8002180:	eb63 0b01 	sbc.w	fp, r3, r1
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002198:	ebb2 040a 	subs.w	r4, r2, sl
 800219c:	eb63 050b 	sbc.w	r5, r3, fp
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	00eb      	lsls	r3, r5, #3
 80021aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ae:	00e2      	lsls	r2, r4, #3
 80021b0:	4614      	mov	r4, r2
 80021b2:	461d      	mov	r5, r3
 80021b4:	4643      	mov	r3, r8
 80021b6:	18e3      	adds	r3, r4, r3
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	464b      	mov	r3, r9
 80021bc:	eb45 0303 	adc.w	r3, r5, r3
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ce:	4629      	mov	r1, r5
 80021d0:	028b      	lsls	r3, r1, #10
 80021d2:	4621      	mov	r1, r4
 80021d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d8:	4621      	mov	r1, r4
 80021da:	028a      	lsls	r2, r1, #10
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e2:	2200      	movs	r2, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	61fa      	str	r2, [r7, #28]
 80021e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ec:	f7fe f840 	bl	8000270 <__aeabi_uldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4613      	mov	r3, r2
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x200>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002208:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800220a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002212:	e002      	b.n	800221a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_RCC_GetSysClockFreq+0x204>)
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800221a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800221c:	4618      	mov	r0, r3
 800221e:	3750      	adds	r7, #80	@ 0x50
 8002220:	46bd      	mov	sp, r7
 8002222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	00f42400 	.word	0x00f42400
 8002230:	007a1200 	.word	0x007a1200

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <HAL_RCC_GetHCLKFreq+0x14>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000014 	.word	0x20000014

0800224c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002250:	f7ff fff0 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0a9b      	lsrs	r3, r3, #10
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4903      	ldr	r1, [pc, #12]	@ (8002270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	08005408 	.word	0x08005408

08002274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002278:	f7ff ffdc 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0b5b      	lsrs	r3, r3, #13
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	@ (8002298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	08005408 	.word	0x08005408

0800229c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e041      	b.n	8002332 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fd6e 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f000 fbfa 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e041      	b.n	80023d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d106      	bne.n	8002366 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f839 	bl	80023d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4610      	mov	r0, r2
 800237a:	f000 fbab 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_TIM_PWM_Start+0x24>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e022      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b04      	cmp	r3, #4
 8002414:	d109      	bne.n	800242a <HAL_TIM_PWM_Start+0x3e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	e015      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d109      	bne.n	8002444 <HAL_TIM_PWM_Start+0x58>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e008      	b.n	8002456 <HAL_TIM_PWM_Start+0x6a>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07c      	b.n	8002558 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0x82>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246c:	e013      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d104      	bne.n	800247e <HAL_TIM_PWM_Start+0x92>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800247c:	e00b      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d104      	bne.n	800248e <HAL_TIM_PWM_Start+0xa2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800248c:	e003      	b.n	8002496 <HAL_TIM_PWM_Start+0xaa>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fe0e 	bl	80030c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002560 <HAL_TIM_PWM_Start+0x174>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_TIM_PWM_Start+0xcc>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002564 <HAL_TIM_PWM_Start+0x178>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_PWM_Start+0xd0>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_TIM_PWM_Start+0xd2>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a22      	ldr	r2, [pc, #136]	@ (8002560 <HAL_TIM_PWM_Start+0x174>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d022      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e4:	d01d      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002568 <HAL_TIM_PWM_Start+0x17c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d018      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_TIM_PWM_Start+0x180>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002570 <HAL_TIM_PWM_Start+0x184>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00e      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a16      	ldr	r2, [pc, #88]	@ (8002564 <HAL_TIM_PWM_Start+0x178>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <HAL_TIM_PWM_Start+0x188>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d004      	beq.n	8002522 <HAL_TIM_PWM_Start+0x136>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	@ (8002578 <HAL_TIM_PWM_Start+0x18c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d111      	bne.n	8002546 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b06      	cmp	r3, #6
 8002532:	d010      	beq.n	8002556 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002544:	e007      	b.n	8002556 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40010000 	.word	0x40010000
 8002564:	40010400 	.word	0x40010400
 8002568:	40000400 	.word	0x40000400
 800256c:	40000800 	.word	0x40000800
 8002570:	40000c00 	.word	0x40000c00
 8002574:	40014000 	.word	0x40014000
 8002578:	40001800 	.word	0x40001800

0800257c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d020      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0202 	mvn.w	r2, #2
 80025b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa65 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa57 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa68 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d020      	beq.n	800262c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01b      	beq.n	800262c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0204 	mvn.w	r2, #4
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2202      	movs	r2, #2
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa3f 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa31 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fa42 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d020      	beq.n	8002678 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01b      	beq.n	8002678 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0208 	mvn.w	r2, #8
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2204      	movs	r2, #4
 800264e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa19 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa0b 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa1c 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d020      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0210 	mvn.w	r2, #16
 8002694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2208      	movs	r2, #8
 800269a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f9f3 	bl	8002a96 <HAL_TIM_IC_CaptureCallback>
 80026b0:	e005      	b.n	80026be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9e5 	bl	8002a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f9f6 	bl	8002aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0201 	mvn.w	r2, #1
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f9c3 	bl	8002a6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 fd86 	bl	8003218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f9c7 	bl	8002abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00c      	beq.n	8002754 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d007      	beq.n	8002754 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0220 	mvn.w	r2, #32
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fd58 	bl	8003204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002776:	2302      	movs	r3, #2
 8002778:	e0ae      	b.n	80028d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	f200 809f 	bhi.w	80028c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027c5 	.word	0x080027c5
 8002794:	080028c9 	.word	0x080028c9
 8002798:	080028c9 	.word	0x080028c9
 800279c:	080028c9 	.word	0x080028c9
 80027a0:	08002805 	.word	0x08002805
 80027a4:	080028c9 	.word	0x080028c9
 80027a8:	080028c9 	.word	0x080028c9
 80027ac:	080028c9 	.word	0x080028c9
 80027b0:	08002847 	.word	0x08002847
 80027b4:	080028c9 	.word	0x080028c9
 80027b8:	080028c9 	.word	0x080028c9
 80027bc:	080028c9 	.word	0x080028c9
 80027c0:	08002887 	.word	0x08002887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fa2e 	bl	8002c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699a      	ldr	r2, [r3, #24]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0204 	bic.w	r2, r2, #4
 80027ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6999      	ldr	r1, [r3, #24]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	619a      	str	r2, [r3, #24]
      break;
 8002802:	e064      	b.n	80028ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 fa7e 	bl	8002d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800282e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6999      	ldr	r1, [r3, #24]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	021a      	lsls	r2, r3, #8
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	619a      	str	r2, [r3, #24]
      break;
 8002844:	e043      	b.n	80028ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fad3 	bl	8002df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0208 	orr.w	r2, r2, #8
 8002860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69da      	ldr	r2, [r3, #28]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0204 	bic.w	r2, r2, #4
 8002870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	69d9      	ldr	r1, [r3, #28]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	61da      	str	r2, [r3, #28]
      break;
 8002884:	e023      	b.n	80028ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fb27 	bl	8002ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69d9      	ldr	r1, [r3, #28]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	021a      	lsls	r2, r3, #8
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	61da      	str	r2, [r3, #28]
      break;
 80028c6:	e002      	b.n	80028ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_TIM_ConfigClockSource+0x1c>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0b4      	b.n	8002a66 <HAL_TIM_ConfigClockSource+0x186>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800291a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002934:	d03e      	beq.n	80029b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293a:	f200 8087 	bhi.w	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800293e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002942:	f000 8086 	beq.w	8002a52 <HAL_TIM_ConfigClockSource+0x172>
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294a:	d87f      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800294c:	2b70      	cmp	r3, #112	@ 0x70
 800294e:	d01a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0xa6>
 8002950:	2b70      	cmp	r3, #112	@ 0x70
 8002952:	d87b      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 8002954:	2b60      	cmp	r3, #96	@ 0x60
 8002956:	d050      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0x11a>
 8002958:	2b60      	cmp	r3, #96	@ 0x60
 800295a:	d877      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800295c:	2b50      	cmp	r3, #80	@ 0x50
 800295e:	d03c      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xfa>
 8002960:	2b50      	cmp	r3, #80	@ 0x50
 8002962:	d873      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 8002964:	2b40      	cmp	r3, #64	@ 0x40
 8002966:	d058      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x13a>
 8002968:	2b40      	cmp	r3, #64	@ 0x40
 800296a:	d86f      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b30      	cmp	r3, #48	@ 0x30
 800296e:	d064      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	2b30      	cmp	r3, #48	@ 0x30
 8002972:	d86b      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b20      	cmp	r3, #32
 8002976:	d060      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002978:	2b20      	cmp	r3, #32
 800297a:	d867      	bhi.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05c      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002980:	2b10      	cmp	r3, #16
 8002982:	d05a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x15a>
 8002984:	e062      	b.n	8002a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002996:	f000 fb73 	bl	8003080 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	609a      	str	r2, [r3, #8]
      break;
 80029b2:	e04f      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029c4:	f000 fb5c 	bl	8003080 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029d6:	609a      	str	r2, [r3, #8]
      break;
 80029d8:	e03c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	461a      	mov	r2, r3
 80029e8:	f000 fad0 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2150      	movs	r1, #80	@ 0x50
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fb29 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 80029f8:	e02c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 faef 	bl	8002fea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2160      	movs	r1, #96	@ 0x60
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fb19 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002a18:	e01c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 fab0 	bl	8002f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2140      	movs	r1, #64	@ 0x40
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fb09 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002a38:	e00c      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f000 fb00 	bl	800304a <TIM_ITRx_SetConfig>
      break;
 8002a4a:	e003      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a50:	e000      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a46      	ldr	r2, [pc, #280]	@ (8002c00 <TIM_Base_SetConfig+0x12c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d013      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af2:	d00f      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a43      	ldr	r2, [pc, #268]	@ (8002c04 <TIM_Base_SetConfig+0x130>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d00b      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a42      	ldr	r2, [pc, #264]	@ (8002c08 <TIM_Base_SetConfig+0x134>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d007      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a41      	ldr	r2, [pc, #260]	@ (8002c0c <TIM_Base_SetConfig+0x138>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_Base_SetConfig+0x40>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a40      	ldr	r2, [pc, #256]	@ (8002c10 <TIM_Base_SetConfig+0x13c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d108      	bne.n	8002b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <TIM_Base_SetConfig+0x12c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d02b      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b34:	d027      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a32      	ldr	r2, [pc, #200]	@ (8002c04 <TIM_Base_SetConfig+0x130>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d023      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a31      	ldr	r2, [pc, #196]	@ (8002c08 <TIM_Base_SetConfig+0x134>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a30      	ldr	r2, [pc, #192]	@ (8002c0c <TIM_Base_SetConfig+0x138>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01b      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <TIM_Base_SetConfig+0x13c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d017      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2e      	ldr	r2, [pc, #184]	@ (8002c14 <TIM_Base_SetConfig+0x140>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2d      	ldr	r2, [pc, #180]	@ (8002c18 <TIM_Base_SetConfig+0x144>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00f      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2c      	ldr	r2, [pc, #176]	@ (8002c1c <TIM_Base_SetConfig+0x148>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2b      	ldr	r2, [pc, #172]	@ (8002c20 <TIM_Base_SetConfig+0x14c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2a      	ldr	r2, [pc, #168]	@ (8002c24 <TIM_Base_SetConfig+0x150>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a29      	ldr	r2, [pc, #164]	@ (8002c28 <TIM_Base_SetConfig+0x154>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a10      	ldr	r2, [pc, #64]	@ (8002c00 <TIM_Base_SetConfig+0x12c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_Base_SetConfig+0xf8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <TIM_Base_SetConfig+0x13c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d103      	bne.n	8002bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f023 0201 	bic.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	611a      	str	r2, [r3, #16]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40010400 	.word	0x40010400
 8002c14:	40014000 	.word	0x40014000
 8002c18:	40014400 	.word	0x40014400
 8002c1c:	40014800 	.word	0x40014800
 8002c20:	40001800 	.word	0x40001800
 8002c24:	40001c00 	.word	0x40001c00
 8002c28:	40002000 	.word	0x40002000

08002c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f023 0201 	bic.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f023 0302 	bic.w	r3, r3, #2
 8002c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a20      	ldr	r2, [pc, #128]	@ (8002d04 <TIM_OC1_SetConfig+0xd8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_OC1_SetConfig+0x64>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <TIM_OC1_SetConfig+0xdc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10c      	bne.n	8002caa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0308 	bic.w	r3, r3, #8
 8002c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f023 0304 	bic.w	r3, r3, #4
 8002ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a15      	ldr	r2, [pc, #84]	@ (8002d04 <TIM_OC1_SetConfig+0xd8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d003      	beq.n	8002cba <TIM_OC1_SetConfig+0x8e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <TIM_OC1_SetConfig+0xdc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d111      	bne.n	8002cde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	bf00      	nop
 8002cfa:	371c      	adds	r7, #28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010400 	.word	0x40010400

08002d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	f023 0210 	bic.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0320 	bic.w	r3, r3, #32
 8002d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a22      	ldr	r2, [pc, #136]	@ (8002df0 <TIM_OC2_SetConfig+0xe4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_OC2_SetConfig+0x68>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <TIM_OC2_SetConfig+0xe8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10d      	bne.n	8002d90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <TIM_OC2_SetConfig+0xe4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d003      	beq.n	8002da0 <TIM_OC2_SetConfig+0x94>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <TIM_OC2_SetConfig+0xe8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d113      	bne.n	8002dc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	621a      	str	r2, [r3, #32]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40010400 	.word	0x40010400

08002df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a21      	ldr	r2, [pc, #132]	@ (8002ed8 <TIM_OC3_SetConfig+0xe0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_OC3_SetConfig+0x66>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a20      	ldr	r2, [pc, #128]	@ (8002edc <TIM_OC3_SetConfig+0xe4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10d      	bne.n	8002e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	@ (8002ed8 <TIM_OC3_SetConfig+0xe0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d003      	beq.n	8002e8a <TIM_OC3_SetConfig+0x92>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a15      	ldr	r2, [pc, #84]	@ (8002edc <TIM_OC3_SetConfig+0xe4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d113      	bne.n	8002eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	621a      	str	r2, [r3, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010400 	.word	0x40010400

08002ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	@ (8002f84 <TIM_OC4_SetConfig+0xa4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d003      	beq.n	8002f48 <TIM_OC4_SetConfig+0x68>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <TIM_OC4_SetConfig+0xa8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40010000 	.word	0x40010000
 8002f88:	40010400 	.word	0x40010400

08002f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f023 030a 	bic.w	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	621a      	str	r2, [r3, #32]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b087      	sub	sp, #28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f023 0210 	bic.w	r2, r3, #16
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003014:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	031b      	lsls	r3, r3, #12
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003026:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	621a      	str	r2, [r3, #32]
}
 800303e:	bf00      	nop
 8003040:	371c      	adds	r7, #28
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	f043 0307 	orr.w	r3, r3, #7
 800306c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	609a      	str	r2, [r3, #8]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800309a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2201      	movs	r2, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a1a      	ldr	r2, [r3, #32]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	401a      	ands	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003120:	2302      	movs	r3, #2
 8003122:	e05a      	b.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a21      	ldr	r2, [pc, #132]	@ (80031e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003170:	d01d      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1b      	ldr	r2, [pc, #108]	@ (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1a      	ldr	r2, [pc, #104]	@ (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a15      	ldr	r2, [pc, #84]	@ (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10c      	bne.n	80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40010400 	.word	0x40010400
 80031fc:	40014000 	.word	0x40014000
 8003200:	40001800 	.word	0x40001800

08003204 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e042      	b.n	80032c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fe04 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	@ 0x24
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800326e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fdbd 	bl	8003df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	@ 0x28
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d175      	bne.n	80033d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Transmit+0x2c>
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e06e      	b.n	80033da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	@ 0x21
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330a:	f7fd ffa5 	bl	8001258 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x6c>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003340:	e02e      	b.n	80033a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fb1f 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e03a      	b.n	80033da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3302      	adds	r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e007      	b.n	8003392 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	3301      	adds	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1cb      	bne.n	8003342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2140      	movs	r1, #64	@ 0x40
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 faeb 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e006      	b.n	80033da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d112      	bne.n	8003422 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Receive_IT+0x26>
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e00b      	b.n	8003424 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	461a      	mov	r2, r3
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fb12 	bl	8003a42 <UART_Start_Receive_IT>
 800341e:	4603      	mov	r3, r0
 8003420:	e000      	b.n	8003424 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0ba      	sub	sp, #232	@ 0xe8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800346a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10f      	bne.n	8003492 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_UART_IRQHandler+0x66>
 800347e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fbf2 	bl	8003c74 <UART_Receive_IT>
      return;
 8003490:	e25b      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80de 	beq.w	8003658 <HAL_UART_IRQHandler+0x22c>
 800349c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80d1 	beq.w	8003658 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_UART_IRQHandler+0xae>
 80034c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f043 0201 	orr.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_UART_IRQHandler+0xd2>
 80034e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_UART_IRQHandler+0xf6>
 800350a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d011      	beq.n	8003552 <HAL_UART_IRQHandler+0x126>
 800352e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800353a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f043 0208 	orr.w	r2, r3, #8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 81f2 	beq.w	8003940 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800355c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_UART_IRQHandler+0x14e>
 8003568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb7d 	bl	8003c74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b40      	cmp	r3, #64	@ 0x40
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_UART_IRQHandler+0x17a>
 800359e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d04f      	beq.n	8003646 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa85 	bl	8003ab6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	d141      	bne.n	800363e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035c8:	e853 3f00 	ldrex	r3, [r3]
 80035cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80035ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1d9      	bne.n	80035ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d013      	beq.n	8003636 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003612:	4a7e      	ldr	r2, [pc, #504]	@ (800380c <HAL_UART_IRQHandler+0x3e0>)
 8003614:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd ffcd 	bl	80015ba <HAL_DMA_Abort_IT>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	e00e      	b.n	8003654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f994 	bl	8003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363c:	e00a      	b.n	8003654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f990 	bl	8003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e006      	b.n	8003654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f98c 	bl	8003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003652:	e175      	b.n	8003940 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	bf00      	nop
    return;
 8003656:	e173      	b.n	8003940 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 814f 	bne.w	8003900 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8148 	beq.w	8003900 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8141 	beq.w	8003900 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369e:	2b40      	cmp	r3, #64	@ 0x40
 80036a0:	f040 80b6 	bne.w	8003810 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8145 	beq.w	8003944 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036c2:	429a      	cmp	r2, r3
 80036c4:	f080 813e 	bcs.w	8003944 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036da:	f000 8088 	beq.w	80037ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800370a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800370e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003712:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003716:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1d9      	bne.n	80036de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800373a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800374e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003752:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003756:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e1      	bne.n	800372a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3314      	adds	r3, #20
 800376c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800377c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3314      	adds	r3, #20
 8003786:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800378a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800378c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003790:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003798:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e3      	bne.n	8003766 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80037d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e3      	bne.n	80037ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fd fe76 	bl	80014da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	b29b      	uxth	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f8b7 	bl	8003978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380a:	e09b      	b.n	8003944 <HAL_UART_IRQHandler+0x518>
 800380c:	08003b7d 	.word	0x08003b7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003818:	b29b      	uxth	r3, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 808e 	beq.w	8003948 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800382c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8089 	beq.w	8003948 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800384c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	330c      	adds	r3, #12
 8003856:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800385a:	647a      	str	r2, [r7, #68]	@ 0x44
 800385c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e3      	bne.n	8003836 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	623b      	str	r3, [r7, #32]
   return(result);
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3314      	adds	r3, #20
 800388e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003892:	633a      	str	r2, [r7, #48]	@ 0x30
 8003894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e3      	bne.n	800386e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0310 	bic.w	r3, r3, #16
 80038ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	69b9      	ldr	r1, [r7, #24]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	617b      	str	r3, [r7, #20]
   return(result);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e3      	bne.n	80038b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f83d 	bl	8003978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038fe:	e023      	b.n	8003948 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_UART_IRQHandler+0x4f4>
 800390c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f943 	bl	8003ba4 <UART_Transmit_IT>
    return;
 800391e:	e014      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <HAL_UART_IRQHandler+0x51e>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f983 	bl	8003c44 <UART_EndTransmit_IT>
    return;
 800393e:	e004      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
    return;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
      return;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_UART_IRQHandler+0x51e>
      return;
 8003948:	bf00      	nop
  }
}
 800394a:	37e8      	adds	r7, #232	@ 0xe8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a0:	e03b      	b.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d037      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7fd fc55 	bl	8001258 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6a3a      	ldr	r2, [r7, #32]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e03a      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d023      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b80      	cmp	r3, #128	@ 0x80
 80039d6:	d020      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b40      	cmp	r3, #64	@ 0x40
 80039dc:	d01d      	beq.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d116      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f857 	bl	8003ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00f      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d0b4      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2222      	movs	r2, #34	@ 0x22
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0220 	orr.w	r2, r2, #32
 8003aa6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b095      	sub	sp, #84	@ 0x54
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ade:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d119      	bne.n	8003b62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f023 0310 	bic.w	r3, r3, #16
 8003b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b4e:	61ba      	str	r2, [r7, #24]
 8003b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b70:	bf00      	nop
 8003b72:	3754      	adds	r7, #84	@ 0x54
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fee4 	bl	8003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b21      	cmp	r3, #33	@ 0x21
 8003bb6:	d13e      	bne.n	8003c36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	d114      	bne.n	8003bec <UART_Transmit_IT+0x48>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d110      	bne.n	8003bec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	1c9a      	adds	r2, r3, #2
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]
 8003bea:	e008      	b.n	8003bfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	1c59      	adds	r1, r3, #1
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6211      	str	r1, [r2, #32]
 8003bf6:	781a      	ldrb	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff fe73 	bl	8003950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	@ 0x30
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b22      	cmp	r3, #34	@ 0x22
 8003c86:	f040 80ae 	bne.w	8003de6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c92:	d117      	bne.n	8003cc4 <UART_Receive_IT+0x50>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d113      	bne.n	8003cc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	1c9a      	adds	r2, r3, #2
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cc2:	e026      	b.n	8003d12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd6:	d007      	beq.n	8003ce8 <UART_Receive_IT+0x74>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <UART_Receive_IT+0x82>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d106      	bne.n	8003cf6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e008      	b.n	8003d08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d15d      	bne.n	8003de2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0220 	bic.w	r2, r2, #32
 8003d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d135      	bne.n	8003dd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f023 0310 	bic.w	r3, r3, #16
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d92:	623a      	str	r2, [r7, #32]
 8003d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	69f9      	ldr	r1, [r7, #28]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e5      	bne.n	8003d72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b10      	cmp	r3, #16
 8003db2:	d10a      	bne.n	8003dca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003dce:	4619      	mov	r1, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fdd1 	bl	8003978 <HAL_UARTEx_RxEventCallback>
 8003dd6:	e002      	b.n	8003dde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fc ff59 	bl	8000c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e002      	b.n	8003de8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	@ 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df4:	b0c0      	sub	sp, #256	@ 0x100
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	68d9      	ldr	r1, [r3, #12]
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	ea40 0301 	orr.w	r3, r0, r1
 8003e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e48:	f021 010c 	bic.w	r1, r1, #12
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e56:	430b      	orrs	r3, r1
 8003e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	6999      	ldr	r1, [r3, #24]
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	ea40 0301 	orr.w	r3, r0, r1
 8003e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b8f      	ldr	r3, [pc, #572]	@ (80040bc <UART_SetConfig+0x2cc>)
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d005      	beq.n	8003e90 <UART_SetConfig+0xa0>
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80040c0 <UART_SetConfig+0x2d0>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d104      	bne.n	8003e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7fe f9f0 	bl	8002274 <HAL_RCC_GetPCLK2Freq>
 8003e94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e98:	e003      	b.n	8003ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e9a:	f7fe f9d7 	bl	800224c <HAL_RCC_GetPCLK1Freq>
 8003e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eac:	f040 810c 	bne.w	80040c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003eba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	462b      	mov	r3, r5
 8003ec6:	1891      	adds	r1, r2, r2
 8003ec8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003eca:	415b      	adcs	r3, r3
 8003ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	eb12 0801 	adds.w	r8, r2, r1
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb43 0901 	adc.w	r9, r3, r1
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ef2:	4690      	mov	r8, r2
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	eb18 0303 	adds.w	r3, r8, r3
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f00:	462b      	mov	r3, r5
 8003f02:	eb49 0303 	adc.w	r3, r9, r3
 8003f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f1e:	460b      	mov	r3, r1
 8003f20:	18db      	adds	r3, r3, r3
 8003f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f24:	4613      	mov	r3, r2
 8003f26:	eb42 0303 	adc.w	r3, r2, r3
 8003f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f34:	f7fc f99c 	bl	8000270 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <UART_SetConfig+0x2d4>)
 8003f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	011c      	lsls	r4, r3, #4
 8003f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	1891      	adds	r1, r2, r2
 8003f5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003f60:	415b      	adcs	r3, r3
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003f68:	4641      	mov	r1, r8
 8003f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f6e:	4649      	mov	r1, r9
 8003f70:	eb43 0b01 	adc.w	fp, r3, r1
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f88:	4692      	mov	sl, r2
 8003f8a:	469b      	mov	fp, r3
 8003f8c:	4643      	mov	r3, r8
 8003f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f96:	464b      	mov	r3, r9
 8003f98:	eb4b 0303 	adc.w	r3, fp, r3
 8003f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	18db      	adds	r3, r3, r3
 8003fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fba:	4613      	mov	r3, r2
 8003fbc:	eb42 0303 	adc.w	r3, r2, r3
 8003fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003fca:	f7fc f951 	bl	8000270 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <UART_SetConfig+0x2d4>)
 8003fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2264      	movs	r2, #100	@ 0x64
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	1acb      	subs	r3, r1, r3
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <UART_SetConfig+0x2d4>)
 8003fec:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ff8:	441c      	add	r4, r3
 8003ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004004:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800400c:	4642      	mov	r2, r8
 800400e:	464b      	mov	r3, r9
 8004010:	1891      	adds	r1, r2, r2
 8004012:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004014:	415b      	adcs	r3, r3
 8004016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800401c:	4641      	mov	r1, r8
 800401e:	1851      	adds	r1, r2, r1
 8004020:	6339      	str	r1, [r7, #48]	@ 0x30
 8004022:	4649      	mov	r1, r9
 8004024:	414b      	adcs	r3, r1
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004034:	4659      	mov	r1, fp
 8004036:	00cb      	lsls	r3, r1, #3
 8004038:	4651      	mov	r1, sl
 800403a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800403e:	4651      	mov	r1, sl
 8004040:	00ca      	lsls	r2, r1, #3
 8004042:	4610      	mov	r0, r2
 8004044:	4619      	mov	r1, r3
 8004046:	4603      	mov	r3, r0
 8004048:	4642      	mov	r2, r8
 800404a:	189b      	adds	r3, r3, r2
 800404c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004050:	464b      	mov	r3, r9
 8004052:	460a      	mov	r2, r1
 8004054:	eb42 0303 	adc.w	r3, r2, r3
 8004058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004068:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800406c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004070:	460b      	mov	r3, r1
 8004072:	18db      	adds	r3, r3, r3
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004076:	4613      	mov	r3, r2
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004086:	f7fc f8f3 	bl	8000270 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <UART_SetConfig+0x2d4>)
 8004090:	fba3 1302 	umull	r1, r3, r3, r2
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	2164      	movs	r1, #100	@ 0x64
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	3332      	adds	r3, #50	@ 0x32
 80040a2:	4a08      	ldr	r2, [pc, #32]	@ (80040c4 <UART_SetConfig+0x2d4>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	095b      	lsrs	r3, r3, #5
 80040aa:	f003 0207 	and.w	r2, r3, #7
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4422      	add	r2, r4
 80040b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040b8:	e106      	b.n	80042c8 <UART_SetConfig+0x4d8>
 80040ba:	bf00      	nop
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40011400 	.word	0x40011400
 80040c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80040d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80040da:	4642      	mov	r2, r8
 80040dc:	464b      	mov	r3, r9
 80040de:	1891      	adds	r1, r2, r2
 80040e0:	6239      	str	r1, [r7, #32]
 80040e2:	415b      	adcs	r3, r3
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040ea:	4641      	mov	r1, r8
 80040ec:	1854      	adds	r4, r2, r1
 80040ee:	4649      	mov	r1, r9
 80040f0:	eb43 0501 	adc.w	r5, r3, r1
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	00eb      	lsls	r3, r5, #3
 80040fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004102:	00e2      	lsls	r2, r4, #3
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	4643      	mov	r3, r8
 800410a:	18e3      	adds	r3, r4, r3
 800410c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004110:	464b      	mov	r3, r9
 8004112:	eb45 0303 	adc.w	r3, r5, r3
 8004116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004136:	4629      	mov	r1, r5
 8004138:	008b      	lsls	r3, r1, #2
 800413a:	4621      	mov	r1, r4
 800413c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004140:	4621      	mov	r1, r4
 8004142:	008a      	lsls	r2, r1, #2
 8004144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004148:	f7fc f892 	bl	8000270 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4b60      	ldr	r3, [pc, #384]	@ (80042d4 <UART_SetConfig+0x4e4>)
 8004152:	fba3 2302 	umull	r2, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	011c      	lsls	r4, r3, #4
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800416c:	4642      	mov	r2, r8
 800416e:	464b      	mov	r3, r9
 8004170:	1891      	adds	r1, r2, r2
 8004172:	61b9      	str	r1, [r7, #24]
 8004174:	415b      	adcs	r3, r3
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417c:	4641      	mov	r1, r8
 800417e:	1851      	adds	r1, r2, r1
 8004180:	6139      	str	r1, [r7, #16]
 8004182:	4649      	mov	r1, r9
 8004184:	414b      	adcs	r3, r1
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004194:	4659      	mov	r1, fp
 8004196:	00cb      	lsls	r3, r1, #3
 8004198:	4651      	mov	r1, sl
 800419a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419e:	4651      	mov	r1, sl
 80041a0:	00ca      	lsls	r2, r1, #3
 80041a2:	4610      	mov	r0, r2
 80041a4:	4619      	mov	r1, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	4642      	mov	r2, r8
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041b0:	464b      	mov	r3, r9
 80041b2:	460a      	mov	r2, r1
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80041d4:	4649      	mov	r1, r9
 80041d6:	008b      	lsls	r3, r1, #2
 80041d8:	4641      	mov	r1, r8
 80041da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041de:	4641      	mov	r1, r8
 80041e0:	008a      	lsls	r2, r1, #2
 80041e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80041e6:	f7fc f843 	bl	8000270 <__aeabi_uldivmod>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	4b38      	ldr	r3, [pc, #224]	@ (80042d4 <UART_SetConfig+0x4e4>)
 80041f2:	fba3 2301 	umull	r2, r3, r3, r1
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2264      	movs	r2, #100	@ 0x64
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	1acb      	subs	r3, r1, r3
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	3332      	adds	r3, #50	@ 0x32
 8004204:	4a33      	ldr	r2, [pc, #204]	@ (80042d4 <UART_SetConfig+0x4e4>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004210:	441c      	add	r4, r3
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	673b      	str	r3, [r7, #112]	@ 0x70
 800421a:	677a      	str	r2, [r7, #116]	@ 0x74
 800421c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	415b      	adcs	r3, r3
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004230:	4641      	mov	r1, r8
 8004232:	1851      	adds	r1, r2, r1
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	4649      	mov	r1, r9
 8004238:	414b      	adcs	r3, r1
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004248:	4659      	mov	r1, fp
 800424a:	00cb      	lsls	r3, r1, #3
 800424c:	4651      	mov	r1, sl
 800424e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004252:	4651      	mov	r1, sl
 8004254:	00ca      	lsls	r2, r1, #3
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	4603      	mov	r3, r0
 800425c:	4642      	mov	r2, r8
 800425e:	189b      	adds	r3, r3, r2
 8004260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004262:	464b      	mov	r3, r9
 8004264:	460a      	mov	r2, r1
 8004266:	eb42 0303 	adc.w	r3, r2, r3
 800426a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	663b      	str	r3, [r7, #96]	@ 0x60
 8004276:	667a      	str	r2, [r7, #100]	@ 0x64
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004284:	4649      	mov	r1, r9
 8004286:	008b      	lsls	r3, r1, #2
 8004288:	4641      	mov	r1, r8
 800428a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428e:	4641      	mov	r1, r8
 8004290:	008a      	lsls	r2, r1, #2
 8004292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004296:	f7fb ffeb 	bl	8000270 <__aeabi_uldivmod>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <UART_SetConfig+0x4e4>)
 80042a0:	fba3 1302 	umull	r1, r3, r3, r2
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	2164      	movs	r1, #100	@ 0x64
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	3332      	adds	r3, #50	@ 0x32
 80042b2:	4a08      	ldr	r2, [pc, #32]	@ (80042d4 <UART_SetConfig+0x4e4>)
 80042b4:	fba2 2303 	umull	r2, r3, r2, r3
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	f003 020f 	and.w	r2, r3, #15
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4422      	add	r2, r4
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80042ce:	46bd      	mov	sp, r7
 80042d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d4:	51eb851f 	.word	0x51eb851f

080042d8 <atoi>:
 80042d8:	220a      	movs	r2, #10
 80042da:	2100      	movs	r1, #0
 80042dc:	f000 b87a 	b.w	80043d4 <strtol>

080042e0 <_strtol_l.isra.0>:
 80042e0:	2b24      	cmp	r3, #36	@ 0x24
 80042e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e6:	4686      	mov	lr, r0
 80042e8:	4690      	mov	r8, r2
 80042ea:	d801      	bhi.n	80042f0 <_strtol_l.isra.0+0x10>
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <_strtol_l.isra.0+0x1e>
 80042f0:	f000 fa2a 	bl	8004748 <__errno>
 80042f4:	2316      	movs	r3, #22
 80042f6:	6003      	str	r3, [r0, #0]
 80042f8:	2000      	movs	r0, #0
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	4834      	ldr	r0, [pc, #208]	@ (80043d0 <_strtol_l.isra.0+0xf0>)
 8004300:	460d      	mov	r5, r1
 8004302:	462a      	mov	r2, r5
 8004304:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004308:	5d06      	ldrb	r6, [r0, r4]
 800430a:	f016 0608 	ands.w	r6, r6, #8
 800430e:	d1f8      	bne.n	8004302 <_strtol_l.isra.0+0x22>
 8004310:	2c2d      	cmp	r4, #45	@ 0x2d
 8004312:	d110      	bne.n	8004336 <_strtol_l.isra.0+0x56>
 8004314:	782c      	ldrb	r4, [r5, #0]
 8004316:	2601      	movs	r6, #1
 8004318:	1c95      	adds	r5, r2, #2
 800431a:	f033 0210 	bics.w	r2, r3, #16
 800431e:	d115      	bne.n	800434c <_strtol_l.isra.0+0x6c>
 8004320:	2c30      	cmp	r4, #48	@ 0x30
 8004322:	d10d      	bne.n	8004340 <_strtol_l.isra.0+0x60>
 8004324:	782a      	ldrb	r2, [r5, #0]
 8004326:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800432a:	2a58      	cmp	r2, #88	@ 0x58
 800432c:	d108      	bne.n	8004340 <_strtol_l.isra.0+0x60>
 800432e:	786c      	ldrb	r4, [r5, #1]
 8004330:	3502      	adds	r5, #2
 8004332:	2310      	movs	r3, #16
 8004334:	e00a      	b.n	800434c <_strtol_l.isra.0+0x6c>
 8004336:	2c2b      	cmp	r4, #43	@ 0x2b
 8004338:	bf04      	itt	eq
 800433a:	782c      	ldrbeq	r4, [r5, #0]
 800433c:	1c95      	addeq	r5, r2, #2
 800433e:	e7ec      	b.n	800431a <_strtol_l.isra.0+0x3a>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1f6      	bne.n	8004332 <_strtol_l.isra.0+0x52>
 8004344:	2c30      	cmp	r4, #48	@ 0x30
 8004346:	bf14      	ite	ne
 8004348:	230a      	movne	r3, #10
 800434a:	2308      	moveq	r3, #8
 800434c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004350:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004354:	2200      	movs	r2, #0
 8004356:	fbbc f9f3 	udiv	r9, ip, r3
 800435a:	4610      	mov	r0, r2
 800435c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004360:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004364:	2f09      	cmp	r7, #9
 8004366:	d80f      	bhi.n	8004388 <_strtol_l.isra.0+0xa8>
 8004368:	463c      	mov	r4, r7
 800436a:	42a3      	cmp	r3, r4
 800436c:	dd1b      	ble.n	80043a6 <_strtol_l.isra.0+0xc6>
 800436e:	1c57      	adds	r7, r2, #1
 8004370:	d007      	beq.n	8004382 <_strtol_l.isra.0+0xa2>
 8004372:	4581      	cmp	r9, r0
 8004374:	d314      	bcc.n	80043a0 <_strtol_l.isra.0+0xc0>
 8004376:	d101      	bne.n	800437c <_strtol_l.isra.0+0x9c>
 8004378:	45a2      	cmp	sl, r4
 800437a:	db11      	blt.n	80043a0 <_strtol_l.isra.0+0xc0>
 800437c:	fb00 4003 	mla	r0, r0, r3, r4
 8004380:	2201      	movs	r2, #1
 8004382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004386:	e7eb      	b.n	8004360 <_strtol_l.isra.0+0x80>
 8004388:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800438c:	2f19      	cmp	r7, #25
 800438e:	d801      	bhi.n	8004394 <_strtol_l.isra.0+0xb4>
 8004390:	3c37      	subs	r4, #55	@ 0x37
 8004392:	e7ea      	b.n	800436a <_strtol_l.isra.0+0x8a>
 8004394:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004398:	2f19      	cmp	r7, #25
 800439a:	d804      	bhi.n	80043a6 <_strtol_l.isra.0+0xc6>
 800439c:	3c57      	subs	r4, #87	@ 0x57
 800439e:	e7e4      	b.n	800436a <_strtol_l.isra.0+0x8a>
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	e7ed      	b.n	8004382 <_strtol_l.isra.0+0xa2>
 80043a6:	1c53      	adds	r3, r2, #1
 80043a8:	d108      	bne.n	80043bc <_strtol_l.isra.0+0xdc>
 80043aa:	2322      	movs	r3, #34	@ 0x22
 80043ac:	f8ce 3000 	str.w	r3, [lr]
 80043b0:	4660      	mov	r0, ip
 80043b2:	f1b8 0f00 	cmp.w	r8, #0
 80043b6:	d0a0      	beq.n	80042fa <_strtol_l.isra.0+0x1a>
 80043b8:	1e69      	subs	r1, r5, #1
 80043ba:	e006      	b.n	80043ca <_strtol_l.isra.0+0xea>
 80043bc:	b106      	cbz	r6, 80043c0 <_strtol_l.isra.0+0xe0>
 80043be:	4240      	negs	r0, r0
 80043c0:	f1b8 0f00 	cmp.w	r8, #0
 80043c4:	d099      	beq.n	80042fa <_strtol_l.isra.0+0x1a>
 80043c6:	2a00      	cmp	r2, #0
 80043c8:	d1f6      	bne.n	80043b8 <_strtol_l.isra.0+0xd8>
 80043ca:	f8c8 1000 	str.w	r1, [r8]
 80043ce:	e794      	b.n	80042fa <_strtol_l.isra.0+0x1a>
 80043d0:	08005411 	.word	0x08005411

080043d4 <strtol>:
 80043d4:	4613      	mov	r3, r2
 80043d6:	460a      	mov	r2, r1
 80043d8:	4601      	mov	r1, r0
 80043da:	4802      	ldr	r0, [pc, #8]	@ (80043e4 <strtol+0x10>)
 80043dc:	6800      	ldr	r0, [r0, #0]
 80043de:	f7ff bf7f 	b.w	80042e0 <_strtol_l.isra.0>
 80043e2:	bf00      	nop
 80043e4:	2000002c 	.word	0x2000002c

080043e8 <std>:
 80043e8:	2300      	movs	r3, #0
 80043ea:	b510      	push	{r4, lr}
 80043ec:	4604      	mov	r4, r0
 80043ee:	e9c0 3300 	strd	r3, r3, [r0]
 80043f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043f6:	6083      	str	r3, [r0, #8]
 80043f8:	8181      	strh	r1, [r0, #12]
 80043fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80043fc:	81c2      	strh	r2, [r0, #14]
 80043fe:	6183      	str	r3, [r0, #24]
 8004400:	4619      	mov	r1, r3
 8004402:	2208      	movs	r2, #8
 8004404:	305c      	adds	r0, #92	@ 0x5c
 8004406:	f000 f8f4 	bl	80045f2 <memset>
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <std+0x58>)
 800440c:	6263      	str	r3, [r4, #36]	@ 0x24
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <std+0x5c>)
 8004410:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004412:	4b0d      	ldr	r3, [pc, #52]	@ (8004448 <std+0x60>)
 8004414:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004416:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <std+0x64>)
 8004418:	6323      	str	r3, [r4, #48]	@ 0x30
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <std+0x68>)
 800441c:	6224      	str	r4, [r4, #32]
 800441e:	429c      	cmp	r4, r3
 8004420:	d006      	beq.n	8004430 <std+0x48>
 8004422:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004426:	4294      	cmp	r4, r2
 8004428:	d002      	beq.n	8004430 <std+0x48>
 800442a:	33d0      	adds	r3, #208	@ 0xd0
 800442c:	429c      	cmp	r4, r3
 800442e:	d105      	bne.n	800443c <std+0x54>
 8004430:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004438:	f000 b9b0 	b.w	800479c <__retarget_lock_init_recursive>
 800443c:	bd10      	pop	{r4, pc}
 800443e:	bf00      	nop
 8004440:	0800456d 	.word	0x0800456d
 8004444:	0800458f 	.word	0x0800458f
 8004448:	080045c7 	.word	0x080045c7
 800444c:	080045eb 	.word	0x080045eb
 8004450:	200001c0 	.word	0x200001c0

08004454 <stdio_exit_handler>:
 8004454:	4a02      	ldr	r2, [pc, #8]	@ (8004460 <stdio_exit_handler+0xc>)
 8004456:	4903      	ldr	r1, [pc, #12]	@ (8004464 <stdio_exit_handler+0x10>)
 8004458:	4803      	ldr	r0, [pc, #12]	@ (8004468 <stdio_exit_handler+0x14>)
 800445a:	f000 b869 	b.w	8004530 <_fwalk_sglue>
 800445e:	bf00      	nop
 8004460:	20000020 	.word	0x20000020
 8004464:	08004ae9 	.word	0x08004ae9
 8004468:	20000030 	.word	0x20000030

0800446c <cleanup_stdio>:
 800446c:	6841      	ldr	r1, [r0, #4]
 800446e:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <cleanup_stdio+0x34>)
 8004470:	4299      	cmp	r1, r3
 8004472:	b510      	push	{r4, lr}
 8004474:	4604      	mov	r4, r0
 8004476:	d001      	beq.n	800447c <cleanup_stdio+0x10>
 8004478:	f000 fb36 	bl	8004ae8 <_fflush_r>
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <cleanup_stdio+0x38>)
 8004480:	4299      	cmp	r1, r3
 8004482:	d002      	beq.n	800448a <cleanup_stdio+0x1e>
 8004484:	4620      	mov	r0, r4
 8004486:	f000 fb2f 	bl	8004ae8 <_fflush_r>
 800448a:	68e1      	ldr	r1, [r4, #12]
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <cleanup_stdio+0x3c>)
 800448e:	4299      	cmp	r1, r3
 8004490:	d004      	beq.n	800449c <cleanup_stdio+0x30>
 8004492:	4620      	mov	r0, r4
 8004494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004498:	f000 bb26 	b.w	8004ae8 <_fflush_r>
 800449c:	bd10      	pop	{r4, pc}
 800449e:	bf00      	nop
 80044a0:	200001c0 	.word	0x200001c0
 80044a4:	20000228 	.word	0x20000228
 80044a8:	20000290 	.word	0x20000290

080044ac <global_stdio_init.part.0>:
 80044ac:	b510      	push	{r4, lr}
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <global_stdio_init.part.0+0x30>)
 80044b0:	4c0b      	ldr	r4, [pc, #44]	@ (80044e0 <global_stdio_init.part.0+0x34>)
 80044b2:	4a0c      	ldr	r2, [pc, #48]	@ (80044e4 <global_stdio_init.part.0+0x38>)
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	4620      	mov	r0, r4
 80044b8:	2200      	movs	r2, #0
 80044ba:	2104      	movs	r1, #4
 80044bc:	f7ff ff94 	bl	80043e8 <std>
 80044c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044c4:	2201      	movs	r2, #1
 80044c6:	2109      	movs	r1, #9
 80044c8:	f7ff ff8e 	bl	80043e8 <std>
 80044cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044d0:	2202      	movs	r2, #2
 80044d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044d6:	2112      	movs	r1, #18
 80044d8:	f7ff bf86 	b.w	80043e8 <std>
 80044dc:	200002f8 	.word	0x200002f8
 80044e0:	200001c0 	.word	0x200001c0
 80044e4:	08004455 	.word	0x08004455

080044e8 <__sfp_lock_acquire>:
 80044e8:	4801      	ldr	r0, [pc, #4]	@ (80044f0 <__sfp_lock_acquire+0x8>)
 80044ea:	f000 b958 	b.w	800479e <__retarget_lock_acquire_recursive>
 80044ee:	bf00      	nop
 80044f0:	20000301 	.word	0x20000301

080044f4 <__sfp_lock_release>:
 80044f4:	4801      	ldr	r0, [pc, #4]	@ (80044fc <__sfp_lock_release+0x8>)
 80044f6:	f000 b953 	b.w	80047a0 <__retarget_lock_release_recursive>
 80044fa:	bf00      	nop
 80044fc:	20000301 	.word	0x20000301

08004500 <__sinit>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4604      	mov	r4, r0
 8004504:	f7ff fff0 	bl	80044e8 <__sfp_lock_acquire>
 8004508:	6a23      	ldr	r3, [r4, #32]
 800450a:	b11b      	cbz	r3, 8004514 <__sinit+0x14>
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004510:	f7ff bff0 	b.w	80044f4 <__sfp_lock_release>
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <__sinit+0x28>)
 8004516:	6223      	str	r3, [r4, #32]
 8004518:	4b04      	ldr	r3, [pc, #16]	@ (800452c <__sinit+0x2c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f5      	bne.n	800450c <__sinit+0xc>
 8004520:	f7ff ffc4 	bl	80044ac <global_stdio_init.part.0>
 8004524:	e7f2      	b.n	800450c <__sinit+0xc>
 8004526:	bf00      	nop
 8004528:	0800446d 	.word	0x0800446d
 800452c:	200002f8 	.word	0x200002f8

08004530 <_fwalk_sglue>:
 8004530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004534:	4607      	mov	r7, r0
 8004536:	4688      	mov	r8, r1
 8004538:	4614      	mov	r4, r2
 800453a:	2600      	movs	r6, #0
 800453c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004540:	f1b9 0901 	subs.w	r9, r9, #1
 8004544:	d505      	bpl.n	8004552 <_fwalk_sglue+0x22>
 8004546:	6824      	ldr	r4, [r4, #0]
 8004548:	2c00      	cmp	r4, #0
 800454a:	d1f7      	bne.n	800453c <_fwalk_sglue+0xc>
 800454c:	4630      	mov	r0, r6
 800454e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004552:	89ab      	ldrh	r3, [r5, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d907      	bls.n	8004568 <_fwalk_sglue+0x38>
 8004558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800455c:	3301      	adds	r3, #1
 800455e:	d003      	beq.n	8004568 <_fwalk_sglue+0x38>
 8004560:	4629      	mov	r1, r5
 8004562:	4638      	mov	r0, r7
 8004564:	47c0      	blx	r8
 8004566:	4306      	orrs	r6, r0
 8004568:	3568      	adds	r5, #104	@ 0x68
 800456a:	e7e9      	b.n	8004540 <_fwalk_sglue+0x10>

0800456c <__sread>:
 800456c:	b510      	push	{r4, lr}
 800456e:	460c      	mov	r4, r1
 8004570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004574:	f000 f8c4 	bl	8004700 <_read_r>
 8004578:	2800      	cmp	r0, #0
 800457a:	bfab      	itete	ge
 800457c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800457e:	89a3      	ldrhlt	r3, [r4, #12]
 8004580:	181b      	addge	r3, r3, r0
 8004582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004586:	bfac      	ite	ge
 8004588:	6563      	strge	r3, [r4, #84]	@ 0x54
 800458a:	81a3      	strhlt	r3, [r4, #12]
 800458c:	bd10      	pop	{r4, pc}

0800458e <__swrite>:
 800458e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004592:	461f      	mov	r7, r3
 8004594:	898b      	ldrh	r3, [r1, #12]
 8004596:	05db      	lsls	r3, r3, #23
 8004598:	4605      	mov	r5, r0
 800459a:	460c      	mov	r4, r1
 800459c:	4616      	mov	r6, r2
 800459e:	d505      	bpl.n	80045ac <__swrite+0x1e>
 80045a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a4:	2302      	movs	r3, #2
 80045a6:	2200      	movs	r2, #0
 80045a8:	f000 f898 	bl	80046dc <_lseek_r>
 80045ac:	89a3      	ldrh	r3, [r4, #12]
 80045ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045b6:	81a3      	strh	r3, [r4, #12]
 80045b8:	4632      	mov	r2, r6
 80045ba:	463b      	mov	r3, r7
 80045bc:	4628      	mov	r0, r5
 80045be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c2:	f000 b8af 	b.w	8004724 <_write_r>

080045c6 <__sseek>:
 80045c6:	b510      	push	{r4, lr}
 80045c8:	460c      	mov	r4, r1
 80045ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ce:	f000 f885 	bl	80046dc <_lseek_r>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	bf15      	itete	ne
 80045d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045e2:	81a3      	strheq	r3, [r4, #12]
 80045e4:	bf18      	it	ne
 80045e6:	81a3      	strhne	r3, [r4, #12]
 80045e8:	bd10      	pop	{r4, pc}

080045ea <__sclose>:
 80045ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ee:	f000 b865 	b.w	80046bc <_close_r>

080045f2 <memset>:
 80045f2:	4402      	add	r2, r0
 80045f4:	4603      	mov	r3, r0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d100      	bne.n	80045fc <memset+0xa>
 80045fa:	4770      	bx	lr
 80045fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004600:	e7f9      	b.n	80045f6 <memset+0x4>
	...

08004604 <strtok>:
 8004604:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <strtok+0x5c>)
 8004606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460a:	681f      	ldr	r7, [r3, #0]
 800460c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800460e:	4605      	mov	r5, r0
 8004610:	460e      	mov	r6, r1
 8004612:	b9ec      	cbnz	r4, 8004650 <strtok+0x4c>
 8004614:	2050      	movs	r0, #80	@ 0x50
 8004616:	f000 f92d 	bl	8004874 <malloc>
 800461a:	4602      	mov	r2, r0
 800461c:	6478      	str	r0, [r7, #68]	@ 0x44
 800461e:	b920      	cbnz	r0, 800462a <strtok+0x26>
 8004620:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <strtok+0x60>)
 8004622:	4811      	ldr	r0, [pc, #68]	@ (8004668 <strtok+0x64>)
 8004624:	215b      	movs	r1, #91	@ 0x5b
 8004626:	f000 f8bd 	bl	80047a4 <__assert_func>
 800462a:	e9c0 4400 	strd	r4, r4, [r0]
 800462e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004632:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004636:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800463a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800463e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004642:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004646:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800464a:	6184      	str	r4, [r0, #24]
 800464c:	7704      	strb	r4, [r0, #28]
 800464e:	6244      	str	r4, [r0, #36]	@ 0x24
 8004650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004652:	4631      	mov	r1, r6
 8004654:	4628      	mov	r0, r5
 8004656:	2301      	movs	r3, #1
 8004658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800465c:	f000 b806 	b.w	800466c <__strtok_r>
 8004660:	2000002c 	.word	0x2000002c
 8004664:	08005511 	.word	0x08005511
 8004668:	08005528 	.word	0x08005528

0800466c <__strtok_r>:
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	b908      	cbnz	r0, 8004676 <__strtok_r+0xa>
 8004672:	6814      	ldr	r4, [r2, #0]
 8004674:	b144      	cbz	r4, 8004688 <__strtok_r+0x1c>
 8004676:	4620      	mov	r0, r4
 8004678:	f814 5b01 	ldrb.w	r5, [r4], #1
 800467c:	460f      	mov	r7, r1
 800467e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004682:	b91e      	cbnz	r6, 800468c <__strtok_r+0x20>
 8004684:	b965      	cbnz	r5, 80046a0 <__strtok_r+0x34>
 8004686:	6015      	str	r5, [r2, #0]
 8004688:	2000      	movs	r0, #0
 800468a:	e005      	b.n	8004698 <__strtok_r+0x2c>
 800468c:	42b5      	cmp	r5, r6
 800468e:	d1f6      	bne.n	800467e <__strtok_r+0x12>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <__strtok_r+0xa>
 8004694:	6014      	str	r4, [r2, #0]
 8004696:	7003      	strb	r3, [r0, #0]
 8004698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469a:	461c      	mov	r4, r3
 800469c:	e00c      	b.n	80046b8 <__strtok_r+0x4c>
 800469e:	b91d      	cbnz	r5, 80046a8 <__strtok_r+0x3c>
 80046a0:	4627      	mov	r7, r4
 80046a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80046a6:	460e      	mov	r6, r1
 80046a8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80046ac:	42ab      	cmp	r3, r5
 80046ae:	d1f6      	bne.n	800469e <__strtok_r+0x32>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f2      	beq.n	800469a <__strtok_r+0x2e>
 80046b4:	2300      	movs	r3, #0
 80046b6:	703b      	strb	r3, [r7, #0]
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	e7ed      	b.n	8004698 <__strtok_r+0x2c>

080046bc <_close_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d06      	ldr	r5, [pc, #24]	@ (80046d8 <_close_r+0x1c>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc fcba 	bl	8001040 <_close>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_close_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_close_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	200002fc 	.word	0x200002fc

080046dc <_lseek_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4d07      	ldr	r5, [pc, #28]	@ (80046fc <_lseek_r+0x20>)
 80046e0:	4604      	mov	r4, r0
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	602a      	str	r2, [r5, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f7fc fccf 	bl	800108e <_lseek>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_lseek_r+0x1e>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_lseek_r+0x1e>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	200002fc 	.word	0x200002fc

08004700 <_read_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d07      	ldr	r5, [pc, #28]	@ (8004720 <_read_r+0x20>)
 8004704:	4604      	mov	r4, r0
 8004706:	4608      	mov	r0, r1
 8004708:	4611      	mov	r1, r2
 800470a:	2200      	movs	r2, #0
 800470c:	602a      	str	r2, [r5, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	f7fc fc5d 	bl	8000fce <_read>
 8004714:	1c43      	adds	r3, r0, #1
 8004716:	d102      	bne.n	800471e <_read_r+0x1e>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	b103      	cbz	r3, 800471e <_read_r+0x1e>
 800471c:	6023      	str	r3, [r4, #0]
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	200002fc 	.word	0x200002fc

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	@ (8004744 <_write_r+0x20>)
 8004728:	4604      	mov	r4, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fc fc68 	bl	8001008 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	200002fc 	.word	0x200002fc

08004748 <__errno>:
 8004748:	4b01      	ldr	r3, [pc, #4]	@ (8004750 <__errno+0x8>)
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	2000002c 	.word	0x2000002c

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4d0d      	ldr	r5, [pc, #52]	@ (800478c <__libc_init_array+0x38>)
 8004758:	4c0d      	ldr	r4, [pc, #52]	@ (8004790 <__libc_init_array+0x3c>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	2600      	movs	r6, #0
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	4d0b      	ldr	r5, [pc, #44]	@ (8004794 <__libc_init_array+0x40>)
 8004766:	4c0c      	ldr	r4, [pc, #48]	@ (8004798 <__libc_init_array+0x44>)
 8004768:	f000 fe38 	bl	80053dc <_init>
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	2600      	movs	r6, #0
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	080055fc 	.word	0x080055fc
 8004790:	080055fc 	.word	0x080055fc
 8004794:	080055fc 	.word	0x080055fc
 8004798:	08005600 	.word	0x08005600

0800479c <__retarget_lock_init_recursive>:
 800479c:	4770      	bx	lr

0800479e <__retarget_lock_acquire_recursive>:
 800479e:	4770      	bx	lr

080047a0 <__retarget_lock_release_recursive>:
 80047a0:	4770      	bx	lr
	...

080047a4 <__assert_func>:
 80047a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047a6:	4614      	mov	r4, r2
 80047a8:	461a      	mov	r2, r3
 80047aa:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <__assert_func+0x2c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4605      	mov	r5, r0
 80047b0:	68d8      	ldr	r0, [r3, #12]
 80047b2:	b14c      	cbz	r4, 80047c8 <__assert_func+0x24>
 80047b4:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <__assert_func+0x30>)
 80047b6:	9100      	str	r1, [sp, #0]
 80047b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047bc:	4906      	ldr	r1, [pc, #24]	@ (80047d8 <__assert_func+0x34>)
 80047be:	462b      	mov	r3, r5
 80047c0:	f000 f9ba 	bl	8004b38 <fiprintf>
 80047c4:	f000 f9da 	bl	8004b7c <abort>
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__assert_func+0x38>)
 80047ca:	461c      	mov	r4, r3
 80047cc:	e7f3      	b.n	80047b6 <__assert_func+0x12>
 80047ce:	bf00      	nop
 80047d0:	2000002c 	.word	0x2000002c
 80047d4:	08005582 	.word	0x08005582
 80047d8:	0800558f 	.word	0x0800558f
 80047dc:	080055bd 	.word	0x080055bd

080047e0 <_free_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4605      	mov	r5, r0
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d041      	beq.n	800486c <_free_r+0x8c>
 80047e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ec:	1f0c      	subs	r4, r1, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	bfb8      	it	lt
 80047f2:	18e4      	addlt	r4, r4, r3
 80047f4:	f000 f8e8 	bl	80049c8 <__malloc_lock>
 80047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <_free_r+0x90>)
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	b933      	cbnz	r3, 800480c <_free_r+0x2c>
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	6014      	str	r4, [r2, #0]
 8004802:	4628      	mov	r0, r5
 8004804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004808:	f000 b8e4 	b.w	80049d4 <__malloc_unlock>
 800480c:	42a3      	cmp	r3, r4
 800480e:	d908      	bls.n	8004822 <_free_r+0x42>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	1821      	adds	r1, r4, r0
 8004814:	428b      	cmp	r3, r1
 8004816:	bf01      	itttt	eq
 8004818:	6819      	ldreq	r1, [r3, #0]
 800481a:	685b      	ldreq	r3, [r3, #4]
 800481c:	1809      	addeq	r1, r1, r0
 800481e:	6021      	streq	r1, [r4, #0]
 8004820:	e7ed      	b.n	80047fe <_free_r+0x1e>
 8004822:	461a      	mov	r2, r3
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b10b      	cbz	r3, 800482c <_free_r+0x4c>
 8004828:	42a3      	cmp	r3, r4
 800482a:	d9fa      	bls.n	8004822 <_free_r+0x42>
 800482c:	6811      	ldr	r1, [r2, #0]
 800482e:	1850      	adds	r0, r2, r1
 8004830:	42a0      	cmp	r0, r4
 8004832:	d10b      	bne.n	800484c <_free_r+0x6c>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	4401      	add	r1, r0
 8004838:	1850      	adds	r0, r2, r1
 800483a:	4283      	cmp	r3, r0
 800483c:	6011      	str	r1, [r2, #0]
 800483e:	d1e0      	bne.n	8004802 <_free_r+0x22>
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	6053      	str	r3, [r2, #4]
 8004846:	4408      	add	r0, r1
 8004848:	6010      	str	r0, [r2, #0]
 800484a:	e7da      	b.n	8004802 <_free_r+0x22>
 800484c:	d902      	bls.n	8004854 <_free_r+0x74>
 800484e:	230c      	movs	r3, #12
 8004850:	602b      	str	r3, [r5, #0]
 8004852:	e7d6      	b.n	8004802 <_free_r+0x22>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	1821      	adds	r1, r4, r0
 8004858:	428b      	cmp	r3, r1
 800485a:	bf04      	itt	eq
 800485c:	6819      	ldreq	r1, [r3, #0]
 800485e:	685b      	ldreq	r3, [r3, #4]
 8004860:	6063      	str	r3, [r4, #4]
 8004862:	bf04      	itt	eq
 8004864:	1809      	addeq	r1, r1, r0
 8004866:	6021      	streq	r1, [r4, #0]
 8004868:	6054      	str	r4, [r2, #4]
 800486a:	e7ca      	b.n	8004802 <_free_r+0x22>
 800486c:	bd38      	pop	{r3, r4, r5, pc}
 800486e:	bf00      	nop
 8004870:	20000308 	.word	0x20000308

08004874 <malloc>:
 8004874:	4b02      	ldr	r3, [pc, #8]	@ (8004880 <malloc+0xc>)
 8004876:	4601      	mov	r1, r0
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f000 b825 	b.w	80048c8 <_malloc_r>
 800487e:	bf00      	nop
 8004880:	2000002c 	.word	0x2000002c

08004884 <sbrk_aligned>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4e0f      	ldr	r6, [pc, #60]	@ (80048c4 <sbrk_aligned+0x40>)
 8004888:	460c      	mov	r4, r1
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	4605      	mov	r5, r0
 800488e:	b911      	cbnz	r1, 8004896 <sbrk_aligned+0x12>
 8004890:	f000 f964 	bl	8004b5c <_sbrk_r>
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f95f 	bl	8004b5c <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d103      	bne.n	80048aa <sbrk_aligned+0x26>
 80048a2:	f04f 34ff 	mov.w	r4, #4294967295
 80048a6:	4620      	mov	r0, r4
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	1cc4      	adds	r4, r0, #3
 80048ac:	f024 0403 	bic.w	r4, r4, #3
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d0f8      	beq.n	80048a6 <sbrk_aligned+0x22>
 80048b4:	1a21      	subs	r1, r4, r0
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 f950 	bl	8004b5c <_sbrk_r>
 80048bc:	3001      	adds	r0, #1
 80048be:	d1f2      	bne.n	80048a6 <sbrk_aligned+0x22>
 80048c0:	e7ef      	b.n	80048a2 <sbrk_aligned+0x1e>
 80048c2:	bf00      	nop
 80048c4:	20000304 	.word	0x20000304

080048c8 <_malloc_r>:
 80048c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048cc:	1ccd      	adds	r5, r1, #3
 80048ce:	f025 0503 	bic.w	r5, r5, #3
 80048d2:	3508      	adds	r5, #8
 80048d4:	2d0c      	cmp	r5, #12
 80048d6:	bf38      	it	cc
 80048d8:	250c      	movcc	r5, #12
 80048da:	2d00      	cmp	r5, #0
 80048dc:	4606      	mov	r6, r0
 80048de:	db01      	blt.n	80048e4 <_malloc_r+0x1c>
 80048e0:	42a9      	cmp	r1, r5
 80048e2:	d904      	bls.n	80048ee <_malloc_r+0x26>
 80048e4:	230c      	movs	r3, #12
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049c4 <_malloc_r+0xfc>
 80048f2:	f000 f869 	bl	80049c8 <__malloc_lock>
 80048f6:	f8d8 3000 	ldr.w	r3, [r8]
 80048fa:	461c      	mov	r4, r3
 80048fc:	bb44      	cbnz	r4, 8004950 <_malloc_r+0x88>
 80048fe:	4629      	mov	r1, r5
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff ffbf 	bl	8004884 <sbrk_aligned>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	4604      	mov	r4, r0
 800490a:	d158      	bne.n	80049be <_malloc_r+0xf6>
 800490c:	f8d8 4000 	ldr.w	r4, [r8]
 8004910:	4627      	mov	r7, r4
 8004912:	2f00      	cmp	r7, #0
 8004914:	d143      	bne.n	800499e <_malloc_r+0xd6>
 8004916:	2c00      	cmp	r4, #0
 8004918:	d04b      	beq.n	80049b2 <_malloc_r+0xea>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	4639      	mov	r1, r7
 800491e:	4630      	mov	r0, r6
 8004920:	eb04 0903 	add.w	r9, r4, r3
 8004924:	f000 f91a 	bl	8004b5c <_sbrk_r>
 8004928:	4581      	cmp	r9, r0
 800492a:	d142      	bne.n	80049b2 <_malloc_r+0xea>
 800492c:	6821      	ldr	r1, [r4, #0]
 800492e:	1a6d      	subs	r5, r5, r1
 8004930:	4629      	mov	r1, r5
 8004932:	4630      	mov	r0, r6
 8004934:	f7ff ffa6 	bl	8004884 <sbrk_aligned>
 8004938:	3001      	adds	r0, #1
 800493a:	d03a      	beq.n	80049b2 <_malloc_r+0xea>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	442b      	add	r3, r5
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	bb62      	cbnz	r2, 80049a4 <_malloc_r+0xdc>
 800494a:	f8c8 7000 	str.w	r7, [r8]
 800494e:	e00f      	b.n	8004970 <_malloc_r+0xa8>
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	1b52      	subs	r2, r2, r5
 8004954:	d420      	bmi.n	8004998 <_malloc_r+0xd0>
 8004956:	2a0b      	cmp	r2, #11
 8004958:	d917      	bls.n	800498a <_malloc_r+0xc2>
 800495a:	1961      	adds	r1, r4, r5
 800495c:	42a3      	cmp	r3, r4
 800495e:	6025      	str	r5, [r4, #0]
 8004960:	bf18      	it	ne
 8004962:	6059      	strne	r1, [r3, #4]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	bf08      	it	eq
 8004968:	f8c8 1000 	streq.w	r1, [r8]
 800496c:	5162      	str	r2, [r4, r5]
 800496e:	604b      	str	r3, [r1, #4]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f82f 	bl	80049d4 <__malloc_unlock>
 8004976:	f104 000b 	add.w	r0, r4, #11
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	f020 0007 	bic.w	r0, r0, #7
 8004980:	1ac2      	subs	r2, r0, r3
 8004982:	bf1c      	itt	ne
 8004984:	1a1b      	subne	r3, r3, r0
 8004986:	50a3      	strne	r3, [r4, r2]
 8004988:	e7af      	b.n	80048ea <_malloc_r+0x22>
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	42a3      	cmp	r3, r4
 800498e:	bf0c      	ite	eq
 8004990:	f8c8 2000 	streq.w	r2, [r8]
 8004994:	605a      	strne	r2, [r3, #4]
 8004996:	e7eb      	b.n	8004970 <_malloc_r+0xa8>
 8004998:	4623      	mov	r3, r4
 800499a:	6864      	ldr	r4, [r4, #4]
 800499c:	e7ae      	b.n	80048fc <_malloc_r+0x34>
 800499e:	463c      	mov	r4, r7
 80049a0:	687f      	ldr	r7, [r7, #4]
 80049a2:	e7b6      	b.n	8004912 <_malloc_r+0x4a>
 80049a4:	461a      	mov	r2, r3
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d1fb      	bne.n	80049a4 <_malloc_r+0xdc>
 80049ac:	2300      	movs	r3, #0
 80049ae:	6053      	str	r3, [r2, #4]
 80049b0:	e7de      	b.n	8004970 <_malloc_r+0xa8>
 80049b2:	230c      	movs	r3, #12
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f80c 	bl	80049d4 <__malloc_unlock>
 80049bc:	e794      	b.n	80048e8 <_malloc_r+0x20>
 80049be:	6005      	str	r5, [r0, #0]
 80049c0:	e7d6      	b.n	8004970 <_malloc_r+0xa8>
 80049c2:	bf00      	nop
 80049c4:	20000308 	.word	0x20000308

080049c8 <__malloc_lock>:
 80049c8:	4801      	ldr	r0, [pc, #4]	@ (80049d0 <__malloc_lock+0x8>)
 80049ca:	f7ff bee8 	b.w	800479e <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000300 	.word	0x20000300

080049d4 <__malloc_unlock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	@ (80049dc <__malloc_unlock+0x8>)
 80049d6:	f7ff bee3 	b.w	80047a0 <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	20000300 	.word	0x20000300

080049e0 <__sflush_r>:
 80049e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e8:	0716      	lsls	r6, r2, #28
 80049ea:	4605      	mov	r5, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	d454      	bmi.n	8004a9a <__sflush_r+0xba>
 80049f0:	684b      	ldr	r3, [r1, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	dc02      	bgt.n	80049fc <__sflush_r+0x1c>
 80049f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	dd48      	ble.n	8004a8e <__sflush_r+0xae>
 80049fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	d045      	beq.n	8004a8e <__sflush_r+0xae>
 8004a02:	2300      	movs	r3, #0
 8004a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a08:	682f      	ldr	r7, [r5, #0]
 8004a0a:	6a21      	ldr	r1, [r4, #32]
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	d030      	beq.n	8004a72 <__sflush_r+0x92>
 8004a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	0759      	lsls	r1, r3, #29
 8004a16:	d505      	bpl.n	8004a24 <__sflush_r+0x44>
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a1e:	b10b      	cbz	r3, 8004a24 <__sflush_r+0x44>
 8004a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a28:	6a21      	ldr	r1, [r4, #32]
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b0      	blx	r6
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	d106      	bne.n	8004a42 <__sflush_r+0x62>
 8004a34:	6829      	ldr	r1, [r5, #0]
 8004a36:	291d      	cmp	r1, #29
 8004a38:	d82b      	bhi.n	8004a92 <__sflush_r+0xb2>
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae4 <__sflush_r+0x104>)
 8004a3c:	40ca      	lsrs	r2, r1
 8004a3e:	07d6      	lsls	r6, r2, #31
 8004a40:	d527      	bpl.n	8004a92 <__sflush_r+0xb2>
 8004a42:	2200      	movs	r2, #0
 8004a44:	6062      	str	r2, [r4, #4]
 8004a46:	04d9      	lsls	r1, r3, #19
 8004a48:	6922      	ldr	r2, [r4, #16]
 8004a4a:	6022      	str	r2, [r4, #0]
 8004a4c:	d504      	bpl.n	8004a58 <__sflush_r+0x78>
 8004a4e:	1c42      	adds	r2, r0, #1
 8004a50:	d101      	bne.n	8004a56 <__sflush_r+0x76>
 8004a52:	682b      	ldr	r3, [r5, #0]
 8004a54:	b903      	cbnz	r3, 8004a58 <__sflush_r+0x78>
 8004a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a5a:	602f      	str	r7, [r5, #0]
 8004a5c:	b1b9      	cbz	r1, 8004a8e <__sflush_r+0xae>
 8004a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a62:	4299      	cmp	r1, r3
 8004a64:	d002      	beq.n	8004a6c <__sflush_r+0x8c>
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff feba 	bl	80047e0 <_free_r>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a70:	e00d      	b.n	8004a8e <__sflush_r+0xae>
 8004a72:	2301      	movs	r3, #1
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b0      	blx	r6
 8004a78:	4602      	mov	r2, r0
 8004a7a:	1c50      	adds	r0, r2, #1
 8004a7c:	d1c9      	bne.n	8004a12 <__sflush_r+0x32>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0c6      	beq.n	8004a12 <__sflush_r+0x32>
 8004a84:	2b1d      	cmp	r3, #29
 8004a86:	d001      	beq.n	8004a8c <__sflush_r+0xac>
 8004a88:	2b16      	cmp	r3, #22
 8004a8a:	d11e      	bne.n	8004aca <__sflush_r+0xea>
 8004a8c:	602f      	str	r7, [r5, #0]
 8004a8e:	2000      	movs	r0, #0
 8004a90:	e022      	b.n	8004ad8 <__sflush_r+0xf8>
 8004a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a96:	b21b      	sxth	r3, r3
 8004a98:	e01b      	b.n	8004ad2 <__sflush_r+0xf2>
 8004a9a:	690f      	ldr	r7, [r1, #16]
 8004a9c:	2f00      	cmp	r7, #0
 8004a9e:	d0f6      	beq.n	8004a8e <__sflush_r+0xae>
 8004aa0:	0793      	lsls	r3, r2, #30
 8004aa2:	680e      	ldr	r6, [r1, #0]
 8004aa4:	bf08      	it	eq
 8004aa6:	694b      	ldreq	r3, [r1, #20]
 8004aa8:	600f      	str	r7, [r1, #0]
 8004aaa:	bf18      	it	ne
 8004aac:	2300      	movne	r3, #0
 8004aae:	eba6 0807 	sub.w	r8, r6, r7
 8004ab2:	608b      	str	r3, [r1, #8]
 8004ab4:	f1b8 0f00 	cmp.w	r8, #0
 8004ab8:	dde9      	ble.n	8004a8e <__sflush_r+0xae>
 8004aba:	6a21      	ldr	r1, [r4, #32]
 8004abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004abe:	4643      	mov	r3, r8
 8004ac0:	463a      	mov	r2, r7
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b0      	blx	r6
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	dc08      	bgt.n	8004adc <__sflush_r+0xfc>
 8004aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004adc:	4407      	add	r7, r0
 8004ade:	eba8 0800 	sub.w	r8, r8, r0
 8004ae2:	e7e7      	b.n	8004ab4 <__sflush_r+0xd4>
 8004ae4:	20400001 	.word	0x20400001

08004ae8 <_fflush_r>:
 8004ae8:	b538      	push	{r3, r4, r5, lr}
 8004aea:	690b      	ldr	r3, [r1, #16]
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	b913      	cbnz	r3, 8004af8 <_fflush_r+0x10>
 8004af2:	2500      	movs	r5, #0
 8004af4:	4628      	mov	r0, r5
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	b118      	cbz	r0, 8004b02 <_fflush_r+0x1a>
 8004afa:	6a03      	ldr	r3, [r0, #32]
 8004afc:	b90b      	cbnz	r3, 8004b02 <_fflush_r+0x1a>
 8004afe:	f7ff fcff 	bl	8004500 <__sinit>
 8004b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f3      	beq.n	8004af2 <_fflush_r+0xa>
 8004b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b0c:	07d0      	lsls	r0, r2, #31
 8004b0e:	d404      	bmi.n	8004b1a <_fflush_r+0x32>
 8004b10:	0599      	lsls	r1, r3, #22
 8004b12:	d402      	bmi.n	8004b1a <_fflush_r+0x32>
 8004b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b16:	f7ff fe42 	bl	800479e <__retarget_lock_acquire_recursive>
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f7ff ff5f 	bl	80049e0 <__sflush_r>
 8004b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b24:	07da      	lsls	r2, r3, #31
 8004b26:	4605      	mov	r5, r0
 8004b28:	d4e4      	bmi.n	8004af4 <_fflush_r+0xc>
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	059b      	lsls	r3, r3, #22
 8004b2e:	d4e1      	bmi.n	8004af4 <_fflush_r+0xc>
 8004b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b32:	f7ff fe35 	bl	80047a0 <__retarget_lock_release_recursive>
 8004b36:	e7dd      	b.n	8004af4 <_fflush_r+0xc>

08004b38 <fiprintf>:
 8004b38:	b40e      	push	{r1, r2, r3}
 8004b3a:	b503      	push	{r0, r1, lr}
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	ab03      	add	r3, sp, #12
 8004b40:	4805      	ldr	r0, [pc, #20]	@ (8004b58 <fiprintf+0x20>)
 8004b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b46:	6800      	ldr	r0, [r0, #0]
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	f000 f847 	bl	8004bdc <_vfiprintf_r>
 8004b4e:	b002      	add	sp, #8
 8004b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b54:	b003      	add	sp, #12
 8004b56:	4770      	bx	lr
 8004b58:	2000002c 	.word	0x2000002c

08004b5c <_sbrk_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4d06      	ldr	r5, [pc, #24]	@ (8004b78 <_sbrk_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4604      	mov	r4, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	f7fc fa9e 	bl	80010a8 <_sbrk>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_sbrk_r+0x1a>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_sbrk_r+0x1a>
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200002fc 	.word	0x200002fc

08004b7c <abort>:
 8004b7c:	b508      	push	{r3, lr}
 8004b7e:	2006      	movs	r0, #6
 8004b80:	f000 fb8c 	bl	800529c <raise>
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7fc fa17 	bl	8000fb8 <_exit>

08004b8a <__sfputc_r>:
 8004b8a:	6893      	ldr	r3, [r2, #8]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	b410      	push	{r4}
 8004b92:	6093      	str	r3, [r2, #8]
 8004b94:	da08      	bge.n	8004ba8 <__sfputc_r+0x1e>
 8004b96:	6994      	ldr	r4, [r2, #24]
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	db01      	blt.n	8004ba0 <__sfputc_r+0x16>
 8004b9c:	290a      	cmp	r1, #10
 8004b9e:	d103      	bne.n	8004ba8 <__sfputc_r+0x1e>
 8004ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ba4:	f000 babe 	b.w	8005124 <__swbuf_r>
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	1c58      	adds	r0, r3, #1
 8004bac:	6010      	str	r0, [r2, #0]
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <__sfputs_r>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	4614      	mov	r4, r2
 8004bc0:	18d5      	adds	r5, r2, r3
 8004bc2:	42ac      	cmp	r4, r5
 8004bc4:	d101      	bne.n	8004bca <__sfputs_r+0x12>
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e007      	b.n	8004bda <__sfputs_r+0x22>
 8004bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bce:	463a      	mov	r2, r7
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff ffda 	bl	8004b8a <__sfputc_r>
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	d1f3      	bne.n	8004bc2 <__sfputs_r+0xa>
 8004bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004bdc <_vfiprintf_r>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	460d      	mov	r5, r1
 8004be2:	b09d      	sub	sp, #116	@ 0x74
 8004be4:	4614      	mov	r4, r2
 8004be6:	4698      	mov	r8, r3
 8004be8:	4606      	mov	r6, r0
 8004bea:	b118      	cbz	r0, 8004bf4 <_vfiprintf_r+0x18>
 8004bec:	6a03      	ldr	r3, [r0, #32]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x18>
 8004bf0:	f7ff fc86 	bl	8004500 <__sinit>
 8004bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bf6:	07d9      	lsls	r1, r3, #31
 8004bf8:	d405      	bmi.n	8004c06 <_vfiprintf_r+0x2a>
 8004bfa:	89ab      	ldrh	r3, [r5, #12]
 8004bfc:	059a      	lsls	r2, r3, #22
 8004bfe:	d402      	bmi.n	8004c06 <_vfiprintf_r+0x2a>
 8004c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c02:	f7ff fdcc 	bl	800479e <__retarget_lock_acquire_recursive>
 8004c06:	89ab      	ldrh	r3, [r5, #12]
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	d501      	bpl.n	8004c10 <_vfiprintf_r+0x34>
 8004c0c:	692b      	ldr	r3, [r5, #16]
 8004c0e:	b99b      	cbnz	r3, 8004c38 <_vfiprintf_r+0x5c>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 fac4 	bl	80051a0 <__swsetup_r>
 8004c18:	b170      	cbz	r0, 8004c38 <_vfiprintf_r+0x5c>
 8004c1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c1c:	07dc      	lsls	r4, r3, #31
 8004c1e:	d504      	bpl.n	8004c2a <_vfiprintf_r+0x4e>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b01d      	add	sp, #116	@ 0x74
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	89ab      	ldrh	r3, [r5, #12]
 8004c2c:	0598      	lsls	r0, r3, #22
 8004c2e:	d4f7      	bmi.n	8004c20 <_vfiprintf_r+0x44>
 8004c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c32:	f7ff fdb5 	bl	80047a0 <__retarget_lock_release_recursive>
 8004c36:	e7f3      	b.n	8004c20 <_vfiprintf_r+0x44>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c46:	2330      	movs	r3, #48	@ 0x30
 8004c48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004df8 <_vfiprintf_r+0x21c>
 8004c4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c50:	f04f 0901 	mov.w	r9, #1
 8004c54:	4623      	mov	r3, r4
 8004c56:	469a      	mov	sl, r3
 8004c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c5c:	b10a      	cbz	r2, 8004c62 <_vfiprintf_r+0x86>
 8004c5e:	2a25      	cmp	r2, #37	@ 0x25
 8004c60:	d1f9      	bne.n	8004c56 <_vfiprintf_r+0x7a>
 8004c62:	ebba 0b04 	subs.w	fp, sl, r4
 8004c66:	d00b      	beq.n	8004c80 <_vfiprintf_r+0xa4>
 8004c68:	465b      	mov	r3, fp
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff ffa2 	bl	8004bb8 <__sfputs_r>
 8004c74:	3001      	adds	r0, #1
 8004c76:	f000 80a7 	beq.w	8004dc8 <_vfiprintf_r+0x1ec>
 8004c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c7c:	445a      	add	r2, fp
 8004c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c80:	f89a 3000 	ldrb.w	r3, [sl]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 809f 	beq.w	8004dc8 <_vfiprintf_r+0x1ec>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c94:	f10a 0a01 	add.w	sl, sl, #1
 8004c98:	9304      	str	r3, [sp, #16]
 8004c9a:	9307      	str	r3, [sp, #28]
 8004c9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ca0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ca2:	4654      	mov	r4, sl
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004caa:	4853      	ldr	r0, [pc, #332]	@ (8004df8 <_vfiprintf_r+0x21c>)
 8004cac:	f7fb fa90 	bl	80001d0 <memchr>
 8004cb0:	9a04      	ldr	r2, [sp, #16]
 8004cb2:	b9d8      	cbnz	r0, 8004cec <_vfiprintf_r+0x110>
 8004cb4:	06d1      	lsls	r1, r2, #27
 8004cb6:	bf44      	itt	mi
 8004cb8:	2320      	movmi	r3, #32
 8004cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cbe:	0713      	lsls	r3, r2, #28
 8004cc0:	bf44      	itt	mi
 8004cc2:	232b      	movmi	r3, #43	@ 0x2b
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cce:	d015      	beq.n	8004cfc <_vfiprintf_r+0x120>
 8004cd0:	9a07      	ldr	r2, [sp, #28]
 8004cd2:	4654      	mov	r4, sl
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f04f 0c0a 	mov.w	ip, #10
 8004cda:	4621      	mov	r1, r4
 8004cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ce0:	3b30      	subs	r3, #48	@ 0x30
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d94b      	bls.n	8004d7e <_vfiprintf_r+0x1a2>
 8004ce6:	b1b0      	cbz	r0, 8004d16 <_vfiprintf_r+0x13a>
 8004ce8:	9207      	str	r2, [sp, #28]
 8004cea:	e014      	b.n	8004d16 <_vfiprintf_r+0x13a>
 8004cec:	eba0 0308 	sub.w	r3, r0, r8
 8004cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	46a2      	mov	sl, r4
 8004cfa:	e7d2      	b.n	8004ca2 <_vfiprintf_r+0xc6>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	1d19      	adds	r1, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9103      	str	r1, [sp, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfbb      	ittet	lt
 8004d08:	425b      	neglt	r3, r3
 8004d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d0e:	9307      	strge	r3, [sp, #28]
 8004d10:	9307      	strlt	r3, [sp, #28]
 8004d12:	bfb8      	it	lt
 8004d14:	9204      	strlt	r2, [sp, #16]
 8004d16:	7823      	ldrb	r3, [r4, #0]
 8004d18:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d1a:	d10a      	bne.n	8004d32 <_vfiprintf_r+0x156>
 8004d1c:	7863      	ldrb	r3, [r4, #1]
 8004d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d20:	d132      	bne.n	8004d88 <_vfiprintf_r+0x1ac>
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	9203      	str	r2, [sp, #12]
 8004d2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d2e:	3402      	adds	r4, #2
 8004d30:	9305      	str	r3, [sp, #20]
 8004d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e08 <_vfiprintf_r+0x22c>
 8004d36:	7821      	ldrb	r1, [r4, #0]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f7fb fa48 	bl	80001d0 <memchr>
 8004d40:	b138      	cbz	r0, 8004d52 <_vfiprintf_r+0x176>
 8004d42:	9b04      	ldr	r3, [sp, #16]
 8004d44:	eba0 000a 	sub.w	r0, r0, sl
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	4082      	lsls	r2, r0
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	3401      	adds	r4, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d56:	4829      	ldr	r0, [pc, #164]	@ (8004dfc <_vfiprintf_r+0x220>)
 8004d58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d5c:	2206      	movs	r2, #6
 8004d5e:	f7fb fa37 	bl	80001d0 <memchr>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d03f      	beq.n	8004de6 <_vfiprintf_r+0x20a>
 8004d66:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <_vfiprintf_r+0x224>)
 8004d68:	bb1b      	cbnz	r3, 8004db2 <_vfiprintf_r+0x1d6>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	3308      	adds	r3, #8
 8004d74:	9303      	str	r3, [sp, #12]
 8004d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d78:	443b      	add	r3, r7
 8004d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d7c:	e76a      	b.n	8004c54 <_vfiprintf_r+0x78>
 8004d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d82:	460c      	mov	r4, r1
 8004d84:	2001      	movs	r0, #1
 8004d86:	e7a8      	b.n	8004cda <_vfiprintf_r+0xfe>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	3401      	adds	r4, #1
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4620      	mov	r0, r4
 8004d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d9a:	3a30      	subs	r2, #48	@ 0x30
 8004d9c:	2a09      	cmp	r2, #9
 8004d9e:	d903      	bls.n	8004da8 <_vfiprintf_r+0x1cc>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0c6      	beq.n	8004d32 <_vfiprintf_r+0x156>
 8004da4:	9105      	str	r1, [sp, #20]
 8004da6:	e7c4      	b.n	8004d32 <_vfiprintf_r+0x156>
 8004da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dac:	4604      	mov	r4, r0
 8004dae:	2301      	movs	r3, #1
 8004db0:	e7f0      	b.n	8004d94 <_vfiprintf_r+0x1b8>
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462a      	mov	r2, r5
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <_vfiprintf_r+0x228>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f3af 8000 	nop.w
 8004dc2:	4607      	mov	r7, r0
 8004dc4:	1c78      	adds	r0, r7, #1
 8004dc6:	d1d6      	bne.n	8004d76 <_vfiprintf_r+0x19a>
 8004dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	d405      	bmi.n	8004dda <_vfiprintf_r+0x1fe>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	059a      	lsls	r2, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_vfiprintf_r+0x1fe>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dd6:	f7ff fce3 	bl	80047a0 <__retarget_lock_release_recursive>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	065b      	lsls	r3, r3, #25
 8004dde:	f53f af1f 	bmi.w	8004c20 <_vfiprintf_r+0x44>
 8004de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de4:	e71e      	b.n	8004c24 <_vfiprintf_r+0x48>
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <_vfiprintf_r+0x228>)
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f879 	bl	8004ee8 <_printf_i>
 8004df6:	e7e4      	b.n	8004dc2 <_vfiprintf_r+0x1e6>
 8004df8:	080055be 	.word	0x080055be
 8004dfc:	080055c8 	.word	0x080055c8
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004bb9 	.word	0x08004bb9
 8004e08:	080055c4 	.word	0x080055c4

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4698      	mov	r8, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfb8      	it	lt
 8004e20:	4613      	movlt	r3, r2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc26      	bgt.n	8004ea2 <_printf_common+0x96>
 8004e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	3b00      	subs	r3, #0
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d42b      	bmi.n	8004ebc <_printf_common+0xb0>
 8004e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e68:	4641      	mov	r1, r8
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	47c8      	blx	r9
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d01e      	beq.n	8004eb0 <_printf_common+0xa4>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf02      	ittt	eq
 8004e7e:	68e5      	ldreq	r5, [r4, #12]
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	1aed      	subeq	r5, r5, r3
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	bf0c      	ite	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	2500      	movne	r5, #0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfc4      	itt	gt
 8004e92:	1a9b      	subgt	r3, r3, r2
 8004e94:	18ed      	addgt	r5, r5, r3
 8004e96:	2600      	movs	r6, #0
 8004e98:	341a      	adds	r4, #26
 8004e9a:	42b5      	cmp	r5, r6
 8004e9c:	d11a      	bne.n	8004ed4 <_printf_common+0xc8>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e008      	b.n	8004eb4 <_printf_common+0xa8>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	47c8      	blx	r9
 8004eac:	3001      	adds	r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_printf_common+0xac>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7c6      	b.n	8004e4a <_printf_common+0x3e>
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	2030      	movs	r0, #48	@ 0x30
 8004ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ec6:	4422      	add	r2, r4
 8004ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	e7c7      	b.n	8004e64 <_printf_common+0x58>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	4641      	mov	r1, r8
 8004eda:	4638      	mov	r0, r7
 8004edc:	47c8      	blx	r9
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d0e6      	beq.n	8004eb0 <_printf_common+0xa4>
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7d9      	b.n	8004e9a <_printf_common+0x8e>
	...

08004ee8 <_printf_i>:
 8004ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	7e0f      	ldrb	r7, [r1, #24]
 8004eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ef0:	2f78      	cmp	r7, #120	@ 0x78
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004efe:	d807      	bhi.n	8004f10 <_printf_i+0x28>
 8004f00:	2f62      	cmp	r7, #98	@ 0x62
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x32>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	f000 80d1 	beq.w	80050ac <_printf_i+0x1c4>
 8004f0a:	2f58      	cmp	r7, #88	@ 0x58
 8004f0c:	f000 80b8 	beq.w	8005080 <_printf_i+0x198>
 8004f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f18:	e03a      	b.n	8004f90 <_printf_i+0xa8>
 8004f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f1e:	2b15      	cmp	r3, #21
 8004f20:	d8f6      	bhi.n	8004f10 <_printf_i+0x28>
 8004f22:	a101      	add	r1, pc, #4	@ (adr r1, 8004f28 <_printf_i+0x40>)
 8004f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08004f11 	.word	0x08004f11
 8004f34:	08004f11 	.word	0x08004f11
 8004f38:	08004f11 	.word	0x08004f11
 8004f3c:	08004f11 	.word	0x08004f11
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	08004f11 	.word	0x08004f11
 8004f48:	08004f11 	.word	0x08004f11
 8004f4c:	08004f11 	.word	0x08004f11
 8004f50:	08004f11 	.word	0x08004f11
 8004f54:	08005093 	.word	0x08005093
 8004f58:	08004fbf 	.word	0x08004fbf
 8004f5c:	0800504d 	.word	0x0800504d
 8004f60:	08004f11 	.word	0x08004f11
 8004f64:	08004f11 	.word	0x08004f11
 8004f68:	080050b5 	.word	0x080050b5
 8004f6c:	08004f11 	.word	0x08004f11
 8004f70:	08004fbf 	.word	0x08004fbf
 8004f74:	08004f11 	.word	0x08004f11
 8004f78:	08004f11 	.word	0x08004f11
 8004f7c:	08005055 	.word	0x08005055
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6032      	str	r2, [r6, #0]
 8004f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09c      	b.n	80050ce <_printf_i+0x1e6>
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	6031      	str	r1, [r6, #0]
 8004f9c:	0606      	lsls	r6, r0, #24
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0xbc>
 8004fa0:	681d      	ldr	r5, [r3, #0]
 8004fa2:	e003      	b.n	8004fac <_printf_i+0xc4>
 8004fa4:	0645      	lsls	r5, r0, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0xb8>
 8004fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	da03      	bge.n	8004fb8 <_printf_i+0xd0>
 8004fb0:	232d      	movs	r3, #45	@ 0x2d
 8004fb2:	426d      	negs	r5, r5
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb8:	4858      	ldr	r0, [pc, #352]	@ (800511c <_printf_i+0x234>)
 8004fba:	230a      	movs	r3, #10
 8004fbc:	e011      	b.n	8004fe2 <_printf_i+0xfa>
 8004fbe:	6821      	ldr	r1, [r4, #0]
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	0608      	lsls	r0, r1, #24
 8004fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0xe8>
 8004fca:	0649      	lsls	r1, r1, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2ad      	uxthmi	r5, r5
 8004fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fd2:	4852      	ldr	r0, [pc, #328]	@ (800511c <_printf_i+0x234>)
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	bf14      	ite	ne
 8004fd8:	230a      	movne	r3, #10
 8004fda:	2308      	moveq	r3, #8
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fe2:	6866      	ldr	r6, [r4, #4]
 8004fe4:	60a6      	str	r6, [r4, #8]
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	db05      	blt.n	8004ff6 <_printf_i+0x10e>
 8004fea:	6821      	ldr	r1, [r4, #0]
 8004fec:	432e      	orrs	r6, r5
 8004fee:	f021 0104 	bic.w	r1, r1, #4
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	d04b      	beq.n	800508e <_printf_i+0x1a6>
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffc:	fb03 5711 	mls	r7, r3, r1, r5
 8005000:	5dc7      	ldrb	r7, [r0, r7]
 8005002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005006:	462f      	mov	r7, r5
 8005008:	42bb      	cmp	r3, r7
 800500a:	460d      	mov	r5, r1
 800500c:	d9f4      	bls.n	8004ff8 <_printf_i+0x110>
 800500e:	2b08      	cmp	r3, #8
 8005010:	d10b      	bne.n	800502a <_printf_i+0x142>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	07df      	lsls	r7, r3, #31
 8005016:	d508      	bpl.n	800502a <_printf_i+0x142>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6861      	ldr	r1, [r4, #4]
 800501c:	4299      	cmp	r1, r3
 800501e:	bfde      	ittt	le
 8005020:	2330      	movle	r3, #48	@ 0x30
 8005022:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005026:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502a:	1b92      	subs	r2, r2, r6
 800502c:	6122      	str	r2, [r4, #16]
 800502e:	f8cd a000 	str.w	sl, [sp]
 8005032:	464b      	mov	r3, r9
 8005034:	aa03      	add	r2, sp, #12
 8005036:	4621      	mov	r1, r4
 8005038:	4640      	mov	r0, r8
 800503a:	f7ff fee7 	bl	8004e0c <_printf_common>
 800503e:	3001      	adds	r0, #1
 8005040:	d14a      	bne.n	80050d8 <_printf_i+0x1f0>
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	b004      	add	sp, #16
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	4832      	ldr	r0, [pc, #200]	@ (8005120 <_printf_i+0x238>)
 8005056:	2778      	movs	r7, #120	@ 0x78
 8005058:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	061f      	lsls	r7, r3, #24
 8005062:	f851 5b04 	ldr.w	r5, [r1], #4
 8005066:	d402      	bmi.n	800506e <_printf_i+0x186>
 8005068:	065f      	lsls	r7, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	6031      	str	r1, [r6, #0]
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	bf44      	itt	mi
 8005074:	f043 0320 	orrmi.w	r3, r3, #32
 8005078:	6023      	strmi	r3, [r4, #0]
 800507a:	b11d      	cbz	r5, 8005084 <_printf_i+0x19c>
 800507c:	2310      	movs	r3, #16
 800507e:	e7ad      	b.n	8004fdc <_printf_i+0xf4>
 8005080:	4826      	ldr	r0, [pc, #152]	@ (800511c <_printf_i+0x234>)
 8005082:	e7e9      	b.n	8005058 <_printf_i+0x170>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	e7f6      	b.n	800507c <_printf_i+0x194>
 800508e:	4616      	mov	r6, r2
 8005090:	e7bd      	b.n	800500e <_printf_i+0x126>
 8005092:	6833      	ldr	r3, [r6, #0]
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	6961      	ldr	r1, [r4, #20]
 8005098:	1d18      	adds	r0, r3, #4
 800509a:	6030      	str	r0, [r6, #0]
 800509c:	062e      	lsls	r6, r5, #24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0x1be>
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x1c4>
 80050a6:	0668      	lsls	r0, r5, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x1ba>
 80050aa:	8019      	strh	r1, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	4616      	mov	r6, r2
 80050b2:	e7bc      	b.n	800502e <_printf_i+0x146>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	6032      	str	r2, [r6, #0]
 80050ba:	681e      	ldr	r6, [r3, #0]
 80050bc:	6862      	ldr	r2, [r4, #4]
 80050be:	2100      	movs	r1, #0
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7fb f885 	bl	80001d0 <memchr>
 80050c6:	b108      	cbz	r0, 80050cc <_printf_i+0x1e4>
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d6:	e7aa      	b.n	800502e <_printf_i+0x146>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	4632      	mov	r2, r6
 80050dc:	4649      	mov	r1, r9
 80050de:	4640      	mov	r0, r8
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0ad      	beq.n	8005042 <_printf_i+0x15a>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d413      	bmi.n	8005114 <_printf_i+0x22c>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e7a6      	b.n	8005046 <_printf_i+0x15e>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4632      	mov	r2, r6
 80050fc:	4649      	mov	r1, r9
 80050fe:	4640      	mov	r0, r8
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d09d      	beq.n	8005042 <_printf_i+0x15a>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	9903      	ldr	r1, [sp, #12]
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	42ab      	cmp	r3, r5
 8005110:	dcf2      	bgt.n	80050f8 <_printf_i+0x210>
 8005112:	e7eb      	b.n	80050ec <_printf_i+0x204>
 8005114:	2500      	movs	r5, #0
 8005116:	f104 0619 	add.w	r6, r4, #25
 800511a:	e7f5      	b.n	8005108 <_printf_i+0x220>
 800511c:	080055cf 	.word	0x080055cf
 8005120:	080055e0 	.word	0x080055e0

08005124 <__swbuf_r>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	460e      	mov	r6, r1
 8005128:	4614      	mov	r4, r2
 800512a:	4605      	mov	r5, r0
 800512c:	b118      	cbz	r0, 8005136 <__swbuf_r+0x12>
 800512e:	6a03      	ldr	r3, [r0, #32]
 8005130:	b90b      	cbnz	r3, 8005136 <__swbuf_r+0x12>
 8005132:	f7ff f9e5 	bl	8004500 <__sinit>
 8005136:	69a3      	ldr	r3, [r4, #24]
 8005138:	60a3      	str	r3, [r4, #8]
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	071a      	lsls	r2, r3, #28
 800513e:	d501      	bpl.n	8005144 <__swbuf_r+0x20>
 8005140:	6923      	ldr	r3, [r4, #16]
 8005142:	b943      	cbnz	r3, 8005156 <__swbuf_r+0x32>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f82a 	bl	80051a0 <__swsetup_r>
 800514c:	b118      	cbz	r0, 8005156 <__swbuf_r+0x32>
 800514e:	f04f 37ff 	mov.w	r7, #4294967295
 8005152:	4638      	mov	r0, r7
 8005154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	6922      	ldr	r2, [r4, #16]
 800515a:	1a98      	subs	r0, r3, r2
 800515c:	6963      	ldr	r3, [r4, #20]
 800515e:	b2f6      	uxtb	r6, r6
 8005160:	4283      	cmp	r3, r0
 8005162:	4637      	mov	r7, r6
 8005164:	dc05      	bgt.n	8005172 <__swbuf_r+0x4e>
 8005166:	4621      	mov	r1, r4
 8005168:	4628      	mov	r0, r5
 800516a:	f7ff fcbd 	bl	8004ae8 <_fflush_r>
 800516e:	2800      	cmp	r0, #0
 8005170:	d1ed      	bne.n	800514e <__swbuf_r+0x2a>
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	3b01      	subs	r3, #1
 8005176:	60a3      	str	r3, [r4, #8]
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	6022      	str	r2, [r4, #0]
 800517e:	701e      	strb	r6, [r3, #0]
 8005180:	6962      	ldr	r2, [r4, #20]
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	429a      	cmp	r2, r3
 8005186:	d004      	beq.n	8005192 <__swbuf_r+0x6e>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	07db      	lsls	r3, r3, #31
 800518c:	d5e1      	bpl.n	8005152 <__swbuf_r+0x2e>
 800518e:	2e0a      	cmp	r6, #10
 8005190:	d1df      	bne.n	8005152 <__swbuf_r+0x2e>
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f7ff fca7 	bl	8004ae8 <_fflush_r>
 800519a:	2800      	cmp	r0, #0
 800519c:	d0d9      	beq.n	8005152 <__swbuf_r+0x2e>
 800519e:	e7d6      	b.n	800514e <__swbuf_r+0x2a>

080051a0 <__swsetup_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4b29      	ldr	r3, [pc, #164]	@ (8005248 <__swsetup_r+0xa8>)
 80051a4:	4605      	mov	r5, r0
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	460c      	mov	r4, r1
 80051aa:	b118      	cbz	r0, 80051b4 <__swsetup_r+0x14>
 80051ac:	6a03      	ldr	r3, [r0, #32]
 80051ae:	b90b      	cbnz	r3, 80051b4 <__swsetup_r+0x14>
 80051b0:	f7ff f9a6 	bl	8004500 <__sinit>
 80051b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b8:	0719      	lsls	r1, r3, #28
 80051ba:	d422      	bmi.n	8005202 <__swsetup_r+0x62>
 80051bc:	06da      	lsls	r2, r3, #27
 80051be:	d407      	bmi.n	80051d0 <__swsetup_r+0x30>
 80051c0:	2209      	movs	r2, #9
 80051c2:	602a      	str	r2, [r5, #0]
 80051c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c8:	81a3      	strh	r3, [r4, #12]
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	e033      	b.n	8005238 <__swsetup_r+0x98>
 80051d0:	0758      	lsls	r0, r3, #29
 80051d2:	d512      	bpl.n	80051fa <__swsetup_r+0x5a>
 80051d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051d6:	b141      	cbz	r1, 80051ea <__swsetup_r+0x4a>
 80051d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051dc:	4299      	cmp	r1, r3
 80051de:	d002      	beq.n	80051e6 <__swsetup_r+0x46>
 80051e0:	4628      	mov	r0, r5
 80051e2:	f7ff fafd 	bl	80047e0 <_free_r>
 80051e6:	2300      	movs	r3, #0
 80051e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051f0:	81a3      	strh	r3, [r4, #12]
 80051f2:	2300      	movs	r3, #0
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	f043 0308 	orr.w	r3, r3, #8
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	b94b      	cbnz	r3, 800521a <__swsetup_r+0x7a>
 8005206:	89a3      	ldrh	r3, [r4, #12]
 8005208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800520c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005210:	d003      	beq.n	800521a <__swsetup_r+0x7a>
 8005212:	4621      	mov	r1, r4
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f883 	bl	8005320 <__smakebuf_r>
 800521a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800521e:	f013 0201 	ands.w	r2, r3, #1
 8005222:	d00a      	beq.n	800523a <__swsetup_r+0x9a>
 8005224:	2200      	movs	r2, #0
 8005226:	60a2      	str	r2, [r4, #8]
 8005228:	6962      	ldr	r2, [r4, #20]
 800522a:	4252      	negs	r2, r2
 800522c:	61a2      	str	r2, [r4, #24]
 800522e:	6922      	ldr	r2, [r4, #16]
 8005230:	b942      	cbnz	r2, 8005244 <__swsetup_r+0xa4>
 8005232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005236:	d1c5      	bne.n	80051c4 <__swsetup_r+0x24>
 8005238:	bd38      	pop	{r3, r4, r5, pc}
 800523a:	0799      	lsls	r1, r3, #30
 800523c:	bf58      	it	pl
 800523e:	6962      	ldrpl	r2, [r4, #20]
 8005240:	60a2      	str	r2, [r4, #8]
 8005242:	e7f4      	b.n	800522e <__swsetup_r+0x8e>
 8005244:	2000      	movs	r0, #0
 8005246:	e7f7      	b.n	8005238 <__swsetup_r+0x98>
 8005248:	2000002c 	.word	0x2000002c

0800524c <_raise_r>:
 800524c:	291f      	cmp	r1, #31
 800524e:	b538      	push	{r3, r4, r5, lr}
 8005250:	4605      	mov	r5, r0
 8005252:	460c      	mov	r4, r1
 8005254:	d904      	bls.n	8005260 <_raise_r+0x14>
 8005256:	2316      	movs	r3, #22
 8005258:	6003      	str	r3, [r0, #0]
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005262:	b112      	cbz	r2, 800526a <_raise_r+0x1e>
 8005264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005268:	b94b      	cbnz	r3, 800527e <_raise_r+0x32>
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f830 	bl	80052d0 <_getpid_r>
 8005270:	4622      	mov	r2, r4
 8005272:	4601      	mov	r1, r0
 8005274:	4628      	mov	r0, r5
 8005276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800527a:	f000 b817 	b.w	80052ac <_kill_r>
 800527e:	2b01      	cmp	r3, #1
 8005280:	d00a      	beq.n	8005298 <_raise_r+0x4c>
 8005282:	1c59      	adds	r1, r3, #1
 8005284:	d103      	bne.n	800528e <_raise_r+0x42>
 8005286:	2316      	movs	r3, #22
 8005288:	6003      	str	r3, [r0, #0]
 800528a:	2001      	movs	r0, #1
 800528c:	e7e7      	b.n	800525e <_raise_r+0x12>
 800528e:	2100      	movs	r1, #0
 8005290:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005294:	4620      	mov	r0, r4
 8005296:	4798      	blx	r3
 8005298:	2000      	movs	r0, #0
 800529a:	e7e0      	b.n	800525e <_raise_r+0x12>

0800529c <raise>:
 800529c:	4b02      	ldr	r3, [pc, #8]	@ (80052a8 <raise+0xc>)
 800529e:	4601      	mov	r1, r0
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	f7ff bfd3 	b.w	800524c <_raise_r>
 80052a6:	bf00      	nop
 80052a8:	2000002c 	.word	0x2000002c

080052ac <_kill_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	@ (80052cc <_kill_r+0x20>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	602b      	str	r3, [r5, #0]
 80052ba:	f7fb fe6d 	bl	8000f98 <_kill>
 80052be:	1c43      	adds	r3, r0, #1
 80052c0:	d102      	bne.n	80052c8 <_kill_r+0x1c>
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	b103      	cbz	r3, 80052c8 <_kill_r+0x1c>
 80052c6:	6023      	str	r3, [r4, #0]
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	200002fc 	.word	0x200002fc

080052d0 <_getpid_r>:
 80052d0:	f7fb be5a 	b.w	8000f88 <_getpid>

080052d4 <__swhatbuf_r>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	460c      	mov	r4, r1
 80052d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052dc:	2900      	cmp	r1, #0
 80052de:	b096      	sub	sp, #88	@ 0x58
 80052e0:	4615      	mov	r5, r2
 80052e2:	461e      	mov	r6, r3
 80052e4:	da0d      	bge.n	8005302 <__swhatbuf_r+0x2e>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	bf14      	ite	ne
 80052f2:	2340      	movne	r3, #64	@ 0x40
 80052f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052f8:	2000      	movs	r0, #0
 80052fa:	6031      	str	r1, [r6, #0]
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	b016      	add	sp, #88	@ 0x58
 8005300:	bd70      	pop	{r4, r5, r6, pc}
 8005302:	466a      	mov	r2, sp
 8005304:	f000 f848 	bl	8005398 <_fstat_r>
 8005308:	2800      	cmp	r0, #0
 800530a:	dbec      	blt.n	80052e6 <__swhatbuf_r+0x12>
 800530c:	9901      	ldr	r1, [sp, #4]
 800530e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005316:	4259      	negs	r1, r3
 8005318:	4159      	adcs	r1, r3
 800531a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800531e:	e7eb      	b.n	80052f8 <__swhatbuf_r+0x24>

08005320 <__smakebuf_r>:
 8005320:	898b      	ldrh	r3, [r1, #12]
 8005322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005324:	079d      	lsls	r5, r3, #30
 8005326:	4606      	mov	r6, r0
 8005328:	460c      	mov	r4, r1
 800532a:	d507      	bpl.n	800533c <__smakebuf_r+0x1c>
 800532c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005330:	6023      	str	r3, [r4, #0]
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	2301      	movs	r3, #1
 8005336:	6163      	str	r3, [r4, #20]
 8005338:	b003      	add	sp, #12
 800533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533c:	ab01      	add	r3, sp, #4
 800533e:	466a      	mov	r2, sp
 8005340:	f7ff ffc8 	bl	80052d4 <__swhatbuf_r>
 8005344:	9f00      	ldr	r7, [sp, #0]
 8005346:	4605      	mov	r5, r0
 8005348:	4639      	mov	r1, r7
 800534a:	4630      	mov	r0, r6
 800534c:	f7ff fabc 	bl	80048c8 <_malloc_r>
 8005350:	b948      	cbnz	r0, 8005366 <__smakebuf_r+0x46>
 8005352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005356:	059a      	lsls	r2, r3, #22
 8005358:	d4ee      	bmi.n	8005338 <__smakebuf_r+0x18>
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	f043 0302 	orr.w	r3, r3, #2
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	e7e2      	b.n	800532c <__smakebuf_r+0xc>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	6020      	str	r0, [r4, #0]
 800536a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800536e:	81a3      	strh	r3, [r4, #12]
 8005370:	9b01      	ldr	r3, [sp, #4]
 8005372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005376:	b15b      	cbz	r3, 8005390 <__smakebuf_r+0x70>
 8005378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537c:	4630      	mov	r0, r6
 800537e:	f000 f81d 	bl	80053bc <_isatty_r>
 8005382:	b128      	cbz	r0, 8005390 <__smakebuf_r+0x70>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	431d      	orrs	r5, r3
 8005394:	81a5      	strh	r5, [r4, #12]
 8005396:	e7cf      	b.n	8005338 <__smakebuf_r+0x18>

08005398 <_fstat_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4d07      	ldr	r5, [pc, #28]	@ (80053b8 <_fstat_r+0x20>)
 800539c:	2300      	movs	r3, #0
 800539e:	4604      	mov	r4, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	602b      	str	r3, [r5, #0]
 80053a6:	f7fb fe57 	bl	8001058 <_fstat>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d102      	bne.n	80053b4 <_fstat_r+0x1c>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	b103      	cbz	r3, 80053b4 <_fstat_r+0x1c>
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
 80053b6:	bf00      	nop
 80053b8:	200002fc 	.word	0x200002fc

080053bc <_isatty_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d06      	ldr	r5, [pc, #24]	@ (80053d8 <_isatty_r+0x1c>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fb fe56 	bl	8001078 <_isatty>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_isatty_r+0x1a>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_isatty_r+0x1a>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	200002fc 	.word	0x200002fc

080053dc <_init>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr

080053e8 <_fini>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr
