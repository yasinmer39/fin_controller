
fin_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000510c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800529c  0800529c  0000629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00007074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a4  080054a4  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080054ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007074  2**0
                  CONTENTS
 10 .bss          00000244  20000074  20000074  00007074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00007074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d73a  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3a  00000000  00000000  000147de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  00016618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a20  00000000  00000000  00017310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ccb  00000000  00000000  00017d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df55  00000000  00000000  000399fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd1d9  00000000  00000000  00047950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114b29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040a8  00000000  00000000  00114b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00118c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005284 	.word	0x08005284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005284 	.word	0x08005284

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <update_servos>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void update_servos()
{
 800059c:	b480      	push	{r7}
 800059e:	b087      	sub	sp, #28
 80005a0:	af00      	add	r7, sp, #0
    int setpoint_x = 320;
 80005a2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80005a6:	617b      	str	r3, [r7, #20]
    int setpoint_y = 240;
 80005a8:	23f0      	movs	r3, #240	@ 0xf0
 80005aa:	613b      	str	r3, [r7, #16]

    int error_x = setpoint_x - bbox_center_x;
 80005ac:	4b90      	ldr	r3, [pc, #576]	@ (80007f0 <update_servos+0x254>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	60fb      	str	r3, [r7, #12]
    int error_y = setpoint_y - bbox_center_y;
 80005b6:	4b8f      	ldr	r3, [pc, #572]	@ (80007f4 <update_servos+0x258>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	60bb      	str	r3, [r7, #8]

    integral_x = CLAMP(integral_x, INTEGRAL_MIN, INTEGRAL_MAX);
 80005c0:	4b8d      	ldr	r3, [pc, #564]	@ (80007f8 <update_servos+0x25c>)
 80005c2:	edd3 7a00 	vldr	s15, [r3]
 80005c6:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80007fc <update_servos+0x260>
 80005ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d2:	d501      	bpl.n	80005d8 <update_servos+0x3c>
 80005d4:	4b8a      	ldr	r3, [pc, #552]	@ (8000800 <update_servos+0x264>)
 80005d6:	e00d      	b.n	80005f4 <update_servos+0x58>
 80005d8:	4b87      	ldr	r3, [pc, #540]	@ (80007f8 <update_servos+0x25c>)
 80005da:	edd3 7a00 	vldr	s15, [r3]
 80005de:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8000804 <update_servos+0x268>
 80005e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ea:	dd01      	ble.n	80005f0 <update_servos+0x54>
 80005ec:	4b86      	ldr	r3, [pc, #536]	@ (8000808 <update_servos+0x26c>)
 80005ee:	e001      	b.n	80005f4 <update_servos+0x58>
 80005f0:	4b81      	ldr	r3, [pc, #516]	@ (80007f8 <update_servos+0x25c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a80      	ldr	r2, [pc, #512]	@ (80007f8 <update_servos+0x25c>)
 80005f6:	6013      	str	r3, [r2, #0]
    integral_y = CLAMP(integral_y, INTEGRAL_MIN, INTEGRAL_MAX);
 80005f8:	4b84      	ldr	r3, [pc, #528]	@ (800080c <update_servos+0x270>)
 80005fa:	edd3 7a00 	vldr	s15, [r3]
 80005fe:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80007fc <update_servos+0x260>
 8000602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060a:	d501      	bpl.n	8000610 <update_servos+0x74>
 800060c:	4b7c      	ldr	r3, [pc, #496]	@ (8000800 <update_servos+0x264>)
 800060e:	e00d      	b.n	800062c <update_servos+0x90>
 8000610:	4b7e      	ldr	r3, [pc, #504]	@ (800080c <update_servos+0x270>)
 8000612:	edd3 7a00 	vldr	s15, [r3]
 8000616:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8000804 <update_servos+0x268>
 800061a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000622:	dd01      	ble.n	8000628 <update_servos+0x8c>
 8000624:	4b78      	ldr	r3, [pc, #480]	@ (8000808 <update_servos+0x26c>)
 8000626:	e001      	b.n	800062c <update_servos+0x90>
 8000628:	4b78      	ldr	r3, [pc, #480]	@ (800080c <update_servos+0x270>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a77      	ldr	r2, [pc, #476]	@ (800080c <update_servos+0x270>)
 800062e:	6013      	str	r3, [r2, #0]

    float derivative_x = (error_x - prev_error_x) / DT;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800063a:	4b75      	ldr	r3, [pc, #468]	@ (8000810 <update_servos+0x274>)
 800063c:	edd3 7a00 	vldr	s15, [r3]
 8000640:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000644:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8000814 <update_servos+0x278>
 8000648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800064c:	edc7 7a01 	vstr	s15, [r7, #4]
    float derivative_y = (error_y - prev_error_y) / DT;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	ee07 3a90 	vmov	s15, r3
 8000656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800065a:	4b6f      	ldr	r3, [pc, #444]	@ (8000818 <update_servos+0x27c>)
 800065c:	edd3 7a00 	vldr	s15, [r3]
 8000660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000664:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8000814 <update_servos+0x278>
 8000668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800066c:	edc7 7a00 	vstr	s15, [r7]

    control_x = CLAMP(control_x, CONTROL_MIN, CONTROL_MAX);
 8000670:	4b6a      	ldr	r3, [pc, #424]	@ (800081c <update_servos+0x280>)
 8000672:	edd3 7a00 	vldr	s15, [r3]
 8000676:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 800067a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000682:	d501      	bpl.n	8000688 <update_servos+0xec>
 8000684:	4b66      	ldr	r3, [pc, #408]	@ (8000820 <update_servos+0x284>)
 8000686:	e00d      	b.n	80006a4 <update_servos+0x108>
 8000688:	4b64      	ldr	r3, [pc, #400]	@ (800081c <update_servos+0x280>)
 800068a:	edd3 7a00 	vldr	s15, [r3]
 800068e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069a:	dd01      	ble.n	80006a0 <update_servos+0x104>
 800069c:	4b61      	ldr	r3, [pc, #388]	@ (8000824 <update_servos+0x288>)
 800069e:	e001      	b.n	80006a4 <update_servos+0x108>
 80006a0:	4b5e      	ldr	r3, [pc, #376]	@ (800081c <update_servos+0x280>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a5d      	ldr	r2, [pc, #372]	@ (800081c <update_servos+0x280>)
 80006a6:	6013      	str	r3, [r2, #0]
    control_y = CLAMP(control_y, CONTROL_MIN, CONTROL_MAX);
 80006a8:	4b5f      	ldr	r3, [pc, #380]	@ (8000828 <update_servos+0x28c>)
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 80006b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ba:	d501      	bpl.n	80006c0 <update_servos+0x124>
 80006bc:	4b58      	ldr	r3, [pc, #352]	@ (8000820 <update_servos+0x284>)
 80006be:	e00d      	b.n	80006dc <update_servos+0x140>
 80006c0:	4b59      	ldr	r3, [pc, #356]	@ (8000828 <update_servos+0x28c>)
 80006c2:	edd3 7a00 	vldr	s15, [r3]
 80006c6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80006ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	dd01      	ble.n	80006d8 <update_servos+0x13c>
 80006d4:	4b53      	ldr	r3, [pc, #332]	@ (8000824 <update_servos+0x288>)
 80006d6:	e001      	b.n	80006dc <update_servos+0x140>
 80006d8:	4b53      	ldr	r3, [pc, #332]	@ (8000828 <update_servos+0x28c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a52      	ldr	r2, [pc, #328]	@ (8000828 <update_servos+0x28c>)
 80006de:	6013      	str	r3, [r2, #0]

    prev_error_x = error_x;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ea:	4b49      	ldr	r3, [pc, #292]	@ (8000810 <update_servos+0x274>)
 80006ec:	edc3 7a00 	vstr	s15, [r3]
    prev_error_y = error_y;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	ee07 3a90 	vmov	s15, r3
 80006f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006fa:	4b47      	ldr	r3, [pc, #284]	@ (8000818 <update_servos+0x27c>)
 80006fc:	edc3 7a00 	vstr	s15, [r3]

    // PWM merkezden sapma mantığı (±5, ±10 gibi)
    pwm_pitch_left  = PWM_CENTER + (int)control_x;
 8000700:	4b46      	ldr	r3, [pc, #280]	@ (800081c <update_servos+0x280>)
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800070a:	ee17 3a90 	vmov	r3, s15
 800070e:	334b      	adds	r3, #75	@ 0x4b
 8000710:	4a46      	ldr	r2, [pc, #280]	@ (800082c <update_servos+0x290>)
 8000712:	6013      	str	r3, [r2, #0]
    pwm_pitch_right = PWM_CENTER - (int)control_x;
 8000714:	4b41      	ldr	r3, [pc, #260]	@ (800081c <update_servos+0x280>)
 8000716:	edd3 7a00 	vldr	s15, [r3]
 800071a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800071e:	ee17 3a90 	vmov	r3, s15
 8000722:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 8000726:	4a42      	ldr	r2, [pc, #264]	@ (8000830 <update_servos+0x294>)
 8000728:	6013      	str	r3, [r2, #0]
    pwm_roll_up     = PWM_CENTER + (int)control_y;
 800072a:	4b3f      	ldr	r3, [pc, #252]	@ (8000828 <update_servos+0x28c>)
 800072c:	edd3 7a00 	vldr	s15, [r3]
 8000730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000734:	ee17 3a90 	vmov	r3, s15
 8000738:	334b      	adds	r3, #75	@ 0x4b
 800073a:	4a3e      	ldr	r2, [pc, #248]	@ (8000834 <update_servos+0x298>)
 800073c:	6013      	str	r3, [r2, #0]
    pwm_roll_down   = PWM_CENTER - (int)control_y;
 800073e:	4b3a      	ldr	r3, [pc, #232]	@ (8000828 <update_servos+0x28c>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000748:	ee17 3a90 	vmov	r3, s15
 800074c:	f1c3 034b 	rsb	r3, r3, #75	@ 0x4b
 8000750:	4a39      	ldr	r2, [pc, #228]	@ (8000838 <update_servos+0x29c>)
 8000752:	6013      	str	r3, [r2, #0]

    pwm_pitch_left  = CLAMP(pwm_pitch_left,  PWM_MIN, PWM_MAX);
 8000754:	4b35      	ldr	r3, [pc, #212]	@ (800082c <update_servos+0x290>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b31      	cmp	r3, #49	@ 0x31
 800075a:	dd05      	ble.n	8000768 <update_servos+0x1cc>
 800075c:	4b33      	ldr	r3, [pc, #204]	@ (800082c <update_servos+0x290>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b64      	cmp	r3, #100	@ 0x64
 8000762:	bfa8      	it	ge
 8000764:	2364      	movge	r3, #100	@ 0x64
 8000766:	e000      	b.n	800076a <update_servos+0x1ce>
 8000768:	2332      	movs	r3, #50	@ 0x32
 800076a:	4a30      	ldr	r2, [pc, #192]	@ (800082c <update_servos+0x290>)
 800076c:	6013      	str	r3, [r2, #0]
    pwm_pitch_right = CLAMP(pwm_pitch_right, PWM_MIN, PWM_MAX);
 800076e:	4b30      	ldr	r3, [pc, #192]	@ (8000830 <update_servos+0x294>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b31      	cmp	r3, #49	@ 0x31
 8000774:	dd05      	ble.n	8000782 <update_servos+0x1e6>
 8000776:	4b2e      	ldr	r3, [pc, #184]	@ (8000830 <update_servos+0x294>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b64      	cmp	r3, #100	@ 0x64
 800077c:	bfa8      	it	ge
 800077e:	2364      	movge	r3, #100	@ 0x64
 8000780:	e000      	b.n	8000784 <update_servos+0x1e8>
 8000782:	2332      	movs	r3, #50	@ 0x32
 8000784:	4a2a      	ldr	r2, [pc, #168]	@ (8000830 <update_servos+0x294>)
 8000786:	6013      	str	r3, [r2, #0]
    pwm_roll_up     = CLAMP(pwm_roll_up,     PWM_MIN, PWM_MAX);
 8000788:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <update_servos+0x298>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b31      	cmp	r3, #49	@ 0x31
 800078e:	dd05      	ble.n	800079c <update_servos+0x200>
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <update_servos+0x298>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b64      	cmp	r3, #100	@ 0x64
 8000796:	bfa8      	it	ge
 8000798:	2364      	movge	r3, #100	@ 0x64
 800079a:	e000      	b.n	800079e <update_servos+0x202>
 800079c:	2332      	movs	r3, #50	@ 0x32
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <update_servos+0x298>)
 80007a0:	6013      	str	r3, [r2, #0]
    pwm_roll_down   = CLAMP(pwm_roll_down,   PWM_MIN, PWM_MAX);
 80007a2:	4b25      	ldr	r3, [pc, #148]	@ (8000838 <update_servos+0x29c>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b31      	cmp	r3, #49	@ 0x31
 80007a8:	dd05      	ble.n	80007b6 <update_servos+0x21a>
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <update_servos+0x29c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b64      	cmp	r3, #100	@ 0x64
 80007b0:	bfa8      	it	ge
 80007b2:	2364      	movge	r3, #100	@ 0x64
 80007b4:	e000      	b.n	80007b8 <update_servos+0x21c>
 80007b6:	2332      	movs	r3, #50	@ 0x32
 80007b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000838 <update_servos+0x29c>)
 80007ba:	6013      	str	r3, [r2, #0]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_pitch_left);
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <update_servos+0x290>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <update_servos+0x2a0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_pitch_right);
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <update_servos+0x294>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <update_servos+0x2a0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_roll_up);
 80007d0:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <update_servos+0x298>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <update_servos+0x2a0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwm_roll_down);
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <update_servos+0x29c>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <update_servos+0x2a0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80007e4:	bf00      	nop
 80007e6:	371c      	adds	r7, #28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	20000134 	.word	0x20000134
 80007f4:	20000138 	.word	0x20000138
 80007f8:	2000013c 	.word	0x2000013c
 80007fc:	c3fa0000 	.word	0xc3fa0000
 8000800:	c3fa0000 	.word	0xc3fa0000
 8000804:	43fa0000 	.word	0x43fa0000
 8000808:	43fa0000 	.word	0x43fa0000
 800080c:	20000140 	.word	0x20000140
 8000810:	20000144 	.word	0x20000144
 8000814:	3d4ccccd 	.word	0x3d4ccccd
 8000818:	20000148 	.word	0x20000148
 800081c:	2000015c 	.word	0x2000015c
 8000820:	c1c80000 	.word	0xc1c80000
 8000824:	41c80000 	.word	0x41c80000
 8000828:	20000160 	.word	0x20000160
 800082c:	2000014c 	.word	0x2000014c
 8000830:	20000150 	.word	0x20000150
 8000834:	20000154 	.word	0x20000154
 8000838:	20000158 	.word	0x20000158
 800083c:	20000090 	.word	0x20000090

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fc1a 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f82e 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f958 	bl	8000b00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000850:	f000 f894 	bl	800097c <MX_TIM2_Init>
  MX_UART4_Init();
 8000854:	f000 f92a 	bl	8000aac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000858:	2100      	movs	r1, #0
 800085a:	480f      	ldr	r0, [pc, #60]	@ (8000898 <main+0x58>)
 800085c:	f001 fd1a 	bl	8002294 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000860:	2104      	movs	r1, #4
 8000862:	480d      	ldr	r0, [pc, #52]	@ (8000898 <main+0x58>)
 8000864:	f001 fd16 	bl	8002294 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000868:	2108      	movs	r1, #8
 800086a:	480b      	ldr	r0, [pc, #44]	@ (8000898 <main+0x58>)
 800086c:	f001 fd12 	bl	8002294 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000870:	210c      	movs	r1, #12
 8000872:	4809      	ldr	r0, [pc, #36]	@ (8000898 <main+0x58>)
 8000874:	f001 fd0e 	bl	8002294 <HAL_TIM_PWM_Start>
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 75);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 50);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 120);

  HAL_UART_Receive_IT(&huart4, rx_data, 20);
 8000878:	2214      	movs	r2, #20
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <main+0x5c>)
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <main+0x60>)
 800087e:	f002 fd04 	bl	800328a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_servos();
 8000882:	f7ff fe8b 	bl	800059c <update_servos>
	  HAL_UART_Transmit(&huart4, tx_buffer, 10, 10);
 8000886:	230a      	movs	r3, #10
 8000888:	220a      	movs	r2, #10
 800088a:	4906      	ldr	r1, [pc, #24]	@ (80008a4 <main+0x64>)
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <main+0x60>)
 800088e:	f002 fc71 	bl	8003174 <HAL_UART_Transmit>
	  update_servos();
 8000892:	bf00      	nop
 8000894:	e7f5      	b.n	8000882 <main+0x42>
 8000896:	bf00      	nop
 8000898:	20000090 	.word	0x20000090
 800089c:	20000120 	.word	0x20000120
 80008a0:	200000d8 	.word	0x200000d8
 80008a4:	20000000 	.word	0x20000000

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	@ 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fdef 	bl	800449a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <SystemClock_Config+0xd0>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800091c:	23a8      	movs	r3, #168	@ 0xa8
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f000 ff71 	bl	8001814 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000938:	f000 f97e 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000948:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2105      	movs	r1, #5
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f9d2 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000966:	f000 f967 	bl	8000c38 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	@ 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08e      	sub	sp, #56	@ 0x38
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 0320 	add.w	r3, r7, #32
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ac:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 80009b4:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009b6:	f240 628f 	movw	r2, #1679	@ 0x68f
 80009ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80009c2:	4b39      	ldr	r3, [pc, #228]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b37      	ldr	r3, [pc, #220]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b35      	ldr	r3, [pc, #212]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d6:	4834      	ldr	r0, [pc, #208]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009d8:	f001 fbb4 	bl	8002144 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f929 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009f0:	4619      	mov	r1, r3
 80009f2:	482d      	ldr	r0, [pc, #180]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 80009f4:	f001 fec8 	bl	8002788 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009fe:	f000 f91b 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a02:	4829      	ldr	r0, [pc, #164]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a04:	f001 fbed 	bl	80021e2 <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a0e:	f000 f913 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4821      	ldr	r0, [pc, #132]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a22:	f002 fac7 	bl	8002fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a2c:	f000 f904 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a30:	2360      	movs	r3, #96	@ 0x60
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4818      	ldr	r0, [pc, #96]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a48:	f001 fddc 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a52:	f000 f8f1 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2204      	movs	r2, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a5e:	f001 fdd1 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a68:	f000 f8e6 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2208      	movs	r2, #8
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a74:	f001 fdc6 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000a7e:	f000 f8db 	bl	8000c38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	220c      	movs	r2, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4807      	ldr	r0, [pc, #28]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a8a:	f001 fdbb 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000a94:	f000 f8d0 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a98:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <MX_TIM2_Init+0x12c>)
 8000a9a:	f000 f921 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 8000a9e:	bf00      	nop
 8000aa0:	3738      	adds	r7, #56	@ 0x38
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000090 	.word	0x20000090

08000aac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <MX_UART4_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_UART4_Init+0x4c>)
 8000ae4:	f002 faf6 	bl	80030d4 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f8a3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	40004c00 	.word	0x40004c00

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a26      	ldr	r2, [pc, #152]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b24      	ldr	r3, [pc, #144]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_GPIO_Init+0xb8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <MX_GPIO_Init+0xbc>)
 8000b8e:	f000 fe27 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b92:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <MX_GPIO_Init+0xbc>)
 8000bac:	f000 fc7c 	bl	80014a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020c00 	.word	0x40020c00

08000bc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    UNUSED(huart);

    char *token;
    token = strtok((char *)rx_data, ",");
 8000bc8:	4915      	ldr	r1, [pc, #84]	@ (8000c20 <HAL_UART_RxCpltCallback+0x60>)
 8000bca:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <HAL_UART_RxCpltCallback+0x64>)
 8000bcc:	f003 fc6e 	bl	80044ac <strtok>
 8000bd0:	60f8      	str	r0, [r7, #12]
    if (token != NULL) {
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d013      	beq.n	8000c00 <HAL_UART_RxCpltCallback+0x40>
        bbox_center_x = atoi(token);
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f003 fad1 	bl	8004180 <atoi>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a11      	ldr	r2, [pc, #68]	@ (8000c28 <HAL_UART_RxCpltCallback+0x68>)
 8000be2:	6013      	str	r3, [r2, #0]
        token = strtok(NULL, ",");
 8000be4:	490e      	ldr	r1, [pc, #56]	@ (8000c20 <HAL_UART_RxCpltCallback+0x60>)
 8000be6:	2000      	movs	r0, #0
 8000be8:	f003 fc60 	bl	80044ac <strtok>
 8000bec:	60f8      	str	r0, [r7, #12]
        if (token != NULL) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <HAL_UART_RxCpltCallback+0x40>
            bbox_center_y = atoi(token);
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f003 fac3 	bl	8004180 <atoi>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <HAL_UART_RxCpltCallback+0x6c>)
 8000bfe:	6013      	str	r3, [r2, #0]
        }
    }

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c06:	480a      	ldr	r0, [pc, #40]	@ (8000c30 <HAL_UART_RxCpltCallback+0x70>)
 8000c08:	f000 fdea 	bl	80017e0 <HAL_GPIO_WritePin>
    HAL_UART_Receive_IT(&huart4, rx_data, 20);
 8000c0c:	2214      	movs	r2, #20
 8000c0e:	4905      	ldr	r1, [pc, #20]	@ (8000c24 <HAL_UART_RxCpltCallback+0x64>)
 8000c10:	4808      	ldr	r0, [pc, #32]	@ (8000c34 <HAL_UART_RxCpltCallback+0x74>)
 8000c12:	f002 fb3a 	bl	800328a <HAL_UART_Receive_IT>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	0800529c 	.word	0x0800529c
 8000c24:	20000120 	.word	0x20000120
 8000c28:	20000134 	.word	0x20000134
 8000c2c:	20000138 	.word	0x20000138
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	200000d8 	.word	0x200000d8

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca4:	d115      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_TIM_Base_MspInit+0x48>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_TIM_Base_MspInit+0x48>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_TIM_Base_MspInit+0x48>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	201c      	movs	r0, #28
 8000cc8:	f000 fb25 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ccc:	201c      	movs	r0, #28
 8000cce:	f000 fb3e 	bl	800134e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d00:	d11d      	bne.n	8000d3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_TIM_MspPostInit+0x68>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000d1e:	230f      	movs	r3, #15
 8000d20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <HAL_TIM_MspPostInit+0x6c>)
 8000d3a:	f000 fbb5 	bl	80014a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000de4 <HAL_UART_MspInit+0x94>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d134      	bne.n	8000ddc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <HAL_UART_MspInit+0x98>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <HAL_UART_MspInit+0x98>)
 8000d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d82:	4b19      	ldr	r3, [pc, #100]	@ (8000de8 <HAL_UART_MspInit+0x98>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_UART_MspInit+0x98>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <HAL_UART_MspInit+0x98>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_UART_MspInit+0x98>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000daa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4809      	ldr	r0, [pc, #36]	@ (8000dec <HAL_UART_MspInit+0x9c>)
 8000dc8:	f000 fb6e 	bl	80014a8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2034      	movs	r0, #52	@ 0x34
 8000dd2:	f000 faa0 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dd6:	2034      	movs	r0, #52	@ 0x34
 8000dd8:	f000 fab9 	bl	800134e <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	@ 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004c00 	.word	0x40004c00
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020800 	.word	0x40020800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f96b 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <TIM2_IRQHandler+0x10>)
 8000e56:	f001 fae5 	bl	8002424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000090 	.word	0x20000090

08000e64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <UART4_IRQHandler+0x10>)
 8000e6a:	f002 fa33 	bl	80032d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000d8 	.word	0x200000d8

08000e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return 1;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_kill>:

int _kill(int pid, int sig)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e92:	f003 fbad 	bl	80045f0 <__errno>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2216      	movs	r2, #22
 8000e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_exit>:

void _exit (int status)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffe7 	bl	8000e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <_exit+0x12>

08000ebe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e00a      	b.n	8000ee6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed0:	f3af 8000 	nop.w
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf0      	blt.n	8000ed0 <_read+0x12>
  }

  return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e009      	b.n	8000f1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	dbf1      	blt.n	8000f0a <_write+0x12>
  }
  return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_close>:

int _close(int file)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f58:	605a      	str	r2, [r3, #4]
  return 0;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_isatty>:

int _isatty(int file)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f003 fb12 	bl	80045f0 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	@ (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	20000164 	.word	0x20000164
 8001000:	200002b8 	.word	0x200002b8

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f003 fad1 	bl	80045fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fbf1 	bl	8000840 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800106c:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 8001070:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001074:	200002b8 	.word	0x200002b8

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f92b 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fdc8 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f943 	bl	800136a <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010fc:	f000 f90b 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000000c 	.word	0x2000000c
 8001118:	20000014 	.word	0x20000014
 800111c:	20000010 	.word	0x20000010

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000014 	.word	0x20000014
 8001144:	20000168 	.word	0x20000168

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000168 	.word	0x20000168

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	@ (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff feda 	bl	8001148 <HAL_GetTick>
 8001394:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d008      	beq.n	80013b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e052      	b.n	800145a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0216 	bic.w	r2, r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <HAL_DMA_Abort+0x62>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0208 	bic.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001404:	e013      	b.n	800142e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001406:	f7ff fe9f 	bl	8001148 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b05      	cmp	r3, #5
 8001412:	d90c      	bls.n	800142e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2220      	movs	r2, #32
 8001418:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e015      	b.n	800145a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e4      	bne.n	8001406 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001440:	223f      	movs	r2, #63	@ 0x3f
 8001442:	409a      	lsls	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d004      	beq.n	8001480 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2280      	movs	r2, #128	@ 0x80
 800147a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e00c      	b.n	800149a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2205      	movs	r2, #5
 8001484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e16b      	b.n	800179c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 815a 	bne.w	8001796 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d005      	beq.n	80014fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d130      	bne.n	800155c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 0201 	and.w	r2, r3, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b03      	cmp	r3, #3
 8001566:	d017      	beq.n	8001598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	2203      	movs	r2, #3
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d123      	bne.n	80015ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0203 	and.w	r2, r3, #3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80b4 	beq.w	8001796 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b60      	ldr	r3, [pc, #384]	@ (80017b4 <HAL_GPIO_Init+0x30c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a5f      	ldr	r2, [pc, #380]	@ (80017b4 <HAL_GPIO_Init+0x30c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b5d      	ldr	r3, [pc, #372]	@ (80017b4 <HAL_GPIO_Init+0x30c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800164a:	4a5b      	ldr	r2, [pc, #364]	@ (80017b8 <HAL_GPIO_Init+0x310>)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	089b      	lsrs	r3, r3, #2
 8001650:	3302      	adds	r3, #2
 8001652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4013      	ands	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a52      	ldr	r2, [pc, #328]	@ (80017bc <HAL_GPIO_Init+0x314>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d02b      	beq.n	80016ce <HAL_GPIO_Init+0x226>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a51      	ldr	r2, [pc, #324]	@ (80017c0 <HAL_GPIO_Init+0x318>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x222>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a50      	ldr	r2, [pc, #320]	@ (80017c4 <HAL_GPIO_Init+0x31c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x21e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <HAL_GPIO_Init+0x320>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x21a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4e      	ldr	r2, [pc, #312]	@ (80017cc <HAL_GPIO_Init+0x324>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x216>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <HAL_GPIO_Init+0x328>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x212>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <HAL_GPIO_Init+0x32c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x20e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4b      	ldr	r2, [pc, #300]	@ (80017d8 <HAL_GPIO_Init+0x330>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x20a>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e00e      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016b2:	2308      	movs	r3, #8
 80016b4:	e00c      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016b6:	2306      	movs	r3, #6
 80016b8:	e00a      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016ba:	2305      	movs	r3, #5
 80016bc:	e008      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016be:	2304      	movs	r3, #4
 80016c0:	e006      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016c2:	2303      	movs	r3, #3
 80016c4:	e004      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_GPIO_Init+0x228>
 80016ce:	2300      	movs	r3, #0
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f002 0203 	and.w	r2, r2, #3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4093      	lsls	r3, r2
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e0:	4935      	ldr	r1, [pc, #212]	@ (80017b8 <HAL_GPIO_Init+0x310>)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	3302      	adds	r3, #2
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <HAL_GPIO_Init+0x334>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001712:	4a32      	ldr	r2, [pc, #200]	@ (80017dc <HAL_GPIO_Init+0x334>)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <HAL_GPIO_Init+0x334>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800173c:	4a27      	ldr	r2, [pc, #156]	@ (80017dc <HAL_GPIO_Init+0x334>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001742:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <HAL_GPIO_Init+0x334>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001766:	4a1d      	ldr	r2, [pc, #116]	@ (80017dc <HAL_GPIO_Init+0x334>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_GPIO_Init+0x334>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001790:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <HAL_GPIO_Init+0x334>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	f67f ae90 	bls.w	80014c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40013800 	.word	0x40013800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020400 	.word	0x40020400
 80017c4:	40020800 	.word	0x40020800
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40021400 	.word	0x40021400
 80017d4:	40021800 	.word	0x40021800
 80017d8:	40021c00 	.word	0x40021c00
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e267      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d075      	beq.n	800191e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001832:	4b88      	ldr	r3, [pc, #544]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d00c      	beq.n	8001858 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4b85      	ldr	r3, [pc, #532]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001846:	2b08      	cmp	r3, #8
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b82      	ldr	r3, [pc, #520]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001856:	d10b      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4b7e      	ldr	r3, [pc, #504]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d05b      	beq.n	800191c <HAL_RCC_OscConfig+0x108>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d157      	bne.n	800191c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e242      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001878:	d106      	bne.n	8001888 <HAL_RCC_OscConfig+0x74>
 800187a:	4b76      	ldr	r3, [pc, #472]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a75      	ldr	r2, [pc, #468]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xb0>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x98>
 8001892:	4b70      	ldr	r3, [pc, #448]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6f      	ldr	r2, [pc, #444]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xb0>
 80018ac:	4b69      	ldr	r3, [pc, #420]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a68      	ldr	r2, [pc, #416]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b66      	ldr	r3, [pc, #408]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a65      	ldr	r2, [pc, #404]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fc3c 	bl	8001148 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fc38 	bl	8001148 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	@ 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e207      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xc0>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fc28 	bl	8001148 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fc24 	bl	8001148 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	@ 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1f3      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b51      	ldr	r3, [pc, #324]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0xe8>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800192a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b41      	ldr	r3, [pc, #260]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x152>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c7      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4937      	ldr	r1, [pc, #220]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <HAL_RCC_OscConfig+0x244>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fbdd 	bl	8001148 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fbd9 	bl	8001148 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a8      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4925      	ldr	r1, [pc, #148]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <HAL_RCC_OscConfig+0x244>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fbbc 	bl	8001148 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fbb8 	bl	8001148 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e187      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d036      	beq.n	8001a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d016      	beq.n	8001a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_RCC_OscConfig+0x248>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fb9c 	bl	8001148 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fb98 	bl	8001148 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e167      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <HAL_RCC_OscConfig+0x240>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x200>
 8001a32:	e01b      	b.n	8001a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_RCC_OscConfig+0x248>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fb85 	bl	8001148 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e00e      	b.n	8001a60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff fb81 	bl	8001148 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d907      	bls.n	8001a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e150      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
 8001a54:	40023800 	.word	0x40023800
 8001a58:	42470000 	.word	0x42470000
 8001a5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	4b88      	ldr	r3, [pc, #544]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ea      	bne.n	8001a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8097 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7e:	4b81      	ldr	r3, [pc, #516]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10f      	bne.n	8001aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a7c      	ldr	r2, [pc, #496]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b77      	ldr	r3, [pc, #476]	@ (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b74      	ldr	r3, [pc, #464]	@ (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a73      	ldr	r2, [pc, #460]	@ (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fb41 	bl	8001148 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff fb3d 	bl	8001148 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e10c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b6a      	ldr	r3, [pc, #424]	@ (8001c88 <HAL_RCC_OscConfig+0x474>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x2ea>
 8001af0:	4b64      	ldr	r3, [pc, #400]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a63      	ldr	r2, [pc, #396]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x324>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x30c>
 8001b06:	4b5f      	ldr	r3, [pc, #380]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b12:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b16:	4a5b      	ldr	r2, [pc, #364]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x324>
 8001b20:	4b58      	ldr	r3, [pc, #352]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b24:	4a57      	ldr	r2, [pc, #348]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2c:	4b55      	ldr	r3, [pc, #340]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a54      	ldr	r2, [pc, #336]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b32:	f023 0304 	bic.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fb02 	bl	8001148 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff fafe 	bl	8001148 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e0cb      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5e:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0ee      	beq.n	8001b48 <HAL_RCC_OscConfig+0x334>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff faec 	bl	8001148 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff fae8 	bl	8001148 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e0b5      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ee      	bne.n	8001b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b96:	7dfb      	ldrb	r3, [r7, #23]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	4a38      	ldr	r2, [pc, #224]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a1 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb2:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d05c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d141      	bne.n	8001c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b31      	ldr	r3, [pc, #196]	@ (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fabc 	bl	8001148 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff fab8 	bl	8001148 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e087      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	4b27      	ldr	r3, [pc, #156]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69da      	ldr	r2, [r3, #28]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	041b      	lsls	r3, r3, #16
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	061b      	lsls	r3, r3, #24
 8001c16:	491b      	ldr	r1, [pc, #108]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7ff fa91 	bl	8001148 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	e008      	b.n	8001c3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7ff fa8d 	bl	8001148 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e05c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0f0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x416>
 8001c48:	e054      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <HAL_RCC_OscConfig+0x478>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fa7a 	bl	8001148 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fa76 	bl	8001148 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e045      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x444>
 8001c76:	e03d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e038      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x4ec>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d028      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d121      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0cc      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b68      	ldr	r3, [pc, #416]	@ (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d90c      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b65      	ldr	r3, [pc, #404]	@ (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b63      	ldr	r3, [pc, #396]	@ (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0b8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d58:	4b59      	ldr	r3, [pc, #356]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4a58      	ldr	r2, [pc, #352]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d70:	4b53      	ldr	r3, [pc, #332]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a52      	ldr	r2, [pc, #328]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b50      	ldr	r3, [pc, #320]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	494d      	ldr	r1, [pc, #308]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d044      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b47      	ldr	r3, [pc, #284]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d119      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e067      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4934      	ldr	r1, [pc, #208]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff f9a8 	bl	8001148 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff f9a4 	bl	8001148 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e04f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b25      	ldr	r3, [pc, #148]	@ (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d20c      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e032      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4916      	ldr	r1, [pc, #88]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	490e      	ldr	r1, [pc, #56]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8a:	f000 f821 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	490a      	ldr	r1, [pc, #40]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	5ccb      	ldrb	r3, [r1, r3]
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	4a09      	ldr	r2, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f908 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023c00 	.word	0x40023c00
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	080052a0 	.word	0x080052a0
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	20000010 	.word	0x20000010

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed4:	b094      	sub	sp, #80	@ 0x50
 8001ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee8:	4b79      	ldr	r3, [pc, #484]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d00d      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x40>
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	f200 80e1 	bhi.w	80020bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x34>
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001f02:	e0db      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f04:	4b73      	ldr	r3, [pc, #460]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f08:	e0db      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0a:	4b73      	ldr	r3, [pc, #460]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f0e:	e0d8      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f10:	4b6f      	ldr	r3, [pc, #444]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f26:	4b6a      	ldr	r3, [pc, #424]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f42:	4622      	mov	r2, r4
 8001f44:	462b      	mov	r3, r5
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	1a51      	subs	r1, r2, r1
 8001f5e:	6139      	str	r1, [r7, #16]
 8001f60:	4629      	mov	r1, r5
 8001f62:	eb63 0301 	sbc.w	r3, r3, r1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f74:	4659      	mov	r1, fp
 8001f76:	018b      	lsls	r3, r1, #6
 8001f78:	4651      	mov	r1, sl
 8001f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7e:	4651      	mov	r1, sl
 8001f80:	018a      	lsls	r2, r1, #6
 8001f82:	4651      	mov	r1, sl
 8001f84:	ebb2 0801 	subs.w	r8, r2, r1
 8001f88:	4659      	mov	r1, fp
 8001f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa2:	4690      	mov	r8, r2
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	eb18 0303 	adds.w	r3, r8, r3
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	462b      	mov	r3, r5
 8001fb0:	eb49 0303 	adc.w	r3, r9, r3
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	024b      	lsls	r3, r1, #9
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fcc:	4621      	mov	r1, r4
 8001fce:	024a      	lsls	r2, r1, #9
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fe0:	f7fe f946 	bl	8000270 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fec:	e058      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fee:	4b38      	ldr	r3, [pc, #224]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002008:	4642      	mov	r2, r8
 800200a:	464b      	mov	r3, r9
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	0159      	lsls	r1, r3, #5
 8002016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201a:	0150      	lsls	r0, r2, #5
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4641      	mov	r1, r8
 8002022:	ebb2 0a01 	subs.w	sl, r2, r1
 8002026:	4649      	mov	r1, r9
 8002028:	eb63 0b01 	sbc.w	fp, r3, r1
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800203c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002040:	ebb2 040a 	subs.w	r4, r2, sl
 8002044:	eb63 050b 	sbc.w	r5, r3, fp
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	00eb      	lsls	r3, r5, #3
 8002052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002056:	00e2      	lsls	r2, r4, #3
 8002058:	4614      	mov	r4, r2
 800205a:	461d      	mov	r5, r3
 800205c:	4643      	mov	r3, r8
 800205e:	18e3      	adds	r3, r4, r3
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	464b      	mov	r3, r9
 8002064:	eb45 0303 	adc.w	r3, r5, r3
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002076:	4629      	mov	r1, r5
 8002078:	028b      	lsls	r3, r1, #10
 800207a:	4621      	mov	r1, r4
 800207c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002080:	4621      	mov	r1, r4
 8002082:	028a      	lsls	r2, r1, #10
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208a:	2200      	movs	r2, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	61fa      	str	r2, [r7, #28]
 8002090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002094:	f7fe f8ec 	bl	8000270 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80020a0:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80020b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020ba:	e002      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80020be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3750      	adds	r7, #80	@ 0x50
 80020c8:	46bd      	mov	sp, r7
 80020ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	00f42400 	.word	0x00f42400
 80020d8:	007a1200 	.word	0x007a1200

080020dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2000000c 	.word	0x2000000c

080020f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020f8:	f7ff fff0 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0a9b      	lsrs	r3, r3, #10
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4903      	ldr	r1, [pc, #12]	@ (8002118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	080052b0 	.word	0x080052b0

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002120:	f7ff ffdc 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0b5b      	lsrs	r3, r3, #13
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4903      	ldr	r1, [pc, #12]	@ (8002140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40023800 	.word	0x40023800
 8002140:	080052b0 	.word	0x080052b0

08002144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e041      	b.n	80021da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fd92 	bl	8000c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4610      	mov	r0, r2
 8002184:	f000 fbfa 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e041      	b.n	8002278 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d106      	bne.n	800220e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f839 	bl	8002280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2202      	movs	r2, #2
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3304      	adds	r3, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f000 fbab 	bl	800297c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_TIM_PWM_Start+0x24>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e022      	b.n	80022fe <HAL_TIM_PWM_Start+0x6a>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d109      	bne.n	80022d2 <HAL_TIM_PWM_Start+0x3e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	bf14      	ite	ne
 80022ca:	2301      	movne	r3, #1
 80022cc:	2300      	moveq	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	e015      	b.n	80022fe <HAL_TIM_PWM_Start+0x6a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d109      	bne.n	80022ec <HAL_TIM_PWM_Start+0x58>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e008      	b.n	80022fe <HAL_TIM_PWM_Start+0x6a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	bf14      	ite	ne
 80022f8:	2301      	movne	r3, #1
 80022fa:	2300      	moveq	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07c      	b.n	8002400 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d104      	bne.n	8002316 <HAL_TIM_PWM_Start+0x82>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002314:	e013      	b.n	800233e <HAL_TIM_PWM_Start+0xaa>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d104      	bne.n	8002326 <HAL_TIM_PWM_Start+0x92>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002324:	e00b      	b.n	800233e <HAL_TIM_PWM_Start+0xaa>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d104      	bne.n	8002336 <HAL_TIM_PWM_Start+0xa2>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002334:	e003      	b.n	800233e <HAL_TIM_PWM_Start+0xaa>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2201      	movs	r2, #1
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fe0e 	bl	8002f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2d      	ldr	r2, [pc, #180]	@ (8002408 <HAL_TIM_PWM_Start+0x174>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_PWM_Start+0xcc>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2c      	ldr	r2, [pc, #176]	@ (800240c <HAL_TIM_PWM_Start+0x178>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_TIM_PWM_Start+0xd0>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_TIM_PWM_Start+0xd2>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002378:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a22      	ldr	r2, [pc, #136]	@ (8002408 <HAL_TIM_PWM_Start+0x174>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d022      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800238c:	d01d      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <HAL_TIM_PWM_Start+0x17c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d018      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <HAL_TIM_PWM_Start+0x180>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d013      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002418 <HAL_TIM_PWM_Start+0x184>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00e      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	@ (800240c <HAL_TIM_PWM_Start+0x178>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_TIM_PWM_Start+0x188>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_TIM_PWM_Start+0x136>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <HAL_TIM_PWM_Start+0x18c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d111      	bne.n	80023ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d010      	beq.n	80023fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ec:	e007      	b.n	80023fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40010000 	.word	0x40010000
 800240c:	40010400 	.word	0x40010400
 8002410:	40000400 	.word	0x40000400
 8002414:	40000800 	.word	0x40000800
 8002418:	40000c00 	.word	0x40000c00
 800241c:	40014000 	.word	0x40014000
 8002420:	40001800 	.word	0x40001800

08002424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0202 	mvn.w	r2, #2
 8002458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa65 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa57 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fa68 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0204 	mvn.w	r2, #4
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa3f 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa31 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fa42 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d020      	beq.n	8002520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01b      	beq.n	8002520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0208 	mvn.w	r2, #8
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa19 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa0b 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fa1c 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9f3 	bl	800293e <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9e5 	bl	800292a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9f6 	bl	8002952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0201 	mvn.w	r2, #1
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f9c3 	bl	8002916 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fd86 	bl	80030c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f9c7 	bl	8002966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0220 	mvn.w	r2, #32
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fd58 	bl	80030ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800261e:	2302      	movs	r3, #2
 8002620:	e0ae      	b.n	8002780 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	f200 809f 	bhi.w	8002770 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002632:	a201      	add	r2, pc, #4	@ (adr r2, 8002638 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	0800266d 	.word	0x0800266d
 800263c:	08002771 	.word	0x08002771
 8002640:	08002771 	.word	0x08002771
 8002644:	08002771 	.word	0x08002771
 8002648:	080026ad 	.word	0x080026ad
 800264c:	08002771 	.word	0x08002771
 8002650:	08002771 	.word	0x08002771
 8002654:	08002771 	.word	0x08002771
 8002658:	080026ef 	.word	0x080026ef
 800265c:	08002771 	.word	0x08002771
 8002660:	08002771 	.word	0x08002771
 8002664:	08002771 	.word	0x08002771
 8002668:	0800272f 	.word	0x0800272f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fa2e 	bl	8002ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0208 	orr.w	r2, r2, #8
 8002686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0204 	bic.w	r2, r2, #4
 8002696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6999      	ldr	r1, [r3, #24]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	619a      	str	r2, [r3, #24]
      break;
 80026aa:	e064      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fa7e 	bl	8002bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	021a      	lsls	r2, r3, #8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	619a      	str	r2, [r3, #24]
      break;
 80026ec:	e043      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fad3 	bl	8002ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0208 	orr.w	r2, r2, #8
 8002708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0204 	bic.w	r2, r2, #4
 8002718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69d9      	ldr	r1, [r3, #28]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	61da      	str	r2, [r3, #28]
      break;
 800272c:	e023      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fb27 	bl	8002d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69d9      	ldr	r1, [r3, #28]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	021a      	lsls	r2, r3, #8
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
      break;
 800276e:	e002      	b.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
      break;
 8002774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIM_ConfigClockSource+0x1c>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0b4      	b.n	800290e <HAL_TIM_ConfigClockSource+0x186>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027dc:	d03e      	beq.n	800285c <HAL_TIM_ConfigClockSource+0xd4>
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027e2:	f200 8087 	bhi.w	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ea:	f000 8086 	beq.w	80028fa <HAL_TIM_ConfigClockSource+0x172>
 80027ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f2:	d87f      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b70      	cmp	r3, #112	@ 0x70
 80027f6:	d01a      	beq.n	800282e <HAL_TIM_ConfigClockSource+0xa6>
 80027f8:	2b70      	cmp	r3, #112	@ 0x70
 80027fa:	d87b      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b60      	cmp	r3, #96	@ 0x60
 80027fe:	d050      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002800:	2b60      	cmp	r3, #96	@ 0x60
 8002802:	d877      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b50      	cmp	r3, #80	@ 0x50
 8002806:	d03c      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0xfa>
 8002808:	2b50      	cmp	r3, #80	@ 0x50
 800280a:	d873      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 800280c:	2b40      	cmp	r3, #64	@ 0x40
 800280e:	d058      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002810:	2b40      	cmp	r3, #64	@ 0x40
 8002812:	d86f      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002814:	2b30      	cmp	r3, #48	@ 0x30
 8002816:	d064      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002818:	2b30      	cmp	r3, #48	@ 0x30
 800281a:	d86b      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d060      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d867      	bhi.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05c      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002828:	2b10      	cmp	r3, #16
 800282a:	d05a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x15a>
 800282c:	e062      	b.n	80028f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800283e:	f000 fb73 	bl	8002f28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002850:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	609a      	str	r2, [r3, #8]
      break;
 800285a:	e04f      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	f000 fb5c 	bl	8002f28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800287e:	609a      	str	r2, [r3, #8]
      break;
 8002880:	e03c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288e:	461a      	mov	r2, r3
 8002890:	f000 fad0 	bl	8002e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2150      	movs	r1, #80	@ 0x50
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fb29 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 80028a0:	e02c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 faef 	bl	8002e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2160      	movs	r1, #96	@ 0x60
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fb19 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e01c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	461a      	mov	r2, r3
 80028d0:	f000 fab0 	bl	8002e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2140      	movs	r1, #64	@ 0x40
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fb09 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 80028e0:	e00c      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f000 fb00 	bl	8002ef2 <TIM_ITRx_SetConfig>
      break;
 80028f2:	e003      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	e000      	b.n	80028fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a46      	ldr	r2, [pc, #280]	@ (8002aa8 <TIM_Base_SetConfig+0x12c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299a:	d00f      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a43      	ldr	r2, [pc, #268]	@ (8002aac <TIM_Base_SetConfig+0x130>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00b      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a42      	ldr	r2, [pc, #264]	@ (8002ab0 <TIM_Base_SetConfig+0x134>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a41      	ldr	r2, [pc, #260]	@ (8002ab4 <TIM_Base_SetConfig+0x138>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a40      	ldr	r2, [pc, #256]	@ (8002ab8 <TIM_Base_SetConfig+0x13c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d108      	bne.n	80029ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a35      	ldr	r2, [pc, #212]	@ (8002aa8 <TIM_Base_SetConfig+0x12c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d02b      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029dc:	d027      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <TIM_Base_SetConfig+0x130>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d023      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a31      	ldr	r2, [pc, #196]	@ (8002ab0 <TIM_Base_SetConfig+0x134>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a30      	ldr	r2, [pc, #192]	@ (8002ab4 <TIM_Base_SetConfig+0x138>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01b      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2f      	ldr	r2, [pc, #188]	@ (8002ab8 <TIM_Base_SetConfig+0x13c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d017      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <TIM_Base_SetConfig+0x140>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d013      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac0 <TIM_Base_SetConfig+0x144>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d00f      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a2c      	ldr	r2, [pc, #176]	@ (8002ac4 <TIM_Base_SetConfig+0x148>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a2b      	ldr	r2, [pc, #172]	@ (8002ac8 <TIM_Base_SetConfig+0x14c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2a      	ldr	r2, [pc, #168]	@ (8002acc <TIM_Base_SetConfig+0x150>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a29      	ldr	r2, [pc, #164]	@ (8002ad0 <TIM_Base_SetConfig+0x154>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d108      	bne.n	8002a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a10      	ldr	r2, [pc, #64]	@ (8002aa8 <TIM_Base_SetConfig+0x12c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0xf8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a12      	ldr	r2, [pc, #72]	@ (8002ab8 <TIM_Base_SetConfig+0x13c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d103      	bne.n	8002a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f023 0201 	bic.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	611a      	str	r2, [r3, #16]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40010400 	.word	0x40010400
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400
 8002ac4:	40014800 	.word	0x40014800
 8002ac8:	40001800 	.word	0x40001800
 8002acc:	40001c00 	.word	0x40001c00
 8002ad0:	40002000 	.word	0x40002000

08002ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f023 0201 	bic.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f023 0302 	bic.w	r3, r3, #2
 8002b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a20      	ldr	r2, [pc, #128]	@ (8002bac <TIM_OC1_SetConfig+0xd8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <TIM_OC1_SetConfig+0x64>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <TIM_OC1_SetConfig+0xdc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d10c      	bne.n	8002b52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0308 	bic.w	r3, r3, #8
 8002b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <TIM_OC1_SetConfig+0xd8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_OC1_SetConfig+0x8e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	@ (8002bb0 <TIM_OC1_SetConfig+0xdc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d111      	bne.n	8002b86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	621a      	str	r2, [r3, #32]
}
 8002ba0:	bf00      	nop
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f023 0210 	bic.w	r2, r3, #16
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0320 	bic.w	r3, r3, #32
 8002bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a22      	ldr	r2, [pc, #136]	@ (8002c98 <TIM_OC2_SetConfig+0xe4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_OC2_SetConfig+0x68>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a21      	ldr	r2, [pc, #132]	@ (8002c9c <TIM_OC2_SetConfig+0xe8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10d      	bne.n	8002c38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <TIM_OC2_SetConfig+0xe4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d003      	beq.n	8002c48 <TIM_OC2_SetConfig+0x94>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <TIM_OC2_SetConfig+0xe8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d113      	bne.n	8002c70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	021b      	lsls	r3, r3, #8
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a21      	ldr	r2, [pc, #132]	@ (8002d80 <TIM_OC3_SetConfig+0xe0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_OC3_SetConfig+0x66>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a20      	ldr	r2, [pc, #128]	@ (8002d84 <TIM_OC3_SetConfig+0xe4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10d      	bne.n	8002d22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <TIM_OC3_SetConfig+0xe0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_OC3_SetConfig+0x92>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <TIM_OC3_SetConfig+0xe4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d113      	bne.n	8002d5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	621a      	str	r2, [r3, #32]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40010000 	.word	0x40010000
 8002d84:	40010400 	.word	0x40010400

08002d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	031b      	lsls	r3, r3, #12
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a12      	ldr	r2, [pc, #72]	@ (8002e2c <TIM_OC4_SetConfig+0xa4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_OC4_SetConfig+0x68>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <TIM_OC4_SetConfig+0xa8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d109      	bne.n	8002e04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	019b      	lsls	r3, r3, #6
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	621a      	str	r2, [r3, #32]
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40010400 	.word	0x40010400

08002e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0201 	bic.w	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f023 030a 	bic.w	r3, r3, #10
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	621a      	str	r2, [r3, #32]
}
 8002e86:	bf00      	nop
 8002e88:	371c      	adds	r7, #28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f023 0210 	bic.w	r2, r3, #16
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	031b      	lsls	r3, r3, #12
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ece:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	621a      	str	r2, [r3, #32]
}
 8002ee6:	bf00      	nop
 8002ee8:	371c      	adds	r7, #28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f043 0307 	orr.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	021a      	lsls	r2, r3, #8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e05a      	b.n	8003082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a21      	ldr	r2, [pc, #132]	@ (8003090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d022      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003018:	d01d      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d018      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1b      	ldr	r2, [pc, #108]	@ (8003098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00e      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	@ (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d004      	beq.n	8003056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a15      	ldr	r2, [pc, #84]	@ (80030a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10c      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800305c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40010000 	.word	0x40010000
 8003094:	40000400 	.word	0x40000400
 8003098:	40000800 	.word	0x40000800
 800309c:	40000c00 	.word	0x40000c00
 80030a0:	40010400 	.word	0x40010400
 80030a4:	40014000 	.word	0x40014000
 80030a8:	40001800 	.word	0x40001800

080030ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e042      	b.n	800316c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fe28 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003116:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fdbd 	bl	8003c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800312c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800313c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800314c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b08a      	sub	sp, #40	@ 0x28
 8003178:	af02      	add	r7, sp, #8
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d175      	bne.n	8003280 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_UART_Transmit+0x2c>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e06e      	b.n	8003282 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2221      	movs	r2, #33	@ 0x21
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b2:	f7fd ffc9 	bl	8001148 <HAL_GetTick>
 80031b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x6c>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031e8:	e02e      	b.n	8003248 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fb1f 	bl	8003838 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e03a      	b.n	8003282 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10b      	bne.n	800322a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3302      	adds	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e007      	b.n	800323a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	3301      	adds	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1cb      	bne.n	80031ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2140      	movs	r1, #64	@ 0x40
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 faeb 	bl	8003838 <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e006      	b.n	8003282 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d112      	bne.n	80032ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_UART_Receive_IT+0x26>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e00b      	b.n	80032cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	461a      	mov	r2, r3
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fb12 	bl	80038ea <UART_Start_Receive_IT>
 80032c6:	4603      	mov	r3, r0
 80032c8:	e000      	b.n	80032cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80032ca:	2302      	movs	r3, #2
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b0ba      	sub	sp, #232	@ 0xe8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_UART_IRQHandler+0x66>
 8003326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fbf2 	bl	8003b1c <UART_Receive_IT>
      return;
 8003338:	e25b      	b.n	80037f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800333a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80de 	beq.w	8003500 <HAL_UART_IRQHandler+0x22c>
 8003344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003354:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80d1 	beq.w	8003500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800335e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <HAL_UART_IRQHandler+0xae>
 800336a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d005      	beq.n	8003382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00b      	beq.n	80033a6 <HAL_UART_IRQHandler+0xd2>
 800338e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d005      	beq.n	80033a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f043 0202 	orr.w	r2, r3, #2
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_UART_IRQHandler+0xf6>
 80033b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d005      	beq.n	80033ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	f043 0204 	orr.w	r2, r3, #4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <HAL_UART_IRQHandler+0x126>
 80033d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f043 0208 	orr.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 81f2 	beq.w	80037e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_UART_IRQHandler+0x14e>
 8003410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb7d 	bl	8003b1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342c:	2b40      	cmp	r3, #64	@ 0x40
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_UART_IRQHandler+0x17a>
 8003446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04f      	beq.n	80034ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa85 	bl	800395e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345e:	2b40      	cmp	r3, #64	@ 0x40
 8003460:	d141      	bne.n	80034e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3314      	adds	r3, #20
 8003468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800347c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3314      	adds	r3, #20
 800348a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800348e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800349a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80034a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1d9      	bne.n	8003462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d013      	beq.n	80034de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	4a7e      	ldr	r2, [pc, #504]	@ (80036b4 <HAL_UART_IRQHandler+0x3e0>)
 80034bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd ffcd 	bl	8001462 <HAL_DMA_Abort_IT>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034d8:	4610      	mov	r0, r2
 80034da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	e00e      	b.n	80034fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f994 	bl	800380c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	e00a      	b.n	80034fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f990 	bl	800380c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e006      	b.n	80034fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f98c 	bl	800380c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034fa:	e175      	b.n	80037e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	bf00      	nop
    return;
 80034fe:	e173      	b.n	80037e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	2b01      	cmp	r3, #1
 8003506:	f040 814f 	bne.w	80037a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800350a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8148 	beq.w	80037a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8141 	beq.w	80037a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	f040 80b6 	bne.w	80036b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8145 	beq.w	80037ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800356a:	429a      	cmp	r2, r3
 800356c:	f080 813e 	bcs.w	80037ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003576:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003582:	f000 8088 	beq.w	8003696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800359c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80035a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80035b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80035be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80035ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1d9      	bne.n	8003586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3314      	adds	r3, #20
 80035d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e1      	bne.n	80035d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3314      	adds	r3, #20
 8003614:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800361e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003634:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e3      	bne.n	800360e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003678:	65ba      	str	r2, [r7, #88]	@ 0x58
 800367a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800367e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e3      	bne.n	8003654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fe76 	bl	8001382 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8b7 	bl	8003820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036b2:	e09b      	b.n	80037ec <HAL_UART_IRQHandler+0x518>
 80036b4:	08003a25 	.word	0x08003a25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 808e 	beq.w	80037f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8089 	beq.w	80037f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003702:	647a      	str	r2, [r7, #68]	@ 0x44
 8003704:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003708:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e3      	bne.n	80036de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	623b      	str	r3, [r7, #32]
   return(result);
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3314      	adds	r3, #20
 8003736:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800373a:	633a      	str	r2, [r7, #48]	@ 0x30
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e3      	bne.n	8003716 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	60fb      	str	r3, [r7, #12]
   return(result);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0310 	bic.w	r3, r3, #16
 8003772:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	330c      	adds	r3, #12
 800377c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003780:	61fa      	str	r2, [r7, #28]
 8003782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	69b9      	ldr	r1, [r7, #24]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	617b      	str	r3, [r7, #20]
   return(result);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e3      	bne.n	800375c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800379a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800379e:	4619      	mov	r1, r3
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f83d 	bl	8003820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037a6:	e023      	b.n	80037f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_UART_IRQHandler+0x4f4>
 80037b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f943 	bl	8003a4c <UART_Transmit_IT>
    return;
 80037c6:	e014      	b.n	80037f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <HAL_UART_IRQHandler+0x51e>
 80037d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f983 	bl	8003aec <UART_EndTransmit_IT>
    return;
 80037e6:	e004      	b.n	80037f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80037f0:	bf00      	nop
  }
}
 80037f2:	37e8      	adds	r7, #232	@ 0xe8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003848:	e03b      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003850:	d037      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fd fc79 	bl	8001148 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <UART_WaitOnFlagUntilTimeout+0x30>
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e03a      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	d023      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b80      	cmp	r3, #128	@ 0x80
 800387e:	d020      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d01d      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d116      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f857 	bl	800395e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2208      	movs	r2, #8
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d0b4      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b085      	sub	sp, #20
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	88fa      	ldrh	r2, [r7, #6]
 8003902:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2222      	movs	r2, #34	@ 0x22
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800395e:	b480      	push	{r7}
 8003960:	b095      	sub	sp, #84	@ 0x54
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800397c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003986:	643a      	str	r2, [r7, #64]	@ 0x40
 8003988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800398c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e5      	bne.n	800399a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d119      	bne.n	8003a0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0310 	bic.w	r3, r3, #16
 80039ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039f6:	61ba      	str	r2, [r7, #24]
 80039f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	6979      	ldr	r1, [r7, #20]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	613b      	str	r3, [r7, #16]
   return(result);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a18:	bf00      	nop
 8003a1a:	3754      	adds	r7, #84	@ 0x54
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fee4 	bl	800380c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b21      	cmp	r3, #33	@ 0x21
 8003a5e:	d13e      	bne.n	8003ade <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a68:	d114      	bne.n	8003a94 <UART_Transmit_IT+0x48>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d110      	bne.n	8003a94 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a86:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	621a      	str	r2, [r3, #32]
 8003a92:	e008      	b.n	8003aa6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	1c59      	adds	r1, r3, #1
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6211      	str	r1, [r2, #32]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10f      	bne.n	8003ada <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ad8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fe73 	bl	80037f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	@ 0x30
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b22      	cmp	r3, #34	@ 0x22
 8003b2e:	f040 80ae 	bne.w	8003c8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3a:	d117      	bne.n	8003b6c <UART_Receive_IT+0x50>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d113      	bne.n	8003b6c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	1c9a      	adds	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b6a:	e026      	b.n	8003bba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7e:	d007      	beq.n	8003b90 <UART_Receive_IT+0x74>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <UART_Receive_IT+0x82>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	e008      	b.n	8003bb0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d15d      	bne.n	8003c8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0220 	bic.w	r2, r2, #32
 8003bdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d135      	bne.n	8003c80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f023 0310 	bic.w	r3, r3, #16
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3a:	623a      	str	r2, [r7, #32]
 8003c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	69f9      	ldr	r1, [r7, #28]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b10      	cmp	r3, #16
 8003c5a:	d10a      	bne.n	8003c72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c76:	4619      	mov	r1, r3
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fdd1 	bl	8003820 <HAL_UARTEx_RxEventCallback>
 8003c7e:	e002      	b.n	8003c86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fc ff9d 	bl	8000bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e002      	b.n	8003c90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e000      	b.n	8003c90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3730      	adds	r7, #48	@ 0x30
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b0c0      	sub	sp, #256	@ 0x100
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	68d9      	ldr	r1, [r3, #12]
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	ea40 0301 	orr.w	r3, r0, r1
 8003cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cf0:	f021 010c 	bic.w	r1, r1, #12
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d12:	6999      	ldr	r1, [r3, #24]
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	ea40 0301 	orr.w	r3, r0, r1
 8003d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b8f      	ldr	r3, [pc, #572]	@ (8003f64 <UART_SetConfig+0x2cc>)
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d005      	beq.n	8003d38 <UART_SetConfig+0xa0>
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b8d      	ldr	r3, [pc, #564]	@ (8003f68 <UART_SetConfig+0x2d0>)
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d104      	bne.n	8003d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d38:	f7fe f9f0 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d40:	e003      	b.n	8003d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d42:	f7fe f9d7 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8003d46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d54:	f040 810c 	bne.w	8003f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	1891      	adds	r1, r2, r2
 8003d70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d72:	415b      	adcs	r3, r3
 8003d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	eb12 0801 	adds.w	r8, r2, r1
 8003d80:	4629      	mov	r1, r5
 8003d82:	eb43 0901 	adc.w	r9, r3, r1
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d9a:	4690      	mov	r8, r2
 8003d9c:	4699      	mov	r9, r3
 8003d9e:	4623      	mov	r3, r4
 8003da0:	eb18 0303 	adds.w	r3, r8, r3
 8003da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003da8:	462b      	mov	r3, r5
 8003daa:	eb49 0303 	adc.w	r3, r9, r3
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	18db      	adds	r3, r3, r3
 8003dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dcc:	4613      	mov	r3, r2
 8003dce:	eb42 0303 	adc.w	r3, r2, r3
 8003dd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ddc:	f7fc fa48 	bl	8000270 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4b61      	ldr	r3, [pc, #388]	@ (8003f6c <UART_SetConfig+0x2d4>)
 8003de6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	011c      	lsls	r4, r3, #4
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003df8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e10:	4641      	mov	r1, r8
 8003e12:	eb12 0a01 	adds.w	sl, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb43 0b01 	adc.w	fp, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e30:	4692      	mov	sl, r2
 8003e32:	469b      	mov	fp, r3
 8003e34:	4643      	mov	r3, r8
 8003e36:	eb1a 0303 	adds.w	r3, sl, r3
 8003e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	eb4b 0303 	adc.w	r3, fp, r3
 8003e44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	18db      	adds	r3, r3, r3
 8003e60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e62:	4613      	mov	r3, r2
 8003e64:	eb42 0303 	adc.w	r3, r2, r3
 8003e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e72:	f7fc f9fd 	bl	8000270 <__aeabi_uldivmod>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f6c <UART_SetConfig+0x2d4>)
 8003e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	2264      	movs	r2, #100	@ 0x64
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	1acb      	subs	r3, r1, r3
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e92:	4b36      	ldr	r3, [pc, #216]	@ (8003f6c <UART_SetConfig+0x2d4>)
 8003e94:	fba3 2302 	umull	r2, r3, r3, r2
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ea0:	441c      	add	r4, r3
 8003ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	1891      	adds	r1, r2, r2
 8003eba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ebc:	415b      	adcs	r3, r3
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	1851      	adds	r1, r2, r1
 8003ec8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003eca:	4649      	mov	r1, r9
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003edc:	4659      	mov	r1, fp
 8003ede:	00cb      	lsls	r3, r1, #3
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	00ca      	lsls	r2, r1, #3
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ef8:	464b      	mov	r3, r9
 8003efa:	460a      	mov	r2, r1
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f18:	460b      	mov	r3, r1
 8003f1a:	18db      	adds	r3, r3, r3
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1e:	4613      	mov	r3, r2
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f2e:	f7fc f99f 	bl	8000270 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <UART_SetConfig+0x2d4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	@ 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3332      	adds	r3, #50	@ 0x32
 8003f4a:	4a08      	ldr	r2, [pc, #32]	@ (8003f6c <UART_SetConfig+0x2d4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 0207 	and.w	r2, r3, #7
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4422      	add	r2, r4
 8003f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f60:	e106      	b.n	8004170 <UART_SetConfig+0x4d8>
 8003f62:	bf00      	nop
 8003f64:	40011000 	.word	0x40011000
 8003f68:	40011400 	.word	0x40011400
 8003f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f82:	4642      	mov	r2, r8
 8003f84:	464b      	mov	r3, r9
 8003f86:	1891      	adds	r1, r2, r2
 8003f88:	6239      	str	r1, [r7, #32]
 8003f8a:	415b      	adcs	r3, r3
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f92:	4641      	mov	r1, r8
 8003f94:	1854      	adds	r4, r2, r1
 8003f96:	4649      	mov	r1, r9
 8003f98:	eb43 0501 	adc.w	r5, r3, r1
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	00eb      	lsls	r3, r5, #3
 8003fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003faa:	00e2      	lsls	r2, r4, #3
 8003fac:	4614      	mov	r4, r2
 8003fae:	461d      	mov	r5, r3
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	18e3      	adds	r3, r4, r3
 8003fb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fb8:	464b      	mov	r3, r9
 8003fba:	eb45 0303 	adc.w	r3, r5, r3
 8003fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fde:	4629      	mov	r1, r5
 8003fe0:	008b      	lsls	r3, r1, #2
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe8:	4621      	mov	r1, r4
 8003fea:	008a      	lsls	r2, r1, #2
 8003fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ff0:	f7fc f93e 	bl	8000270 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4b60      	ldr	r3, [pc, #384]	@ (800417c <UART_SetConfig+0x4e4>)
 8003ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	011c      	lsls	r4, r3, #4
 8004002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800400c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	1891      	adds	r1, r2, r2
 800401a:	61b9      	str	r1, [r7, #24]
 800401c:	415b      	adcs	r3, r3
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004024:	4641      	mov	r1, r8
 8004026:	1851      	adds	r1, r2, r1
 8004028:	6139      	str	r1, [r7, #16]
 800402a:	4649      	mov	r1, r9
 800402c:	414b      	adcs	r3, r1
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800403c:	4659      	mov	r1, fp
 800403e:	00cb      	lsls	r3, r1, #3
 8004040:	4651      	mov	r1, sl
 8004042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004046:	4651      	mov	r1, sl
 8004048:	00ca      	lsls	r2, r1, #3
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	4603      	mov	r3, r0
 8004050:	4642      	mov	r2, r8
 8004052:	189b      	adds	r3, r3, r2
 8004054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004058:	464b      	mov	r3, r9
 800405a:	460a      	mov	r2, r1
 800405c:	eb42 0303 	adc.w	r3, r2, r3
 8004060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800406e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800407c:	4649      	mov	r1, r9
 800407e:	008b      	lsls	r3, r1, #2
 8004080:	4641      	mov	r1, r8
 8004082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004086:	4641      	mov	r1, r8
 8004088:	008a      	lsls	r2, r1, #2
 800408a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800408e:	f7fc f8ef 	bl	8000270 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4611      	mov	r1, r2
 8004098:	4b38      	ldr	r3, [pc, #224]	@ (800417c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2301 	umull	r2, r3, r3, r1
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2264      	movs	r2, #100	@ 0x64
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	@ 0x32
 80040ac:	4a33      	ldr	r2, [pc, #204]	@ (800417c <UART_SetConfig+0x4e4>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040b8:	441c      	add	r4, r3
 80040ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040be:	2200      	movs	r2, #0
 80040c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80040c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80040c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	415b      	adcs	r3, r3
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d8:	4641      	mov	r1, r8
 80040da:	1851      	adds	r1, r2, r1
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040f0:	4659      	mov	r1, fp
 80040f2:	00cb      	lsls	r3, r1, #3
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fa:	4651      	mov	r1, sl
 80040fc:	00ca      	lsls	r2, r1, #3
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	4603      	mov	r3, r0
 8004104:	4642      	mov	r2, r8
 8004106:	189b      	adds	r3, r3, r2
 8004108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800410a:	464b      	mov	r3, r9
 800410c:	460a      	mov	r2, r1
 800410e:	eb42 0303 	adc.w	r3, r2, r3
 8004112:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	663b      	str	r3, [r7, #96]	@ 0x60
 800411e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800413e:	f7fc f897 	bl	8000270 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <UART_SetConfig+0x4e4>)
 8004148:	fba3 1302 	umull	r1, r3, r3, r2
 800414c:	095b      	lsrs	r3, r3, #5
 800414e:	2164      	movs	r1, #100	@ 0x64
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	3332      	adds	r3, #50	@ 0x32
 800415a:	4a08      	ldr	r2, [pc, #32]	@ (800417c <UART_SetConfig+0x4e4>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4422      	add	r2, r4
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004176:	46bd      	mov	sp, r7
 8004178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800417c:	51eb851f 	.word	0x51eb851f

08004180 <atoi>:
 8004180:	220a      	movs	r2, #10
 8004182:	2100      	movs	r1, #0
 8004184:	f000 b87a 	b.w	800427c <strtol>

08004188 <_strtol_l.isra.0>:
 8004188:	2b24      	cmp	r3, #36	@ 0x24
 800418a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800418e:	4686      	mov	lr, r0
 8004190:	4690      	mov	r8, r2
 8004192:	d801      	bhi.n	8004198 <_strtol_l.isra.0+0x10>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <_strtol_l.isra.0+0x1e>
 8004198:	f000 fa2a 	bl	80045f0 <__errno>
 800419c:	2316      	movs	r3, #22
 800419e:	6003      	str	r3, [r0, #0]
 80041a0:	2000      	movs	r0, #0
 80041a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a6:	4834      	ldr	r0, [pc, #208]	@ (8004278 <_strtol_l.isra.0+0xf0>)
 80041a8:	460d      	mov	r5, r1
 80041aa:	462a      	mov	r2, r5
 80041ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041b0:	5d06      	ldrb	r6, [r0, r4]
 80041b2:	f016 0608 	ands.w	r6, r6, #8
 80041b6:	d1f8      	bne.n	80041aa <_strtol_l.isra.0+0x22>
 80041b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80041ba:	d110      	bne.n	80041de <_strtol_l.isra.0+0x56>
 80041bc:	782c      	ldrb	r4, [r5, #0]
 80041be:	2601      	movs	r6, #1
 80041c0:	1c95      	adds	r5, r2, #2
 80041c2:	f033 0210 	bics.w	r2, r3, #16
 80041c6:	d115      	bne.n	80041f4 <_strtol_l.isra.0+0x6c>
 80041c8:	2c30      	cmp	r4, #48	@ 0x30
 80041ca:	d10d      	bne.n	80041e8 <_strtol_l.isra.0+0x60>
 80041cc:	782a      	ldrb	r2, [r5, #0]
 80041ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80041d2:	2a58      	cmp	r2, #88	@ 0x58
 80041d4:	d108      	bne.n	80041e8 <_strtol_l.isra.0+0x60>
 80041d6:	786c      	ldrb	r4, [r5, #1]
 80041d8:	3502      	adds	r5, #2
 80041da:	2310      	movs	r3, #16
 80041dc:	e00a      	b.n	80041f4 <_strtol_l.isra.0+0x6c>
 80041de:	2c2b      	cmp	r4, #43	@ 0x2b
 80041e0:	bf04      	itt	eq
 80041e2:	782c      	ldrbeq	r4, [r5, #0]
 80041e4:	1c95      	addeq	r5, r2, #2
 80041e6:	e7ec      	b.n	80041c2 <_strtol_l.isra.0+0x3a>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f6      	bne.n	80041da <_strtol_l.isra.0+0x52>
 80041ec:	2c30      	cmp	r4, #48	@ 0x30
 80041ee:	bf14      	ite	ne
 80041f0:	230a      	movne	r3, #10
 80041f2:	2308      	moveq	r3, #8
 80041f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80041f8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80041fc:	2200      	movs	r2, #0
 80041fe:	fbbc f9f3 	udiv	r9, ip, r3
 8004202:	4610      	mov	r0, r2
 8004204:	fb03 ca19 	mls	sl, r3, r9, ip
 8004208:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800420c:	2f09      	cmp	r7, #9
 800420e:	d80f      	bhi.n	8004230 <_strtol_l.isra.0+0xa8>
 8004210:	463c      	mov	r4, r7
 8004212:	42a3      	cmp	r3, r4
 8004214:	dd1b      	ble.n	800424e <_strtol_l.isra.0+0xc6>
 8004216:	1c57      	adds	r7, r2, #1
 8004218:	d007      	beq.n	800422a <_strtol_l.isra.0+0xa2>
 800421a:	4581      	cmp	r9, r0
 800421c:	d314      	bcc.n	8004248 <_strtol_l.isra.0+0xc0>
 800421e:	d101      	bne.n	8004224 <_strtol_l.isra.0+0x9c>
 8004220:	45a2      	cmp	sl, r4
 8004222:	db11      	blt.n	8004248 <_strtol_l.isra.0+0xc0>
 8004224:	fb00 4003 	mla	r0, r0, r3, r4
 8004228:	2201      	movs	r2, #1
 800422a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800422e:	e7eb      	b.n	8004208 <_strtol_l.isra.0+0x80>
 8004230:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004234:	2f19      	cmp	r7, #25
 8004236:	d801      	bhi.n	800423c <_strtol_l.isra.0+0xb4>
 8004238:	3c37      	subs	r4, #55	@ 0x37
 800423a:	e7ea      	b.n	8004212 <_strtol_l.isra.0+0x8a>
 800423c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004240:	2f19      	cmp	r7, #25
 8004242:	d804      	bhi.n	800424e <_strtol_l.isra.0+0xc6>
 8004244:	3c57      	subs	r4, #87	@ 0x57
 8004246:	e7e4      	b.n	8004212 <_strtol_l.isra.0+0x8a>
 8004248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800424c:	e7ed      	b.n	800422a <_strtol_l.isra.0+0xa2>
 800424e:	1c53      	adds	r3, r2, #1
 8004250:	d108      	bne.n	8004264 <_strtol_l.isra.0+0xdc>
 8004252:	2322      	movs	r3, #34	@ 0x22
 8004254:	f8ce 3000 	str.w	r3, [lr]
 8004258:	4660      	mov	r0, ip
 800425a:	f1b8 0f00 	cmp.w	r8, #0
 800425e:	d0a0      	beq.n	80041a2 <_strtol_l.isra.0+0x1a>
 8004260:	1e69      	subs	r1, r5, #1
 8004262:	e006      	b.n	8004272 <_strtol_l.isra.0+0xea>
 8004264:	b106      	cbz	r6, 8004268 <_strtol_l.isra.0+0xe0>
 8004266:	4240      	negs	r0, r0
 8004268:	f1b8 0f00 	cmp.w	r8, #0
 800426c:	d099      	beq.n	80041a2 <_strtol_l.isra.0+0x1a>
 800426e:	2a00      	cmp	r2, #0
 8004270:	d1f6      	bne.n	8004260 <_strtol_l.isra.0+0xd8>
 8004272:	f8c8 1000 	str.w	r1, [r8]
 8004276:	e794      	b.n	80041a2 <_strtol_l.isra.0+0x1a>
 8004278:	080052b9 	.word	0x080052b9

0800427c <strtol>:
 800427c:	4613      	mov	r3, r2
 800427e:	460a      	mov	r2, r1
 8004280:	4601      	mov	r1, r0
 8004282:	4802      	ldr	r0, [pc, #8]	@ (800428c <strtol+0x10>)
 8004284:	6800      	ldr	r0, [r0, #0]
 8004286:	f7ff bf7f 	b.w	8004188 <_strtol_l.isra.0>
 800428a:	bf00      	nop
 800428c:	20000024 	.word	0x20000024

08004290 <std>:
 8004290:	2300      	movs	r3, #0
 8004292:	b510      	push	{r4, lr}
 8004294:	4604      	mov	r4, r0
 8004296:	e9c0 3300 	strd	r3, r3, [r0]
 800429a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800429e:	6083      	str	r3, [r0, #8]
 80042a0:	8181      	strh	r1, [r0, #12]
 80042a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80042a4:	81c2      	strh	r2, [r0, #14]
 80042a6:	6183      	str	r3, [r0, #24]
 80042a8:	4619      	mov	r1, r3
 80042aa:	2208      	movs	r2, #8
 80042ac:	305c      	adds	r0, #92	@ 0x5c
 80042ae:	f000 f8f4 	bl	800449a <memset>
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <std+0x58>)
 80042b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <std+0x5c>)
 80042b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ba:	4b0d      	ldr	r3, [pc, #52]	@ (80042f0 <std+0x60>)
 80042bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042be:	4b0d      	ldr	r3, [pc, #52]	@ (80042f4 <std+0x64>)
 80042c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <std+0x68>)
 80042c4:	6224      	str	r4, [r4, #32]
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d006      	beq.n	80042d8 <std+0x48>
 80042ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042ce:	4294      	cmp	r4, r2
 80042d0:	d002      	beq.n	80042d8 <std+0x48>
 80042d2:	33d0      	adds	r3, #208	@ 0xd0
 80042d4:	429c      	cmp	r4, r3
 80042d6:	d105      	bne.n	80042e4 <std+0x54>
 80042d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	f000 b9b0 	b.w	8004644 <__retarget_lock_init_recursive>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	bf00      	nop
 80042e8:	08004415 	.word	0x08004415
 80042ec:	08004437 	.word	0x08004437
 80042f0:	0800446f 	.word	0x0800446f
 80042f4:	08004493 	.word	0x08004493
 80042f8:	2000016c 	.word	0x2000016c

080042fc <stdio_exit_handler>:
 80042fc:	4a02      	ldr	r2, [pc, #8]	@ (8004308 <stdio_exit_handler+0xc>)
 80042fe:	4903      	ldr	r1, [pc, #12]	@ (800430c <stdio_exit_handler+0x10>)
 8004300:	4803      	ldr	r0, [pc, #12]	@ (8004310 <stdio_exit_handler+0x14>)
 8004302:	f000 b869 	b.w	80043d8 <_fwalk_sglue>
 8004306:	bf00      	nop
 8004308:	20000018 	.word	0x20000018
 800430c:	08004991 	.word	0x08004991
 8004310:	20000028 	.word	0x20000028

08004314 <cleanup_stdio>:
 8004314:	6841      	ldr	r1, [r0, #4]
 8004316:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <cleanup_stdio+0x34>)
 8004318:	4299      	cmp	r1, r3
 800431a:	b510      	push	{r4, lr}
 800431c:	4604      	mov	r4, r0
 800431e:	d001      	beq.n	8004324 <cleanup_stdio+0x10>
 8004320:	f000 fb36 	bl	8004990 <_fflush_r>
 8004324:	68a1      	ldr	r1, [r4, #8]
 8004326:	4b09      	ldr	r3, [pc, #36]	@ (800434c <cleanup_stdio+0x38>)
 8004328:	4299      	cmp	r1, r3
 800432a:	d002      	beq.n	8004332 <cleanup_stdio+0x1e>
 800432c:	4620      	mov	r0, r4
 800432e:	f000 fb2f 	bl	8004990 <_fflush_r>
 8004332:	68e1      	ldr	r1, [r4, #12]
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <cleanup_stdio+0x3c>)
 8004336:	4299      	cmp	r1, r3
 8004338:	d004      	beq.n	8004344 <cleanup_stdio+0x30>
 800433a:	4620      	mov	r0, r4
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f000 bb26 	b.w	8004990 <_fflush_r>
 8004344:	bd10      	pop	{r4, pc}
 8004346:	bf00      	nop
 8004348:	2000016c 	.word	0x2000016c
 800434c:	200001d4 	.word	0x200001d4
 8004350:	2000023c 	.word	0x2000023c

08004354 <global_stdio_init.part.0>:
 8004354:	b510      	push	{r4, lr}
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <global_stdio_init.part.0+0x30>)
 8004358:	4c0b      	ldr	r4, [pc, #44]	@ (8004388 <global_stdio_init.part.0+0x34>)
 800435a:	4a0c      	ldr	r2, [pc, #48]	@ (800438c <global_stdio_init.part.0+0x38>)
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	4620      	mov	r0, r4
 8004360:	2200      	movs	r2, #0
 8004362:	2104      	movs	r1, #4
 8004364:	f7ff ff94 	bl	8004290 <std>
 8004368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800436c:	2201      	movs	r2, #1
 800436e:	2109      	movs	r1, #9
 8004370:	f7ff ff8e 	bl	8004290 <std>
 8004374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004378:	2202      	movs	r2, #2
 800437a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800437e:	2112      	movs	r1, #18
 8004380:	f7ff bf86 	b.w	8004290 <std>
 8004384:	200002a4 	.word	0x200002a4
 8004388:	2000016c 	.word	0x2000016c
 800438c:	080042fd 	.word	0x080042fd

08004390 <__sfp_lock_acquire>:
 8004390:	4801      	ldr	r0, [pc, #4]	@ (8004398 <__sfp_lock_acquire+0x8>)
 8004392:	f000 b958 	b.w	8004646 <__retarget_lock_acquire_recursive>
 8004396:	bf00      	nop
 8004398:	200002ad 	.word	0x200002ad

0800439c <__sfp_lock_release>:
 800439c:	4801      	ldr	r0, [pc, #4]	@ (80043a4 <__sfp_lock_release+0x8>)
 800439e:	f000 b953 	b.w	8004648 <__retarget_lock_release_recursive>
 80043a2:	bf00      	nop
 80043a4:	200002ad 	.word	0x200002ad

080043a8 <__sinit>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	4604      	mov	r4, r0
 80043ac:	f7ff fff0 	bl	8004390 <__sfp_lock_acquire>
 80043b0:	6a23      	ldr	r3, [r4, #32]
 80043b2:	b11b      	cbz	r3, 80043bc <__sinit+0x14>
 80043b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b8:	f7ff bff0 	b.w	800439c <__sfp_lock_release>
 80043bc:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <__sinit+0x28>)
 80043be:	6223      	str	r3, [r4, #32]
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <__sinit+0x2c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f5      	bne.n	80043b4 <__sinit+0xc>
 80043c8:	f7ff ffc4 	bl	8004354 <global_stdio_init.part.0>
 80043cc:	e7f2      	b.n	80043b4 <__sinit+0xc>
 80043ce:	bf00      	nop
 80043d0:	08004315 	.word	0x08004315
 80043d4:	200002a4 	.word	0x200002a4

080043d8 <_fwalk_sglue>:
 80043d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043dc:	4607      	mov	r7, r0
 80043de:	4688      	mov	r8, r1
 80043e0:	4614      	mov	r4, r2
 80043e2:	2600      	movs	r6, #0
 80043e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043e8:	f1b9 0901 	subs.w	r9, r9, #1
 80043ec:	d505      	bpl.n	80043fa <_fwalk_sglue+0x22>
 80043ee:	6824      	ldr	r4, [r4, #0]
 80043f0:	2c00      	cmp	r4, #0
 80043f2:	d1f7      	bne.n	80043e4 <_fwalk_sglue+0xc>
 80043f4:	4630      	mov	r0, r6
 80043f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d907      	bls.n	8004410 <_fwalk_sglue+0x38>
 8004400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004404:	3301      	adds	r3, #1
 8004406:	d003      	beq.n	8004410 <_fwalk_sglue+0x38>
 8004408:	4629      	mov	r1, r5
 800440a:	4638      	mov	r0, r7
 800440c:	47c0      	blx	r8
 800440e:	4306      	orrs	r6, r0
 8004410:	3568      	adds	r5, #104	@ 0x68
 8004412:	e7e9      	b.n	80043e8 <_fwalk_sglue+0x10>

08004414 <__sread>:
 8004414:	b510      	push	{r4, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	f000 f8c4 	bl	80045a8 <_read_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	bfab      	itete	ge
 8004424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004426:	89a3      	ldrhlt	r3, [r4, #12]
 8004428:	181b      	addge	r3, r3, r0
 800442a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800442e:	bfac      	ite	ge
 8004430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004432:	81a3      	strhlt	r3, [r4, #12]
 8004434:	bd10      	pop	{r4, pc}

08004436 <__swrite>:
 8004436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443a:	461f      	mov	r7, r3
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	05db      	lsls	r3, r3, #23
 8004440:	4605      	mov	r5, r0
 8004442:	460c      	mov	r4, r1
 8004444:	4616      	mov	r6, r2
 8004446:	d505      	bpl.n	8004454 <__swrite+0x1e>
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	2302      	movs	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	f000 f898 	bl	8004584 <_lseek_r>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800445a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800445e:	81a3      	strh	r3, [r4, #12]
 8004460:	4632      	mov	r2, r6
 8004462:	463b      	mov	r3, r7
 8004464:	4628      	mov	r0, r5
 8004466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	f000 b8af 	b.w	80045cc <_write_r>

0800446e <__sseek>:
 800446e:	b510      	push	{r4, lr}
 8004470:	460c      	mov	r4, r1
 8004472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004476:	f000 f885 	bl	8004584 <_lseek_r>
 800447a:	1c43      	adds	r3, r0, #1
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	bf15      	itete	ne
 8004480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800448a:	81a3      	strheq	r3, [r4, #12]
 800448c:	bf18      	it	ne
 800448e:	81a3      	strhne	r3, [r4, #12]
 8004490:	bd10      	pop	{r4, pc}

08004492 <__sclose>:
 8004492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004496:	f000 b865 	b.w	8004564 <_close_r>

0800449a <memset>:
 800449a:	4402      	add	r2, r0
 800449c:	4603      	mov	r3, r0
 800449e:	4293      	cmp	r3, r2
 80044a0:	d100      	bne.n	80044a4 <memset+0xa>
 80044a2:	4770      	bx	lr
 80044a4:	f803 1b01 	strb.w	r1, [r3], #1
 80044a8:	e7f9      	b.n	800449e <memset+0x4>
	...

080044ac <strtok>:
 80044ac:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <strtok+0x5c>)
 80044ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b2:	681f      	ldr	r7, [r3, #0]
 80044b4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80044b6:	4605      	mov	r5, r0
 80044b8:	460e      	mov	r6, r1
 80044ba:	b9ec      	cbnz	r4, 80044f8 <strtok+0x4c>
 80044bc:	2050      	movs	r0, #80	@ 0x50
 80044be:	f000 f92d 	bl	800471c <malloc>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6478      	str	r0, [r7, #68]	@ 0x44
 80044c6:	b920      	cbnz	r0, 80044d2 <strtok+0x26>
 80044c8:	4b10      	ldr	r3, [pc, #64]	@ (800450c <strtok+0x60>)
 80044ca:	4811      	ldr	r0, [pc, #68]	@ (8004510 <strtok+0x64>)
 80044cc:	215b      	movs	r1, #91	@ 0x5b
 80044ce:	f000 f8bd 	bl	800464c <__assert_func>
 80044d2:	e9c0 4400 	strd	r4, r4, [r0]
 80044d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80044da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80044de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80044e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80044e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80044ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80044ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80044f2:	6184      	str	r4, [r0, #24]
 80044f4:	7704      	strb	r4, [r0, #28]
 80044f6:	6244      	str	r4, [r0, #36]	@ 0x24
 80044f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044fa:	4631      	mov	r1, r6
 80044fc:	4628      	mov	r0, r5
 80044fe:	2301      	movs	r3, #1
 8004500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	f000 b806 	b.w	8004514 <__strtok_r>
 8004508:	20000024 	.word	0x20000024
 800450c:	080053b9 	.word	0x080053b9
 8004510:	080053d0 	.word	0x080053d0

08004514 <__strtok_r>:
 8004514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004516:	4604      	mov	r4, r0
 8004518:	b908      	cbnz	r0, 800451e <__strtok_r+0xa>
 800451a:	6814      	ldr	r4, [r2, #0]
 800451c:	b144      	cbz	r4, 8004530 <__strtok_r+0x1c>
 800451e:	4620      	mov	r0, r4
 8004520:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004524:	460f      	mov	r7, r1
 8004526:	f817 6b01 	ldrb.w	r6, [r7], #1
 800452a:	b91e      	cbnz	r6, 8004534 <__strtok_r+0x20>
 800452c:	b965      	cbnz	r5, 8004548 <__strtok_r+0x34>
 800452e:	6015      	str	r5, [r2, #0]
 8004530:	2000      	movs	r0, #0
 8004532:	e005      	b.n	8004540 <__strtok_r+0x2c>
 8004534:	42b5      	cmp	r5, r6
 8004536:	d1f6      	bne.n	8004526 <__strtok_r+0x12>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <__strtok_r+0xa>
 800453c:	6014      	str	r4, [r2, #0]
 800453e:	7003      	strb	r3, [r0, #0]
 8004540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004542:	461c      	mov	r4, r3
 8004544:	e00c      	b.n	8004560 <__strtok_r+0x4c>
 8004546:	b91d      	cbnz	r5, 8004550 <__strtok_r+0x3c>
 8004548:	4627      	mov	r7, r4
 800454a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800454e:	460e      	mov	r6, r1
 8004550:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004554:	42ab      	cmp	r3, r5
 8004556:	d1f6      	bne.n	8004546 <__strtok_r+0x32>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f2      	beq.n	8004542 <__strtok_r+0x2e>
 800455c:	2300      	movs	r3, #0
 800455e:	703b      	strb	r3, [r7, #0]
 8004560:	6014      	str	r4, [r2, #0]
 8004562:	e7ed      	b.n	8004540 <__strtok_r+0x2c>

08004564 <_close_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d06      	ldr	r5, [pc, #24]	@ (8004580 <_close_r+0x1c>)
 8004568:	2300      	movs	r3, #0
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fc fcde 	bl	8000f30 <_close>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_close_r+0x1a>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_close_r+0x1a>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	200002a8 	.word	0x200002a8

08004584 <_lseek_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4d07      	ldr	r5, [pc, #28]	@ (80045a4 <_lseek_r+0x20>)
 8004588:	4604      	mov	r4, r0
 800458a:	4608      	mov	r0, r1
 800458c:	4611      	mov	r1, r2
 800458e:	2200      	movs	r2, #0
 8004590:	602a      	str	r2, [r5, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f7fc fcf3 	bl	8000f7e <_lseek>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_lseek_r+0x1e>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_lseek_r+0x1e>
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	200002a8 	.word	0x200002a8

080045a8 <_read_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4d07      	ldr	r5, [pc, #28]	@ (80045c8 <_read_r+0x20>)
 80045ac:	4604      	mov	r4, r0
 80045ae:	4608      	mov	r0, r1
 80045b0:	4611      	mov	r1, r2
 80045b2:	2200      	movs	r2, #0
 80045b4:	602a      	str	r2, [r5, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f7fc fc81 	bl	8000ebe <_read>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_read_r+0x1e>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_read_r+0x1e>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	200002a8 	.word	0x200002a8

080045cc <_write_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4d07      	ldr	r5, [pc, #28]	@ (80045ec <_write_r+0x20>)
 80045d0:	4604      	mov	r4, r0
 80045d2:	4608      	mov	r0, r1
 80045d4:	4611      	mov	r1, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	602a      	str	r2, [r5, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	f7fc fc8c 	bl	8000ef8 <_write>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_write_r+0x1e>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_write_r+0x1e>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	200002a8 	.word	0x200002a8

080045f0 <__errno>:
 80045f0:	4b01      	ldr	r3, [pc, #4]	@ (80045f8 <__errno+0x8>)
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000024 	.word	0x20000024

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004634 <__libc_init_array+0x38>)
 8004600:	4c0d      	ldr	r4, [pc, #52]	@ (8004638 <__libc_init_array+0x3c>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	2600      	movs	r6, #0
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	4d0b      	ldr	r5, [pc, #44]	@ (800463c <__libc_init_array+0x40>)
 800460e:	4c0c      	ldr	r4, [pc, #48]	@ (8004640 <__libc_init_array+0x44>)
 8004610:	f000 fe38 	bl	8005284 <_init>
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	2600      	movs	r6, #0
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	f855 3b04 	ldr.w	r3, [r5], #4
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	f855 3b04 	ldr.w	r3, [r5], #4
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	080054a4 	.word	0x080054a4
 8004638:	080054a4 	.word	0x080054a4
 800463c:	080054a4 	.word	0x080054a4
 8004640:	080054a8 	.word	0x080054a8

08004644 <__retarget_lock_init_recursive>:
 8004644:	4770      	bx	lr

08004646 <__retarget_lock_acquire_recursive>:
 8004646:	4770      	bx	lr

08004648 <__retarget_lock_release_recursive>:
 8004648:	4770      	bx	lr
	...

0800464c <__assert_func>:
 800464c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800464e:	4614      	mov	r4, r2
 8004650:	461a      	mov	r2, r3
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <__assert_func+0x2c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4605      	mov	r5, r0
 8004658:	68d8      	ldr	r0, [r3, #12]
 800465a:	b14c      	cbz	r4, 8004670 <__assert_func+0x24>
 800465c:	4b07      	ldr	r3, [pc, #28]	@ (800467c <__assert_func+0x30>)
 800465e:	9100      	str	r1, [sp, #0]
 8004660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004664:	4906      	ldr	r1, [pc, #24]	@ (8004680 <__assert_func+0x34>)
 8004666:	462b      	mov	r3, r5
 8004668:	f000 f9ba 	bl	80049e0 <fiprintf>
 800466c:	f000 f9da 	bl	8004a24 <abort>
 8004670:	4b04      	ldr	r3, [pc, #16]	@ (8004684 <__assert_func+0x38>)
 8004672:	461c      	mov	r4, r3
 8004674:	e7f3      	b.n	800465e <__assert_func+0x12>
 8004676:	bf00      	nop
 8004678:	20000024 	.word	0x20000024
 800467c:	0800542a 	.word	0x0800542a
 8004680:	08005437 	.word	0x08005437
 8004684:	08005465 	.word	0x08005465

08004688 <_free_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4605      	mov	r5, r0
 800468c:	2900      	cmp	r1, #0
 800468e:	d041      	beq.n	8004714 <_free_r+0x8c>
 8004690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004694:	1f0c      	subs	r4, r1, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfb8      	it	lt
 800469a:	18e4      	addlt	r4, r4, r3
 800469c:	f000 f8e8 	bl	8004870 <__malloc_lock>
 80046a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <_free_r+0x90>)
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	b933      	cbnz	r3, 80046b4 <_free_r+0x2c>
 80046a6:	6063      	str	r3, [r4, #4]
 80046a8:	6014      	str	r4, [r2, #0]
 80046aa:	4628      	mov	r0, r5
 80046ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b0:	f000 b8e4 	b.w	800487c <__malloc_unlock>
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d908      	bls.n	80046ca <_free_r+0x42>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	1821      	adds	r1, r4, r0
 80046bc:	428b      	cmp	r3, r1
 80046be:	bf01      	itttt	eq
 80046c0:	6819      	ldreq	r1, [r3, #0]
 80046c2:	685b      	ldreq	r3, [r3, #4]
 80046c4:	1809      	addeq	r1, r1, r0
 80046c6:	6021      	streq	r1, [r4, #0]
 80046c8:	e7ed      	b.n	80046a6 <_free_r+0x1e>
 80046ca:	461a      	mov	r2, r3
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	b10b      	cbz	r3, 80046d4 <_free_r+0x4c>
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	d9fa      	bls.n	80046ca <_free_r+0x42>
 80046d4:	6811      	ldr	r1, [r2, #0]
 80046d6:	1850      	adds	r0, r2, r1
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d10b      	bne.n	80046f4 <_free_r+0x6c>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	4401      	add	r1, r0
 80046e0:	1850      	adds	r0, r2, r1
 80046e2:	4283      	cmp	r3, r0
 80046e4:	6011      	str	r1, [r2, #0]
 80046e6:	d1e0      	bne.n	80046aa <_free_r+0x22>
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	6053      	str	r3, [r2, #4]
 80046ee:	4408      	add	r0, r1
 80046f0:	6010      	str	r0, [r2, #0]
 80046f2:	e7da      	b.n	80046aa <_free_r+0x22>
 80046f4:	d902      	bls.n	80046fc <_free_r+0x74>
 80046f6:	230c      	movs	r3, #12
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	e7d6      	b.n	80046aa <_free_r+0x22>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	1821      	adds	r1, r4, r0
 8004700:	428b      	cmp	r3, r1
 8004702:	bf04      	itt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	6063      	str	r3, [r4, #4]
 800470a:	bf04      	itt	eq
 800470c:	1809      	addeq	r1, r1, r0
 800470e:	6021      	streq	r1, [r4, #0]
 8004710:	6054      	str	r4, [r2, #4]
 8004712:	e7ca      	b.n	80046aa <_free_r+0x22>
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	200002b4 	.word	0x200002b4

0800471c <malloc>:
 800471c:	4b02      	ldr	r3, [pc, #8]	@ (8004728 <malloc+0xc>)
 800471e:	4601      	mov	r1, r0
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f000 b825 	b.w	8004770 <_malloc_r>
 8004726:	bf00      	nop
 8004728:	20000024 	.word	0x20000024

0800472c <sbrk_aligned>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4e0f      	ldr	r6, [pc, #60]	@ (800476c <sbrk_aligned+0x40>)
 8004730:	460c      	mov	r4, r1
 8004732:	6831      	ldr	r1, [r6, #0]
 8004734:	4605      	mov	r5, r0
 8004736:	b911      	cbnz	r1, 800473e <sbrk_aligned+0x12>
 8004738:	f000 f964 	bl	8004a04 <_sbrk_r>
 800473c:	6030      	str	r0, [r6, #0]
 800473e:	4621      	mov	r1, r4
 8004740:	4628      	mov	r0, r5
 8004742:	f000 f95f 	bl	8004a04 <_sbrk_r>
 8004746:	1c43      	adds	r3, r0, #1
 8004748:	d103      	bne.n	8004752 <sbrk_aligned+0x26>
 800474a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800474e:	4620      	mov	r0, r4
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	1cc4      	adds	r4, r0, #3
 8004754:	f024 0403 	bic.w	r4, r4, #3
 8004758:	42a0      	cmp	r0, r4
 800475a:	d0f8      	beq.n	800474e <sbrk_aligned+0x22>
 800475c:	1a21      	subs	r1, r4, r0
 800475e:	4628      	mov	r0, r5
 8004760:	f000 f950 	bl	8004a04 <_sbrk_r>
 8004764:	3001      	adds	r0, #1
 8004766:	d1f2      	bne.n	800474e <sbrk_aligned+0x22>
 8004768:	e7ef      	b.n	800474a <sbrk_aligned+0x1e>
 800476a:	bf00      	nop
 800476c:	200002b0 	.word	0x200002b0

08004770 <_malloc_r>:
 8004770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004774:	1ccd      	adds	r5, r1, #3
 8004776:	f025 0503 	bic.w	r5, r5, #3
 800477a:	3508      	adds	r5, #8
 800477c:	2d0c      	cmp	r5, #12
 800477e:	bf38      	it	cc
 8004780:	250c      	movcc	r5, #12
 8004782:	2d00      	cmp	r5, #0
 8004784:	4606      	mov	r6, r0
 8004786:	db01      	blt.n	800478c <_malloc_r+0x1c>
 8004788:	42a9      	cmp	r1, r5
 800478a:	d904      	bls.n	8004796 <_malloc_r+0x26>
 800478c:	230c      	movs	r3, #12
 800478e:	6033      	str	r3, [r6, #0]
 8004790:	2000      	movs	r0, #0
 8004792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800486c <_malloc_r+0xfc>
 800479a:	f000 f869 	bl	8004870 <__malloc_lock>
 800479e:	f8d8 3000 	ldr.w	r3, [r8]
 80047a2:	461c      	mov	r4, r3
 80047a4:	bb44      	cbnz	r4, 80047f8 <_malloc_r+0x88>
 80047a6:	4629      	mov	r1, r5
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff ffbf 	bl	800472c <sbrk_aligned>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	4604      	mov	r4, r0
 80047b2:	d158      	bne.n	8004866 <_malloc_r+0xf6>
 80047b4:	f8d8 4000 	ldr.w	r4, [r8]
 80047b8:	4627      	mov	r7, r4
 80047ba:	2f00      	cmp	r7, #0
 80047bc:	d143      	bne.n	8004846 <_malloc_r+0xd6>
 80047be:	2c00      	cmp	r4, #0
 80047c0:	d04b      	beq.n	800485a <_malloc_r+0xea>
 80047c2:	6823      	ldr	r3, [r4, #0]
 80047c4:	4639      	mov	r1, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	eb04 0903 	add.w	r9, r4, r3
 80047cc:	f000 f91a 	bl	8004a04 <_sbrk_r>
 80047d0:	4581      	cmp	r9, r0
 80047d2:	d142      	bne.n	800485a <_malloc_r+0xea>
 80047d4:	6821      	ldr	r1, [r4, #0]
 80047d6:	1a6d      	subs	r5, r5, r1
 80047d8:	4629      	mov	r1, r5
 80047da:	4630      	mov	r0, r6
 80047dc:	f7ff ffa6 	bl	800472c <sbrk_aligned>
 80047e0:	3001      	adds	r0, #1
 80047e2:	d03a      	beq.n	800485a <_malloc_r+0xea>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	442b      	add	r3, r5
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	f8d8 3000 	ldr.w	r3, [r8]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	bb62      	cbnz	r2, 800484c <_malloc_r+0xdc>
 80047f2:	f8c8 7000 	str.w	r7, [r8]
 80047f6:	e00f      	b.n	8004818 <_malloc_r+0xa8>
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	1b52      	subs	r2, r2, r5
 80047fc:	d420      	bmi.n	8004840 <_malloc_r+0xd0>
 80047fe:	2a0b      	cmp	r2, #11
 8004800:	d917      	bls.n	8004832 <_malloc_r+0xc2>
 8004802:	1961      	adds	r1, r4, r5
 8004804:	42a3      	cmp	r3, r4
 8004806:	6025      	str	r5, [r4, #0]
 8004808:	bf18      	it	ne
 800480a:	6059      	strne	r1, [r3, #4]
 800480c:	6863      	ldr	r3, [r4, #4]
 800480e:	bf08      	it	eq
 8004810:	f8c8 1000 	streq.w	r1, [r8]
 8004814:	5162      	str	r2, [r4, r5]
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f82f 	bl	800487c <__malloc_unlock>
 800481e:	f104 000b 	add.w	r0, r4, #11
 8004822:	1d23      	adds	r3, r4, #4
 8004824:	f020 0007 	bic.w	r0, r0, #7
 8004828:	1ac2      	subs	r2, r0, r3
 800482a:	bf1c      	itt	ne
 800482c:	1a1b      	subne	r3, r3, r0
 800482e:	50a3      	strne	r3, [r4, r2]
 8004830:	e7af      	b.n	8004792 <_malloc_r+0x22>
 8004832:	6862      	ldr	r2, [r4, #4]
 8004834:	42a3      	cmp	r3, r4
 8004836:	bf0c      	ite	eq
 8004838:	f8c8 2000 	streq.w	r2, [r8]
 800483c:	605a      	strne	r2, [r3, #4]
 800483e:	e7eb      	b.n	8004818 <_malloc_r+0xa8>
 8004840:	4623      	mov	r3, r4
 8004842:	6864      	ldr	r4, [r4, #4]
 8004844:	e7ae      	b.n	80047a4 <_malloc_r+0x34>
 8004846:	463c      	mov	r4, r7
 8004848:	687f      	ldr	r7, [r7, #4]
 800484a:	e7b6      	b.n	80047ba <_malloc_r+0x4a>
 800484c:	461a      	mov	r2, r3
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	42a3      	cmp	r3, r4
 8004852:	d1fb      	bne.n	800484c <_malloc_r+0xdc>
 8004854:	2300      	movs	r3, #0
 8004856:	6053      	str	r3, [r2, #4]
 8004858:	e7de      	b.n	8004818 <_malloc_r+0xa8>
 800485a:	230c      	movs	r3, #12
 800485c:	6033      	str	r3, [r6, #0]
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f80c 	bl	800487c <__malloc_unlock>
 8004864:	e794      	b.n	8004790 <_malloc_r+0x20>
 8004866:	6005      	str	r5, [r0, #0]
 8004868:	e7d6      	b.n	8004818 <_malloc_r+0xa8>
 800486a:	bf00      	nop
 800486c:	200002b4 	.word	0x200002b4

08004870 <__malloc_lock>:
 8004870:	4801      	ldr	r0, [pc, #4]	@ (8004878 <__malloc_lock+0x8>)
 8004872:	f7ff bee8 	b.w	8004646 <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	200002ac 	.word	0x200002ac

0800487c <__malloc_unlock>:
 800487c:	4801      	ldr	r0, [pc, #4]	@ (8004884 <__malloc_unlock+0x8>)
 800487e:	f7ff bee3 	b.w	8004648 <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	200002ac 	.word	0x200002ac

08004888 <__sflush_r>:
 8004888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	0716      	lsls	r6, r2, #28
 8004892:	4605      	mov	r5, r0
 8004894:	460c      	mov	r4, r1
 8004896:	d454      	bmi.n	8004942 <__sflush_r+0xba>
 8004898:	684b      	ldr	r3, [r1, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	dc02      	bgt.n	80048a4 <__sflush_r+0x1c>
 800489e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	dd48      	ble.n	8004936 <__sflush_r+0xae>
 80048a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d045      	beq.n	8004936 <__sflush_r+0xae>
 80048aa:	2300      	movs	r3, #0
 80048ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048b0:	682f      	ldr	r7, [r5, #0]
 80048b2:	6a21      	ldr	r1, [r4, #32]
 80048b4:	602b      	str	r3, [r5, #0]
 80048b6:	d030      	beq.n	800491a <__sflush_r+0x92>
 80048b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	0759      	lsls	r1, r3, #29
 80048be:	d505      	bpl.n	80048cc <__sflush_r+0x44>
 80048c0:	6863      	ldr	r3, [r4, #4]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048c6:	b10b      	cbz	r3, 80048cc <__sflush_r+0x44>
 80048c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048d0:	6a21      	ldr	r1, [r4, #32]
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b0      	blx	r6
 80048d6:	1c43      	adds	r3, r0, #1
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	d106      	bne.n	80048ea <__sflush_r+0x62>
 80048dc:	6829      	ldr	r1, [r5, #0]
 80048de:	291d      	cmp	r1, #29
 80048e0:	d82b      	bhi.n	800493a <__sflush_r+0xb2>
 80048e2:	4a2a      	ldr	r2, [pc, #168]	@ (800498c <__sflush_r+0x104>)
 80048e4:	40ca      	lsrs	r2, r1
 80048e6:	07d6      	lsls	r6, r2, #31
 80048e8:	d527      	bpl.n	800493a <__sflush_r+0xb2>
 80048ea:	2200      	movs	r2, #0
 80048ec:	6062      	str	r2, [r4, #4]
 80048ee:	04d9      	lsls	r1, r3, #19
 80048f0:	6922      	ldr	r2, [r4, #16]
 80048f2:	6022      	str	r2, [r4, #0]
 80048f4:	d504      	bpl.n	8004900 <__sflush_r+0x78>
 80048f6:	1c42      	adds	r2, r0, #1
 80048f8:	d101      	bne.n	80048fe <__sflush_r+0x76>
 80048fa:	682b      	ldr	r3, [r5, #0]
 80048fc:	b903      	cbnz	r3, 8004900 <__sflush_r+0x78>
 80048fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8004900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004902:	602f      	str	r7, [r5, #0]
 8004904:	b1b9      	cbz	r1, 8004936 <__sflush_r+0xae>
 8004906:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800490a:	4299      	cmp	r1, r3
 800490c:	d002      	beq.n	8004914 <__sflush_r+0x8c>
 800490e:	4628      	mov	r0, r5
 8004910:	f7ff feba 	bl	8004688 <_free_r>
 8004914:	2300      	movs	r3, #0
 8004916:	6363      	str	r3, [r4, #52]	@ 0x34
 8004918:	e00d      	b.n	8004936 <__sflush_r+0xae>
 800491a:	2301      	movs	r3, #1
 800491c:	4628      	mov	r0, r5
 800491e:	47b0      	blx	r6
 8004920:	4602      	mov	r2, r0
 8004922:	1c50      	adds	r0, r2, #1
 8004924:	d1c9      	bne.n	80048ba <__sflush_r+0x32>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0c6      	beq.n	80048ba <__sflush_r+0x32>
 800492c:	2b1d      	cmp	r3, #29
 800492e:	d001      	beq.n	8004934 <__sflush_r+0xac>
 8004930:	2b16      	cmp	r3, #22
 8004932:	d11e      	bne.n	8004972 <__sflush_r+0xea>
 8004934:	602f      	str	r7, [r5, #0]
 8004936:	2000      	movs	r0, #0
 8004938:	e022      	b.n	8004980 <__sflush_r+0xf8>
 800493a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800493e:	b21b      	sxth	r3, r3
 8004940:	e01b      	b.n	800497a <__sflush_r+0xf2>
 8004942:	690f      	ldr	r7, [r1, #16]
 8004944:	2f00      	cmp	r7, #0
 8004946:	d0f6      	beq.n	8004936 <__sflush_r+0xae>
 8004948:	0793      	lsls	r3, r2, #30
 800494a:	680e      	ldr	r6, [r1, #0]
 800494c:	bf08      	it	eq
 800494e:	694b      	ldreq	r3, [r1, #20]
 8004950:	600f      	str	r7, [r1, #0]
 8004952:	bf18      	it	ne
 8004954:	2300      	movne	r3, #0
 8004956:	eba6 0807 	sub.w	r8, r6, r7
 800495a:	608b      	str	r3, [r1, #8]
 800495c:	f1b8 0f00 	cmp.w	r8, #0
 8004960:	dde9      	ble.n	8004936 <__sflush_r+0xae>
 8004962:	6a21      	ldr	r1, [r4, #32]
 8004964:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004966:	4643      	mov	r3, r8
 8004968:	463a      	mov	r2, r7
 800496a:	4628      	mov	r0, r5
 800496c:	47b0      	blx	r6
 800496e:	2800      	cmp	r0, #0
 8004970:	dc08      	bgt.n	8004984 <__sflush_r+0xfc>
 8004972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004984:	4407      	add	r7, r0
 8004986:	eba8 0800 	sub.w	r8, r8, r0
 800498a:	e7e7      	b.n	800495c <__sflush_r+0xd4>
 800498c:	20400001 	.word	0x20400001

08004990 <_fflush_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	690b      	ldr	r3, [r1, #16]
 8004994:	4605      	mov	r5, r0
 8004996:	460c      	mov	r4, r1
 8004998:	b913      	cbnz	r3, 80049a0 <_fflush_r+0x10>
 800499a:	2500      	movs	r5, #0
 800499c:	4628      	mov	r0, r5
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	b118      	cbz	r0, 80049aa <_fflush_r+0x1a>
 80049a2:	6a03      	ldr	r3, [r0, #32]
 80049a4:	b90b      	cbnz	r3, 80049aa <_fflush_r+0x1a>
 80049a6:	f7ff fcff 	bl	80043a8 <__sinit>
 80049aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f3      	beq.n	800499a <_fflush_r+0xa>
 80049b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049b4:	07d0      	lsls	r0, r2, #31
 80049b6:	d404      	bmi.n	80049c2 <_fflush_r+0x32>
 80049b8:	0599      	lsls	r1, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_fflush_r+0x32>
 80049bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049be:	f7ff fe42 	bl	8004646 <__retarget_lock_acquire_recursive>
 80049c2:	4628      	mov	r0, r5
 80049c4:	4621      	mov	r1, r4
 80049c6:	f7ff ff5f 	bl	8004888 <__sflush_r>
 80049ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049cc:	07da      	lsls	r2, r3, #31
 80049ce:	4605      	mov	r5, r0
 80049d0:	d4e4      	bmi.n	800499c <_fflush_r+0xc>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	059b      	lsls	r3, r3, #22
 80049d6:	d4e1      	bmi.n	800499c <_fflush_r+0xc>
 80049d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049da:	f7ff fe35 	bl	8004648 <__retarget_lock_release_recursive>
 80049de:	e7dd      	b.n	800499c <_fflush_r+0xc>

080049e0 <fiprintf>:
 80049e0:	b40e      	push	{r1, r2, r3}
 80049e2:	b503      	push	{r0, r1, lr}
 80049e4:	4601      	mov	r1, r0
 80049e6:	ab03      	add	r3, sp, #12
 80049e8:	4805      	ldr	r0, [pc, #20]	@ (8004a00 <fiprintf+0x20>)
 80049ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ee:	6800      	ldr	r0, [r0, #0]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	f000 f847 	bl	8004a84 <_vfiprintf_r>
 80049f6:	b002      	add	sp, #8
 80049f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049fc:	b003      	add	sp, #12
 80049fe:	4770      	bx	lr
 8004a00:	20000024 	.word	0x20000024

08004a04 <_sbrk_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	@ (8004a20 <_sbrk_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fc fac2 	bl	8000f98 <_sbrk>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_sbrk_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_sbrk_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	200002a8 	.word	0x200002a8

08004a24 <abort>:
 8004a24:	b508      	push	{r3, lr}
 8004a26:	2006      	movs	r0, #6
 8004a28:	f000 fb8c 	bl	8005144 <raise>
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f7fc fa3b 	bl	8000ea8 <_exit>

08004a32 <__sfputc_r>:
 8004a32:	6893      	ldr	r3, [r2, #8]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	b410      	push	{r4}
 8004a3a:	6093      	str	r3, [r2, #8]
 8004a3c:	da08      	bge.n	8004a50 <__sfputc_r+0x1e>
 8004a3e:	6994      	ldr	r4, [r2, #24]
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	db01      	blt.n	8004a48 <__sfputc_r+0x16>
 8004a44:	290a      	cmp	r1, #10
 8004a46:	d103      	bne.n	8004a50 <__sfputc_r+0x1e>
 8004a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a4c:	f000 babe 	b.w	8004fcc <__swbuf_r>
 8004a50:	6813      	ldr	r3, [r2, #0]
 8004a52:	1c58      	adds	r0, r3, #1
 8004a54:	6010      	str	r0, [r2, #0]
 8004a56:	7019      	strb	r1, [r3, #0]
 8004a58:	4608      	mov	r0, r1
 8004a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <__sfputs_r>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	4606      	mov	r6, r0
 8004a64:	460f      	mov	r7, r1
 8004a66:	4614      	mov	r4, r2
 8004a68:	18d5      	adds	r5, r2, r3
 8004a6a:	42ac      	cmp	r4, r5
 8004a6c:	d101      	bne.n	8004a72 <__sfputs_r+0x12>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e007      	b.n	8004a82 <__sfputs_r+0x22>
 8004a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a76:	463a      	mov	r2, r7
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7ff ffda 	bl	8004a32 <__sfputc_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d1f3      	bne.n	8004a6a <__sfputs_r+0xa>
 8004a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a84 <_vfiprintf_r>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	460d      	mov	r5, r1
 8004a8a:	b09d      	sub	sp, #116	@ 0x74
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	4698      	mov	r8, r3
 8004a90:	4606      	mov	r6, r0
 8004a92:	b118      	cbz	r0, 8004a9c <_vfiprintf_r+0x18>
 8004a94:	6a03      	ldr	r3, [r0, #32]
 8004a96:	b90b      	cbnz	r3, 8004a9c <_vfiprintf_r+0x18>
 8004a98:	f7ff fc86 	bl	80043a8 <__sinit>
 8004a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a9e:	07d9      	lsls	r1, r3, #31
 8004aa0:	d405      	bmi.n	8004aae <_vfiprintf_r+0x2a>
 8004aa2:	89ab      	ldrh	r3, [r5, #12]
 8004aa4:	059a      	lsls	r2, r3, #22
 8004aa6:	d402      	bmi.n	8004aae <_vfiprintf_r+0x2a>
 8004aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aaa:	f7ff fdcc 	bl	8004646 <__retarget_lock_acquire_recursive>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	071b      	lsls	r3, r3, #28
 8004ab2:	d501      	bpl.n	8004ab8 <_vfiprintf_r+0x34>
 8004ab4:	692b      	ldr	r3, [r5, #16]
 8004ab6:	b99b      	cbnz	r3, 8004ae0 <_vfiprintf_r+0x5c>
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4630      	mov	r0, r6
 8004abc:	f000 fac4 	bl	8005048 <__swsetup_r>
 8004ac0:	b170      	cbz	r0, 8004ae0 <_vfiprintf_r+0x5c>
 8004ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ac4:	07dc      	lsls	r4, r3, #31
 8004ac6:	d504      	bpl.n	8004ad2 <_vfiprintf_r+0x4e>
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004acc:	b01d      	add	sp, #116	@ 0x74
 8004ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	0598      	lsls	r0, r3, #22
 8004ad6:	d4f7      	bmi.n	8004ac8 <_vfiprintf_r+0x44>
 8004ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ada:	f7ff fdb5 	bl	8004648 <__retarget_lock_release_recursive>
 8004ade:	e7f3      	b.n	8004ac8 <_vfiprintf_r+0x44>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aee:	2330      	movs	r3, #48	@ 0x30
 8004af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ca0 <_vfiprintf_r+0x21c>
 8004af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004af8:	f04f 0901 	mov.w	r9, #1
 8004afc:	4623      	mov	r3, r4
 8004afe:	469a      	mov	sl, r3
 8004b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b04:	b10a      	cbz	r2, 8004b0a <_vfiprintf_r+0x86>
 8004b06:	2a25      	cmp	r2, #37	@ 0x25
 8004b08:	d1f9      	bne.n	8004afe <_vfiprintf_r+0x7a>
 8004b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b0e:	d00b      	beq.n	8004b28 <_vfiprintf_r+0xa4>
 8004b10:	465b      	mov	r3, fp
 8004b12:	4622      	mov	r2, r4
 8004b14:	4629      	mov	r1, r5
 8004b16:	4630      	mov	r0, r6
 8004b18:	f7ff ffa2 	bl	8004a60 <__sfputs_r>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	f000 80a7 	beq.w	8004c70 <_vfiprintf_r+0x1ec>
 8004b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b24:	445a      	add	r2, fp
 8004b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b28:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 809f 	beq.w	8004c70 <_vfiprintf_r+0x1ec>
 8004b32:	2300      	movs	r3, #0
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b3c:	f10a 0a01 	add.w	sl, sl, #1
 8004b40:	9304      	str	r3, [sp, #16]
 8004b42:	9307      	str	r3, [sp, #28]
 8004b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b4a:	4654      	mov	r4, sl
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b52:	4853      	ldr	r0, [pc, #332]	@ (8004ca0 <_vfiprintf_r+0x21c>)
 8004b54:	f7fb fb3c 	bl	80001d0 <memchr>
 8004b58:	9a04      	ldr	r2, [sp, #16]
 8004b5a:	b9d8      	cbnz	r0, 8004b94 <_vfiprintf_r+0x110>
 8004b5c:	06d1      	lsls	r1, r2, #27
 8004b5e:	bf44      	itt	mi
 8004b60:	2320      	movmi	r3, #32
 8004b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b66:	0713      	lsls	r3, r2, #28
 8004b68:	bf44      	itt	mi
 8004b6a:	232b      	movmi	r3, #43	@ 0x2b
 8004b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b70:	f89a 3000 	ldrb.w	r3, [sl]
 8004b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b76:	d015      	beq.n	8004ba4 <_vfiprintf_r+0x120>
 8004b78:	9a07      	ldr	r2, [sp, #28]
 8004b7a:	4654      	mov	r4, sl
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	f04f 0c0a 	mov.w	ip, #10
 8004b82:	4621      	mov	r1, r4
 8004b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b88:	3b30      	subs	r3, #48	@ 0x30
 8004b8a:	2b09      	cmp	r3, #9
 8004b8c:	d94b      	bls.n	8004c26 <_vfiprintf_r+0x1a2>
 8004b8e:	b1b0      	cbz	r0, 8004bbe <_vfiprintf_r+0x13a>
 8004b90:	9207      	str	r2, [sp, #28]
 8004b92:	e014      	b.n	8004bbe <_vfiprintf_r+0x13a>
 8004b94:	eba0 0308 	sub.w	r3, r0, r8
 8004b98:	fa09 f303 	lsl.w	r3, r9, r3
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	9304      	str	r3, [sp, #16]
 8004ba0:	46a2      	mov	sl, r4
 8004ba2:	e7d2      	b.n	8004b4a <_vfiprintf_r+0xc6>
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	1d19      	adds	r1, r3, #4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	9103      	str	r1, [sp, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bfbb      	ittet	lt
 8004bb0:	425b      	neglt	r3, r3
 8004bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8004bb6:	9307      	strge	r3, [sp, #28]
 8004bb8:	9307      	strlt	r3, [sp, #28]
 8004bba:	bfb8      	it	lt
 8004bbc:	9204      	strlt	r2, [sp, #16]
 8004bbe:	7823      	ldrb	r3, [r4, #0]
 8004bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bc2:	d10a      	bne.n	8004bda <_vfiprintf_r+0x156>
 8004bc4:	7863      	ldrb	r3, [r4, #1]
 8004bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bc8:	d132      	bne.n	8004c30 <_vfiprintf_r+0x1ac>
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	1d1a      	adds	r2, r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	9203      	str	r2, [sp, #12]
 8004bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bd6:	3402      	adds	r4, #2
 8004bd8:	9305      	str	r3, [sp, #20]
 8004bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004cb0 <_vfiprintf_r+0x22c>
 8004bde:	7821      	ldrb	r1, [r4, #0]
 8004be0:	2203      	movs	r2, #3
 8004be2:	4650      	mov	r0, sl
 8004be4:	f7fb faf4 	bl	80001d0 <memchr>
 8004be8:	b138      	cbz	r0, 8004bfa <_vfiprintf_r+0x176>
 8004bea:	9b04      	ldr	r3, [sp, #16]
 8004bec:	eba0 000a 	sub.w	r0, r0, sl
 8004bf0:	2240      	movs	r2, #64	@ 0x40
 8004bf2:	4082      	lsls	r2, r0
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	3401      	adds	r4, #1
 8004bf8:	9304      	str	r3, [sp, #16]
 8004bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfe:	4829      	ldr	r0, [pc, #164]	@ (8004ca4 <_vfiprintf_r+0x220>)
 8004c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c04:	2206      	movs	r2, #6
 8004c06:	f7fb fae3 	bl	80001d0 <memchr>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d03f      	beq.n	8004c8e <_vfiprintf_r+0x20a>
 8004c0e:	4b26      	ldr	r3, [pc, #152]	@ (8004ca8 <_vfiprintf_r+0x224>)
 8004c10:	bb1b      	cbnz	r3, 8004c5a <_vfiprintf_r+0x1d6>
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	3307      	adds	r3, #7
 8004c16:	f023 0307 	bic.w	r3, r3, #7
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c20:	443b      	add	r3, r7
 8004c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c24:	e76a      	b.n	8004afc <_vfiprintf_r+0x78>
 8004c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	2001      	movs	r0, #1
 8004c2e:	e7a8      	b.n	8004b82 <_vfiprintf_r+0xfe>
 8004c30:	2300      	movs	r3, #0
 8004c32:	3401      	adds	r4, #1
 8004c34:	9305      	str	r3, [sp, #20]
 8004c36:	4619      	mov	r1, r3
 8004c38:	f04f 0c0a 	mov.w	ip, #10
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c42:	3a30      	subs	r2, #48	@ 0x30
 8004c44:	2a09      	cmp	r2, #9
 8004c46:	d903      	bls.n	8004c50 <_vfiprintf_r+0x1cc>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0c6      	beq.n	8004bda <_vfiprintf_r+0x156>
 8004c4c:	9105      	str	r1, [sp, #20]
 8004c4e:	e7c4      	b.n	8004bda <_vfiprintf_r+0x156>
 8004c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c54:	4604      	mov	r4, r0
 8004c56:	2301      	movs	r3, #1
 8004c58:	e7f0      	b.n	8004c3c <_vfiprintf_r+0x1b8>
 8004c5a:	ab03      	add	r3, sp, #12
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	462a      	mov	r2, r5
 8004c60:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <_vfiprintf_r+0x228>)
 8004c62:	a904      	add	r1, sp, #16
 8004c64:	4630      	mov	r0, r6
 8004c66:	f3af 8000 	nop.w
 8004c6a:	4607      	mov	r7, r0
 8004c6c:	1c78      	adds	r0, r7, #1
 8004c6e:	d1d6      	bne.n	8004c1e <_vfiprintf_r+0x19a>
 8004c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c72:	07d9      	lsls	r1, r3, #31
 8004c74:	d405      	bmi.n	8004c82 <_vfiprintf_r+0x1fe>
 8004c76:	89ab      	ldrh	r3, [r5, #12]
 8004c78:	059a      	lsls	r2, r3, #22
 8004c7a:	d402      	bmi.n	8004c82 <_vfiprintf_r+0x1fe>
 8004c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c7e:	f7ff fce3 	bl	8004648 <__retarget_lock_release_recursive>
 8004c82:	89ab      	ldrh	r3, [r5, #12]
 8004c84:	065b      	lsls	r3, r3, #25
 8004c86:	f53f af1f 	bmi.w	8004ac8 <_vfiprintf_r+0x44>
 8004c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c8c:	e71e      	b.n	8004acc <_vfiprintf_r+0x48>
 8004c8e:	ab03      	add	r3, sp, #12
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	462a      	mov	r2, r5
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <_vfiprintf_r+0x228>)
 8004c96:	a904      	add	r1, sp, #16
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f879 	bl	8004d90 <_printf_i>
 8004c9e:	e7e4      	b.n	8004c6a <_vfiprintf_r+0x1e6>
 8004ca0:	08005466 	.word	0x08005466
 8004ca4:	08005470 	.word	0x08005470
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	08004a61 	.word	0x08004a61
 8004cb0:	0800546c 	.word	0x0800546c

08004cb4 <_printf_common>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	4616      	mov	r6, r2
 8004cba:	4698      	mov	r8, r3
 8004cbc:	688a      	ldr	r2, [r1, #8]
 8004cbe:	690b      	ldr	r3, [r1, #16]
 8004cc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bfb8      	it	lt
 8004cc8:	4613      	movlt	r3, r2
 8004cca:	6033      	str	r3, [r6, #0]
 8004ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004cd0:	4607      	mov	r7, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	b10a      	cbz	r2, 8004cda <_printf_common+0x26>
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	0699      	lsls	r1, r3, #26
 8004cde:	bf42      	ittt	mi
 8004ce0:	6833      	ldrmi	r3, [r6, #0]
 8004ce2:	3302      	addmi	r3, #2
 8004ce4:	6033      	strmi	r3, [r6, #0]
 8004ce6:	6825      	ldr	r5, [r4, #0]
 8004ce8:	f015 0506 	ands.w	r5, r5, #6
 8004cec:	d106      	bne.n	8004cfc <_printf_common+0x48>
 8004cee:	f104 0a19 	add.w	sl, r4, #25
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	6832      	ldr	r2, [r6, #0]
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	dc26      	bgt.n	8004d4a <_printf_common+0x96>
 8004cfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	3b00      	subs	r3, #0
 8004d04:	bf18      	it	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	0692      	lsls	r2, r2, #26
 8004d0a:	d42b      	bmi.n	8004d64 <_printf_common+0xb0>
 8004d0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d10:	4641      	mov	r1, r8
 8004d12:	4638      	mov	r0, r7
 8004d14:	47c8      	blx	r9
 8004d16:	3001      	adds	r0, #1
 8004d18:	d01e      	beq.n	8004d58 <_printf_common+0xa4>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	6922      	ldr	r2, [r4, #16]
 8004d1e:	f003 0306 	and.w	r3, r3, #6
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	bf02      	ittt	eq
 8004d26:	68e5      	ldreq	r5, [r4, #12]
 8004d28:	6833      	ldreq	r3, [r6, #0]
 8004d2a:	1aed      	subeq	r5, r5, r3
 8004d2c:	68a3      	ldr	r3, [r4, #8]
 8004d2e:	bf0c      	ite	eq
 8004d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d34:	2500      	movne	r5, #0
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bfc4      	itt	gt
 8004d3a:	1a9b      	subgt	r3, r3, r2
 8004d3c:	18ed      	addgt	r5, r5, r3
 8004d3e:	2600      	movs	r6, #0
 8004d40:	341a      	adds	r4, #26
 8004d42:	42b5      	cmp	r5, r6
 8004d44:	d11a      	bne.n	8004d7c <_printf_common+0xc8>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e008      	b.n	8004d5c <_printf_common+0xa8>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	4641      	mov	r1, r8
 8004d50:	4638      	mov	r0, r7
 8004d52:	47c8      	blx	r9
 8004d54:	3001      	adds	r0, #1
 8004d56:	d103      	bne.n	8004d60 <_printf_common+0xac>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d60:	3501      	adds	r5, #1
 8004d62:	e7c6      	b.n	8004cf2 <_printf_common+0x3e>
 8004d64:	18e1      	adds	r1, r4, r3
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	2030      	movs	r0, #48	@ 0x30
 8004d6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d6e:	4422      	add	r2, r4
 8004d70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d78:	3302      	adds	r3, #2
 8004d7a:	e7c7      	b.n	8004d0c <_printf_common+0x58>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4641      	mov	r1, r8
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c8      	blx	r9
 8004d86:	3001      	adds	r0, #1
 8004d88:	d0e6      	beq.n	8004d58 <_printf_common+0xa4>
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7d9      	b.n	8004d42 <_printf_common+0x8e>
	...

08004d90 <_printf_i>:
 8004d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	7e0f      	ldrb	r7, [r1, #24]
 8004d96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d98:	2f78      	cmp	r7, #120	@ 0x78
 8004d9a:	4691      	mov	r9, r2
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	469a      	mov	sl, r3
 8004da2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004da6:	d807      	bhi.n	8004db8 <_printf_i+0x28>
 8004da8:	2f62      	cmp	r7, #98	@ 0x62
 8004daa:	d80a      	bhi.n	8004dc2 <_printf_i+0x32>
 8004dac:	2f00      	cmp	r7, #0
 8004dae:	f000 80d1 	beq.w	8004f54 <_printf_i+0x1c4>
 8004db2:	2f58      	cmp	r7, #88	@ 0x58
 8004db4:	f000 80b8 	beq.w	8004f28 <_printf_i+0x198>
 8004db8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004dc0:	e03a      	b.n	8004e38 <_printf_i+0xa8>
 8004dc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dc6:	2b15      	cmp	r3, #21
 8004dc8:	d8f6      	bhi.n	8004db8 <_printf_i+0x28>
 8004dca:	a101      	add	r1, pc, #4	@ (adr r1, 8004dd0 <_printf_i+0x40>)
 8004dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd0:	08004e29 	.word	0x08004e29
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004db9 	.word	0x08004db9
 8004ddc:	08004db9 	.word	0x08004db9
 8004de0:	08004db9 	.word	0x08004db9
 8004de4:	08004db9 	.word	0x08004db9
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004db9 	.word	0x08004db9
 8004df0:	08004db9 	.word	0x08004db9
 8004df4:	08004db9 	.word	0x08004db9
 8004df8:	08004db9 	.word	0x08004db9
 8004dfc:	08004f3b 	.word	0x08004f3b
 8004e00:	08004e67 	.word	0x08004e67
 8004e04:	08004ef5 	.word	0x08004ef5
 8004e08:	08004db9 	.word	0x08004db9
 8004e0c:	08004db9 	.word	0x08004db9
 8004e10:	08004f5d 	.word	0x08004f5d
 8004e14:	08004db9 	.word	0x08004db9
 8004e18:	08004e67 	.word	0x08004e67
 8004e1c:	08004db9 	.word	0x08004db9
 8004e20:	08004db9 	.word	0x08004db9
 8004e24:	08004efd 	.word	0x08004efd
 8004e28:	6833      	ldr	r3, [r6, #0]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6032      	str	r2, [r6, #0]
 8004e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e09c      	b.n	8004f76 <_printf_i+0x1e6>
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1d19      	adds	r1, r3, #4
 8004e42:	6031      	str	r1, [r6, #0]
 8004e44:	0606      	lsls	r6, r0, #24
 8004e46:	d501      	bpl.n	8004e4c <_printf_i+0xbc>
 8004e48:	681d      	ldr	r5, [r3, #0]
 8004e4a:	e003      	b.n	8004e54 <_printf_i+0xc4>
 8004e4c:	0645      	lsls	r5, r0, #25
 8004e4e:	d5fb      	bpl.n	8004e48 <_printf_i+0xb8>
 8004e50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e54:	2d00      	cmp	r5, #0
 8004e56:	da03      	bge.n	8004e60 <_printf_i+0xd0>
 8004e58:	232d      	movs	r3, #45	@ 0x2d
 8004e5a:	426d      	negs	r5, r5
 8004e5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e60:	4858      	ldr	r0, [pc, #352]	@ (8004fc4 <_printf_i+0x234>)
 8004e62:	230a      	movs	r3, #10
 8004e64:	e011      	b.n	8004e8a <_printf_i+0xfa>
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	6833      	ldr	r3, [r6, #0]
 8004e6a:	0608      	lsls	r0, r1, #24
 8004e6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e70:	d402      	bmi.n	8004e78 <_printf_i+0xe8>
 8004e72:	0649      	lsls	r1, r1, #25
 8004e74:	bf48      	it	mi
 8004e76:	b2ad      	uxthmi	r5, r5
 8004e78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e7a:	4852      	ldr	r0, [pc, #328]	@ (8004fc4 <_printf_i+0x234>)
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	bf14      	ite	ne
 8004e80:	230a      	movne	r3, #10
 8004e82:	2308      	moveq	r3, #8
 8004e84:	2100      	movs	r1, #0
 8004e86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e8a:	6866      	ldr	r6, [r4, #4]
 8004e8c:	60a6      	str	r6, [r4, #8]
 8004e8e:	2e00      	cmp	r6, #0
 8004e90:	db05      	blt.n	8004e9e <_printf_i+0x10e>
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	432e      	orrs	r6, r5
 8004e96:	f021 0104 	bic.w	r1, r1, #4
 8004e9a:	6021      	str	r1, [r4, #0]
 8004e9c:	d04b      	beq.n	8004f36 <_printf_i+0x1a6>
 8004e9e:	4616      	mov	r6, r2
 8004ea0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ea4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ea8:	5dc7      	ldrb	r7, [r0, r7]
 8004eaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004eae:	462f      	mov	r7, r5
 8004eb0:	42bb      	cmp	r3, r7
 8004eb2:	460d      	mov	r5, r1
 8004eb4:	d9f4      	bls.n	8004ea0 <_printf_i+0x110>
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d10b      	bne.n	8004ed2 <_printf_i+0x142>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	07df      	lsls	r7, r3, #31
 8004ebe:	d508      	bpl.n	8004ed2 <_printf_i+0x142>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	6861      	ldr	r1, [r4, #4]
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	bfde      	ittt	le
 8004ec8:	2330      	movle	r3, #48	@ 0x30
 8004eca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ece:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ed2:	1b92      	subs	r2, r2, r6
 8004ed4:	6122      	str	r2, [r4, #16]
 8004ed6:	f8cd a000 	str.w	sl, [sp]
 8004eda:	464b      	mov	r3, r9
 8004edc:	aa03      	add	r2, sp, #12
 8004ede:	4621      	mov	r1, r4
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	f7ff fee7 	bl	8004cb4 <_printf_common>
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d14a      	bne.n	8004f80 <_printf_i+0x1f0>
 8004eea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004eee:	b004      	add	sp, #16
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	f043 0320 	orr.w	r3, r3, #32
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	4832      	ldr	r0, [pc, #200]	@ (8004fc8 <_printf_i+0x238>)
 8004efe:	2778      	movs	r7, #120	@ 0x78
 8004f00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	061f      	lsls	r7, r3, #24
 8004f0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f0e:	d402      	bmi.n	8004f16 <_printf_i+0x186>
 8004f10:	065f      	lsls	r7, r3, #25
 8004f12:	bf48      	it	mi
 8004f14:	b2ad      	uxthmi	r5, r5
 8004f16:	6031      	str	r1, [r6, #0]
 8004f18:	07d9      	lsls	r1, r3, #31
 8004f1a:	bf44      	itt	mi
 8004f1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004f20:	6023      	strmi	r3, [r4, #0]
 8004f22:	b11d      	cbz	r5, 8004f2c <_printf_i+0x19c>
 8004f24:	2310      	movs	r3, #16
 8004f26:	e7ad      	b.n	8004e84 <_printf_i+0xf4>
 8004f28:	4826      	ldr	r0, [pc, #152]	@ (8004fc4 <_printf_i+0x234>)
 8004f2a:	e7e9      	b.n	8004f00 <_printf_i+0x170>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	f023 0320 	bic.w	r3, r3, #32
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	e7f6      	b.n	8004f24 <_printf_i+0x194>
 8004f36:	4616      	mov	r6, r2
 8004f38:	e7bd      	b.n	8004eb6 <_printf_i+0x126>
 8004f3a:	6833      	ldr	r3, [r6, #0]
 8004f3c:	6825      	ldr	r5, [r4, #0]
 8004f3e:	6961      	ldr	r1, [r4, #20]
 8004f40:	1d18      	adds	r0, r3, #4
 8004f42:	6030      	str	r0, [r6, #0]
 8004f44:	062e      	lsls	r6, r5, #24
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	d501      	bpl.n	8004f4e <_printf_i+0x1be>
 8004f4a:	6019      	str	r1, [r3, #0]
 8004f4c:	e002      	b.n	8004f54 <_printf_i+0x1c4>
 8004f4e:	0668      	lsls	r0, r5, #25
 8004f50:	d5fb      	bpl.n	8004f4a <_printf_i+0x1ba>
 8004f52:	8019      	strh	r1, [r3, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	4616      	mov	r6, r2
 8004f5a:	e7bc      	b.n	8004ed6 <_printf_i+0x146>
 8004f5c:	6833      	ldr	r3, [r6, #0]
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	6032      	str	r2, [r6, #0]
 8004f62:	681e      	ldr	r6, [r3, #0]
 8004f64:	6862      	ldr	r2, [r4, #4]
 8004f66:	2100      	movs	r1, #0
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f7fb f931 	bl	80001d0 <memchr>
 8004f6e:	b108      	cbz	r0, 8004f74 <_printf_i+0x1e4>
 8004f70:	1b80      	subs	r0, r0, r6
 8004f72:	6060      	str	r0, [r4, #4]
 8004f74:	6863      	ldr	r3, [r4, #4]
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f7e:	e7aa      	b.n	8004ed6 <_printf_i+0x146>
 8004f80:	6923      	ldr	r3, [r4, #16]
 8004f82:	4632      	mov	r2, r6
 8004f84:	4649      	mov	r1, r9
 8004f86:	4640      	mov	r0, r8
 8004f88:	47d0      	blx	sl
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	d0ad      	beq.n	8004eea <_printf_i+0x15a>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	079b      	lsls	r3, r3, #30
 8004f92:	d413      	bmi.n	8004fbc <_printf_i+0x22c>
 8004f94:	68e0      	ldr	r0, [r4, #12]
 8004f96:	9b03      	ldr	r3, [sp, #12]
 8004f98:	4298      	cmp	r0, r3
 8004f9a:	bfb8      	it	lt
 8004f9c:	4618      	movlt	r0, r3
 8004f9e:	e7a6      	b.n	8004eee <_printf_i+0x15e>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4632      	mov	r2, r6
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	47d0      	blx	sl
 8004faa:	3001      	adds	r0, #1
 8004fac:	d09d      	beq.n	8004eea <_printf_i+0x15a>
 8004fae:	3501      	adds	r5, #1
 8004fb0:	68e3      	ldr	r3, [r4, #12]
 8004fb2:	9903      	ldr	r1, [sp, #12]
 8004fb4:	1a5b      	subs	r3, r3, r1
 8004fb6:	42ab      	cmp	r3, r5
 8004fb8:	dcf2      	bgt.n	8004fa0 <_printf_i+0x210>
 8004fba:	e7eb      	b.n	8004f94 <_printf_i+0x204>
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	f104 0619 	add.w	r6, r4, #25
 8004fc2:	e7f5      	b.n	8004fb0 <_printf_i+0x220>
 8004fc4:	08005477 	.word	0x08005477
 8004fc8:	08005488 	.word	0x08005488

08004fcc <__swbuf_r>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	460e      	mov	r6, r1
 8004fd0:	4614      	mov	r4, r2
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	b118      	cbz	r0, 8004fde <__swbuf_r+0x12>
 8004fd6:	6a03      	ldr	r3, [r0, #32]
 8004fd8:	b90b      	cbnz	r3, 8004fde <__swbuf_r+0x12>
 8004fda:	f7ff f9e5 	bl	80043a8 <__sinit>
 8004fde:	69a3      	ldr	r3, [r4, #24]
 8004fe0:	60a3      	str	r3, [r4, #8]
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	071a      	lsls	r2, r3, #28
 8004fe6:	d501      	bpl.n	8004fec <__swbuf_r+0x20>
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	b943      	cbnz	r3, 8004ffe <__swbuf_r+0x32>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f82a 	bl	8005048 <__swsetup_r>
 8004ff4:	b118      	cbz	r0, 8004ffe <__swbuf_r+0x32>
 8004ff6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	6922      	ldr	r2, [r4, #16]
 8005002:	1a98      	subs	r0, r3, r2
 8005004:	6963      	ldr	r3, [r4, #20]
 8005006:	b2f6      	uxtb	r6, r6
 8005008:	4283      	cmp	r3, r0
 800500a:	4637      	mov	r7, r6
 800500c:	dc05      	bgt.n	800501a <__swbuf_r+0x4e>
 800500e:	4621      	mov	r1, r4
 8005010:	4628      	mov	r0, r5
 8005012:	f7ff fcbd 	bl	8004990 <_fflush_r>
 8005016:	2800      	cmp	r0, #0
 8005018:	d1ed      	bne.n	8004ff6 <__swbuf_r+0x2a>
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	3b01      	subs	r3, #1
 800501e:	60a3      	str	r3, [r4, #8]
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	701e      	strb	r6, [r3, #0]
 8005028:	6962      	ldr	r2, [r4, #20]
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	429a      	cmp	r2, r3
 800502e:	d004      	beq.n	800503a <__swbuf_r+0x6e>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	07db      	lsls	r3, r3, #31
 8005034:	d5e1      	bpl.n	8004ffa <__swbuf_r+0x2e>
 8005036:	2e0a      	cmp	r6, #10
 8005038:	d1df      	bne.n	8004ffa <__swbuf_r+0x2e>
 800503a:	4621      	mov	r1, r4
 800503c:	4628      	mov	r0, r5
 800503e:	f7ff fca7 	bl	8004990 <_fflush_r>
 8005042:	2800      	cmp	r0, #0
 8005044:	d0d9      	beq.n	8004ffa <__swbuf_r+0x2e>
 8005046:	e7d6      	b.n	8004ff6 <__swbuf_r+0x2a>

08005048 <__swsetup_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4b29      	ldr	r3, [pc, #164]	@ (80050f0 <__swsetup_r+0xa8>)
 800504c:	4605      	mov	r5, r0
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	460c      	mov	r4, r1
 8005052:	b118      	cbz	r0, 800505c <__swsetup_r+0x14>
 8005054:	6a03      	ldr	r3, [r0, #32]
 8005056:	b90b      	cbnz	r3, 800505c <__swsetup_r+0x14>
 8005058:	f7ff f9a6 	bl	80043a8 <__sinit>
 800505c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005060:	0719      	lsls	r1, r3, #28
 8005062:	d422      	bmi.n	80050aa <__swsetup_r+0x62>
 8005064:	06da      	lsls	r2, r3, #27
 8005066:	d407      	bmi.n	8005078 <__swsetup_r+0x30>
 8005068:	2209      	movs	r2, #9
 800506a:	602a      	str	r2, [r5, #0]
 800506c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005070:	81a3      	strh	r3, [r4, #12]
 8005072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005076:	e033      	b.n	80050e0 <__swsetup_r+0x98>
 8005078:	0758      	lsls	r0, r3, #29
 800507a:	d512      	bpl.n	80050a2 <__swsetup_r+0x5a>
 800507c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800507e:	b141      	cbz	r1, 8005092 <__swsetup_r+0x4a>
 8005080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005084:	4299      	cmp	r1, r3
 8005086:	d002      	beq.n	800508e <__swsetup_r+0x46>
 8005088:	4628      	mov	r0, r5
 800508a:	f7ff fafd 	bl	8004688 <_free_r>
 800508e:	2300      	movs	r3, #0
 8005090:	6363      	str	r3, [r4, #52]	@ 0x34
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	2300      	movs	r3, #0
 800509c:	6063      	str	r3, [r4, #4]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	f043 0308 	orr.w	r3, r3, #8
 80050a8:	81a3      	strh	r3, [r4, #12]
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	b94b      	cbnz	r3, 80050c2 <__swsetup_r+0x7a>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b8:	d003      	beq.n	80050c2 <__swsetup_r+0x7a>
 80050ba:	4621      	mov	r1, r4
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 f883 	bl	80051c8 <__smakebuf_r>
 80050c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c6:	f013 0201 	ands.w	r2, r3, #1
 80050ca:	d00a      	beq.n	80050e2 <__swsetup_r+0x9a>
 80050cc:	2200      	movs	r2, #0
 80050ce:	60a2      	str	r2, [r4, #8]
 80050d0:	6962      	ldr	r2, [r4, #20]
 80050d2:	4252      	negs	r2, r2
 80050d4:	61a2      	str	r2, [r4, #24]
 80050d6:	6922      	ldr	r2, [r4, #16]
 80050d8:	b942      	cbnz	r2, 80050ec <__swsetup_r+0xa4>
 80050da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050de:	d1c5      	bne.n	800506c <__swsetup_r+0x24>
 80050e0:	bd38      	pop	{r3, r4, r5, pc}
 80050e2:	0799      	lsls	r1, r3, #30
 80050e4:	bf58      	it	pl
 80050e6:	6962      	ldrpl	r2, [r4, #20]
 80050e8:	60a2      	str	r2, [r4, #8]
 80050ea:	e7f4      	b.n	80050d6 <__swsetup_r+0x8e>
 80050ec:	2000      	movs	r0, #0
 80050ee:	e7f7      	b.n	80050e0 <__swsetup_r+0x98>
 80050f0:	20000024 	.word	0x20000024

080050f4 <_raise_r>:
 80050f4:	291f      	cmp	r1, #31
 80050f6:	b538      	push	{r3, r4, r5, lr}
 80050f8:	4605      	mov	r5, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	d904      	bls.n	8005108 <_raise_r+0x14>
 80050fe:	2316      	movs	r3, #22
 8005100:	6003      	str	r3, [r0, #0]
 8005102:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800510a:	b112      	cbz	r2, 8005112 <_raise_r+0x1e>
 800510c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005110:	b94b      	cbnz	r3, 8005126 <_raise_r+0x32>
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f830 	bl	8005178 <_getpid_r>
 8005118:	4622      	mov	r2, r4
 800511a:	4601      	mov	r1, r0
 800511c:	4628      	mov	r0, r5
 800511e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005122:	f000 b817 	b.w	8005154 <_kill_r>
 8005126:	2b01      	cmp	r3, #1
 8005128:	d00a      	beq.n	8005140 <_raise_r+0x4c>
 800512a:	1c59      	adds	r1, r3, #1
 800512c:	d103      	bne.n	8005136 <_raise_r+0x42>
 800512e:	2316      	movs	r3, #22
 8005130:	6003      	str	r3, [r0, #0]
 8005132:	2001      	movs	r0, #1
 8005134:	e7e7      	b.n	8005106 <_raise_r+0x12>
 8005136:	2100      	movs	r1, #0
 8005138:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800513c:	4620      	mov	r0, r4
 800513e:	4798      	blx	r3
 8005140:	2000      	movs	r0, #0
 8005142:	e7e0      	b.n	8005106 <_raise_r+0x12>

08005144 <raise>:
 8005144:	4b02      	ldr	r3, [pc, #8]	@ (8005150 <raise+0xc>)
 8005146:	4601      	mov	r1, r0
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	f7ff bfd3 	b.w	80050f4 <_raise_r>
 800514e:	bf00      	nop
 8005150:	20000024 	.word	0x20000024

08005154 <_kill_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4d07      	ldr	r5, [pc, #28]	@ (8005174 <_kill_r+0x20>)
 8005158:	2300      	movs	r3, #0
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	f7fb fe91 	bl	8000e88 <_kill>
 8005166:	1c43      	adds	r3, r0, #1
 8005168:	d102      	bne.n	8005170 <_kill_r+0x1c>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	b103      	cbz	r3, 8005170 <_kill_r+0x1c>
 800516e:	6023      	str	r3, [r4, #0]
 8005170:	bd38      	pop	{r3, r4, r5, pc}
 8005172:	bf00      	nop
 8005174:	200002a8 	.word	0x200002a8

08005178 <_getpid_r>:
 8005178:	f7fb be7e 	b.w	8000e78 <_getpid>

0800517c <__swhatbuf_r>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	460c      	mov	r4, r1
 8005180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005184:	2900      	cmp	r1, #0
 8005186:	b096      	sub	sp, #88	@ 0x58
 8005188:	4615      	mov	r5, r2
 800518a:	461e      	mov	r6, r3
 800518c:	da0d      	bge.n	80051aa <__swhatbuf_r+0x2e>
 800518e:	89a3      	ldrh	r3, [r4, #12]
 8005190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005194:	f04f 0100 	mov.w	r1, #0
 8005198:	bf14      	ite	ne
 800519a:	2340      	movne	r3, #64	@ 0x40
 800519c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051a0:	2000      	movs	r0, #0
 80051a2:	6031      	str	r1, [r6, #0]
 80051a4:	602b      	str	r3, [r5, #0]
 80051a6:	b016      	add	sp, #88	@ 0x58
 80051a8:	bd70      	pop	{r4, r5, r6, pc}
 80051aa:	466a      	mov	r2, sp
 80051ac:	f000 f848 	bl	8005240 <_fstat_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	dbec      	blt.n	800518e <__swhatbuf_r+0x12>
 80051b4:	9901      	ldr	r1, [sp, #4]
 80051b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051be:	4259      	negs	r1, r3
 80051c0:	4159      	adcs	r1, r3
 80051c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051c6:	e7eb      	b.n	80051a0 <__swhatbuf_r+0x24>

080051c8 <__smakebuf_r>:
 80051c8:	898b      	ldrh	r3, [r1, #12]
 80051ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051cc:	079d      	lsls	r5, r3, #30
 80051ce:	4606      	mov	r6, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	d507      	bpl.n	80051e4 <__smakebuf_r+0x1c>
 80051d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	6123      	str	r3, [r4, #16]
 80051dc:	2301      	movs	r3, #1
 80051de:	6163      	str	r3, [r4, #20]
 80051e0:	b003      	add	sp, #12
 80051e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e4:	ab01      	add	r3, sp, #4
 80051e6:	466a      	mov	r2, sp
 80051e8:	f7ff ffc8 	bl	800517c <__swhatbuf_r>
 80051ec:	9f00      	ldr	r7, [sp, #0]
 80051ee:	4605      	mov	r5, r0
 80051f0:	4639      	mov	r1, r7
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7ff fabc 	bl	8004770 <_malloc_r>
 80051f8:	b948      	cbnz	r0, 800520e <__smakebuf_r+0x46>
 80051fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051fe:	059a      	lsls	r2, r3, #22
 8005200:	d4ee      	bmi.n	80051e0 <__smakebuf_r+0x18>
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	f043 0302 	orr.w	r3, r3, #2
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	e7e2      	b.n	80051d4 <__smakebuf_r+0xc>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	6020      	str	r0, [r4, #0]
 8005212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	9b01      	ldr	r3, [sp, #4]
 800521a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800521e:	b15b      	cbz	r3, 8005238 <__smakebuf_r+0x70>
 8005220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005224:	4630      	mov	r0, r6
 8005226:	f000 f81d 	bl	8005264 <_isatty_r>
 800522a:	b128      	cbz	r0, 8005238 <__smakebuf_r+0x70>
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	431d      	orrs	r5, r3
 800523c:	81a5      	strh	r5, [r4, #12]
 800523e:	e7cf      	b.n	80051e0 <__smakebuf_r+0x18>

08005240 <_fstat_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d07      	ldr	r5, [pc, #28]	@ (8005260 <_fstat_r+0x20>)
 8005244:	2300      	movs	r3, #0
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	f7fb fe7b 	bl	8000f48 <_fstat>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	d102      	bne.n	800525c <_fstat_r+0x1c>
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	b103      	cbz	r3, 800525c <_fstat_r+0x1c>
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	bd38      	pop	{r3, r4, r5, pc}
 800525e:	bf00      	nop
 8005260:	200002a8 	.word	0x200002a8

08005264 <_isatty_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d06      	ldr	r5, [pc, #24]	@ (8005280 <_isatty_r+0x1c>)
 8005268:	2300      	movs	r3, #0
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	f7fb fe7a 	bl	8000f68 <_isatty>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_isatty_r+0x1a>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_isatty_r+0x1a>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	200002a8 	.word	0x200002a8

08005284 <_init>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr

08005290 <_fini>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr
